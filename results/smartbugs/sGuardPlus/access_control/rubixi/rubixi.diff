--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/access_control/rubixi.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/sGuardPlus/access_control/rubixi/rubixi.sol
@@ -1,162 +1,160 @@
-/*

- * @source: https://github.com/trailofbits/not-so-smart-contracts/blob/master/wrong_constructor_name/Rubixi_source_code/Rubixi.sol

- * @author: -

-* @vulnerable_at_lines: 23,24

- */

 

- // 0xe82719202e5965Cf5D9B6673B7503a3b92DE20be#code

- pragma solidity ^0.4.15;

+                        contract sGuardPlus {

+                                constructor() internal {

+                                        

+                                        

+                                }

+                                function div_uint(uint a, uint b) internal pure returns (uint) {

+                                uint c = a / b;

+                                return c;

+                        }

+                                

+                                

+                                

+                        }

+                contract Rubixi is sGuardPlus {

+uint  private   balance = 0;

+uint  private   collectedFees = 0;

+uint  private   feePercent = 10;

+uint  private   pyramidMultiplier = 300;

+uint  private   payoutOrder = 0;

+address  private   creator;

+function DynamicPyramid ()   {

+creator=msg.sender;

+}

 

- contract Rubixi {

+modifier onlyowner {

+if (msg.sender==creator)

+_;

 

-         //Declare variables for storage critical to contract

-         uint private balance = 0;

-         uint private collectedFees = 0;

-         uint private feePercent = 10;

-         uint private pyramidMultiplier = 300;

-         uint private payoutOrder = 0;

+}

+struct Participant {

+address     etherAddress;

+uint     payout;

+}

+Participant [] private   participants;

+function ()   {

+init();

+}

 

-         address private creator;

+function init () private  {

+if (msg.value<1 ether)

+{

+collectedFees+=msg.value;

+return ;

+}

 

-         //Sets creator

-         // <yes> <report> ACCESS_CONTROL

-         function DynamicPyramid() {

-                 creator = msg.sender; //anyone can call this

-         }

+uint     _fee = feePercent;

+if (msg.value>=50 ether)

+_fee/=2;

 

-         modifier onlyowner {

-                 if (msg.sender == creator) _;

-         }

+addPayout(_fee);

+}

 

-         struct Participant {

-                 address etherAddress;

-                 uint payout;

-         }

+function addPayout (uint    _fee) private  {

+participants.push(Participant(msg.sender, (msg.value*pyramidMultiplier)/100));

+if (participants.length==10)

+pyramidMultiplier=200;

+ else 

+if (participants.length==25)

+pyramidMultiplier=150;

 

-         Participant[] private participants;

 

-         //Fallback function

-         function() {

-                 init();

-         }

+balance+=(msg.value*(100-_fee))/100;

+collectedFees+=(msg.value*_fee)/100;

+while (balance>participants[payoutOrder].payout){

+uint     payoutToSend = participants[payoutOrder].payout;

+bool     __sent_result101 = participants[payoutOrder].etherAddress.send(payoutToSend);

+require(__sent_result101);

+balance-=participants[payoutOrder].payout;

+payoutOrder+=1;

+}

 

-         //init function run on fallback

-         function init() private {

-                 //Ensures only tx with value of 1 ether or greater are processed and added to pyramid

-                 if (msg.value < 1 ether) {

-                         collectedFees += msg.value;

-                         return;

-                 }

+}

 

-                 uint _fee = feePercent;

-                 //50% fee rebate on any ether value of 50 or greater

-                 if (msg.value >= 50 ether) _fee /= 2;

+function collectAllFees ()  onlyowner  {

+if (collectedFees==0)

+throw;

+bool     __sent_result102 = creator.send(collectedFees);

+require(__sent_result102);

+collectedFees=0;

+}

 

-                 addPayout(_fee);

-         }

+function collectFeesInEther (uint    _amt)  onlyowner  {

+_amt*=1 ether;

+if (_amt>collectedFees)

+collectAllFees();

 

-         //Function called for valid tx to the contract

-         function addPayout(uint _fee) private {

-                 //Adds new address to participant array

-                 participants.push(Participant(msg.sender, (msg.value * pyramidMultiplier) / 100));

+if (collectedFees==0)

+throw;

+bool     __sent_result103 = creator.send(_amt);

+require(__sent_result103);

+collectedFees-=_amt;

+}

 

-                 //These statements ensure a quicker payout system to later pyramid entrants, so the pyramid has a longer lifespan

-                 if (participants.length == 10) pyramidMultiplier = 200;

-                 else if (participants.length == 25) pyramidMultiplier = 150;

+function collectPercentOfFees (uint    _pcent)  onlyowner  {

+if (collectedFees==0||_pcent>100)

+throw;

+uint     feesToCollect = collectedFees/100*_pcent;

+bool     __sent_result104 = creator.send(feesToCollect);

+require(__sent_result104);

+collectedFees-=feesToCollect;

+}

 

-                 // collect fees and update contract balance

-                 balance += (msg.value * (100 - _fee)) / 100;

-                 collectedFees += (msg.value * _fee) / 100;

+function changeOwner (address    _owner)  onlyowner  {

+creator=_owner;

+}

 

-                 //Pays earlier participiants if balance sufficient

-                 while (balance > participants[payoutOrder].payout) {

-                         uint payoutToSend = participants[payoutOrder].payout;

-                         participants[payoutOrder].etherAddress.send(payoutToSend);

+function changeMultiplier (uint    _mult)  onlyowner  {

+if (_mult>300||_mult<120)

+throw;

+pyramidMultiplier=_mult;

+}

 

-                         balance -= participants[payoutOrder].payout;

-                         payoutOrder += 1;

-                 }

-         }

+function changeFeePercentage (uint    _fee)  onlyowner  {

+if (_fee>10)

+throw;

+feePercent=_fee;

+}

 

-         //Fee functions for creator

-         function collectAllFees() onlyowner {

-                 if (collectedFees == 0) throw;

+function currentMultiplier ()  constant returns (uint    multiplier,string    info){

+multiplier=pyramidMultiplier;

+info="This multiplier applies to you as soon as transaction is received, may be lowered to hasten payouts or increased if payouts are fast enough. Due to no float or decimals, multiplier is x100 for a fractional multiplier e.g. 250 is actually a 2.5x multiplier. Capped at 3x max and 1.2x min.";

+}

 

-                 creator.send(collectedFees);

-                 collectedFees = 0;

-         }

+function currentFeePercentage ()  constant returns (uint    fee,string    info){

+fee=feePercent;

+info="Shown in % form. Fee is halved(50%) for amounts equal or greater than 50 ethers. (Fee may change, but is capped to a maximum of 10%)";

+}

 

-         function collectFeesInEther(uint _amt) onlyowner {

-                 _amt *= 1 ether;

-                 if (_amt > collectedFees) collectAllFees();

+function currentPyramidBalanceApproximately ()  constant returns (uint    pyramidBalance,string    info){

+pyramidBalance=div_uint(balance, 1 ether);

+info="All balance values are measured in Ethers, note that due to no decimal placing, these values show up as integers only, within the contract itself you will get the exact decimal value you are supposed to";

+}

 

-                 if (collectedFees == 0) throw;

+function nextPayoutWhenPyramidBalanceTotalsApproximately ()  constant returns (uint    balancePayout){

+balancePayout=div_uint(participants[payoutOrder].payout, 1 ether);

+}

 

-                 creator.send(_amt);

-                 collectedFees -= _amt;

-         }

+function feesSeperateFromBalanceApproximately ()  constant returns (uint    fees){

+fees=collectedFees/1 ether;

+}

 

-         function collectPercentOfFees(uint _pcent) onlyowner {

-                 if (collectedFees == 0 || _pcent > 100) throw;

+function totalParticipants ()  constant returns (uint    count){

+count=participants.length;

+}

 

-                 uint feesToCollect = collectedFees / 100 * _pcent;

-                 creator.send(feesToCollect);

-                 collectedFees -= feesToCollect;

-         }

+function numberOfParticipantsWaitingForPayout ()  constant returns (uint    count){

+count=participants.length-payoutOrder;

+}

 

-         //Functions for changing variables related to the contract

-         function changeOwner(address _owner) onlyowner {

-                 creator = _owner;

-         }

+function participantDetails (uint    orderInPyramid)  constant returns (address    Address,uint    Payout){

+if (orderInPyramid<=participants.length)

+{

+Address=participants[orderInPyramid].etherAddress;

+Payout=participants[orderInPyramid].payout/1 ether;

+}

 

-         function changeMultiplier(uint _mult) onlyowner {

-                 if (_mult > 300 || _mult < 120) throw;

+}

 

-                 pyramidMultiplier = _mult;

-         }

-

-         function changeFeePercentage(uint _fee) onlyowner {

-                 if (_fee > 10) throw;

-

-                 feePercent = _fee;

-         }

-

-         //Functions to provide information to end-user using JSON interface or other interfaces

-         function currentMultiplier() constant returns(uint multiplier, string info) {

-                 multiplier = pyramidMultiplier;

-                 info = 'This multiplier applies to you as soon as transaction is received, may be lowered to hasten payouts or increased if payouts are fast enough. Due to no float or decimals, multiplier is x100 for a fractional multiplier e.g. 250 is actually a 2.5x multiplier. Capped at 3x max and 1.2x min.';

-         }

-

-         function currentFeePercentage() constant returns(uint fee, string info) {

-                 fee = feePercent;

-                 info = 'Shown in % form. Fee is halved(50%) for amounts equal or greater than 50 ethers. (Fee may change, but is capped to a maximum of 10%)';

-         }

-

-         function currentPyramidBalanceApproximately() constant returns(uint pyramidBalance, string info) {

-                 pyramidBalance = balance / 1 ether;

-                 info = 'All balance values are measured in Ethers, note that due to no decimal placing, these values show up as integers only, within the contract itself you will get the exact decimal value you are supposed to';

-         }

-

-         function nextPayoutWhenPyramidBalanceTotalsApproximately() constant returns(uint balancePayout) {

-                 balancePayout = participants[payoutOrder].payout / 1 ether;

-         }

-

-         function feesSeperateFromBalanceApproximately() constant returns(uint fees) {

-                 fees = collectedFees / 1 ether;

-         }

-

-         function totalParticipants() constant returns(uint count) {

-                 count = participants.length;

-         }

-

-         function numberOfParticipantsWaitingForPayout() constant returns(uint count) {

-                 count = participants.length - payoutOrder;

-         }

-

-         function participantDetails(uint orderInPyramid) constant returns(address Address, uint Payout) {

-                 if (orderInPyramid <= participants.length) {

-                         Address = participants[orderInPyramid].etherAddress;

-                         Payout = participants[orderInPyramid].payout / 1 ether;

-                 }

-         }

- }

+}
