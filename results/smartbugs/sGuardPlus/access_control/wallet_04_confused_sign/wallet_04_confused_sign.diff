--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/access_control/wallet_04_confused_sign.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/sGuardPlus/access_control/wallet_04_confused_sign/wallet_04_confused_sign.sol
@@ -1,42 +1,43 @@
-/*

- * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-105#wallet-04-confused-signsol

- * @author: -

- * @vulnerable_at_lines: 30

- */

 

- pragma solidity ^0.4.24;

+                        contract sGuardPlus {

+                                constructor() internal {

+                                        

+                                        

+                                }

+                                function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+                                uint256 c = a + b;

+                                assert(c >= a);

+                                return c;

+                        }

+function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+                                assert(b <= a);

+                                return a - b;

+                        }

+                                

+                                

+                                

+                        }

+                contract Wallet is sGuardPlus {

+address     creator;

+mapping (address  => uint256 )    balances;

+constructor () public  {

+creator=msg.sender;

+}

 

- /* User can add pay in and withdraw Ether.

-    Unfortunatelty, the developer was drunk and used the wrong comparison operator in "withdraw()"

-    Anybody can withdraw arbitrary amounts of Ether :()

- */

+function deposit () public payable {

+assert(add_uint256(balances[msg.sender], msg.value)>balances[msg.sender]);

+balances[msg.sender]=add_uint256(balances[msg.sender], msg.value);

+}

 

- contract Wallet {

-     address creator;

+function withdraw (uint256    amount) public  {

+require(amount>=balances[msg.sender]);

+msg.sender.transfer(amount);

+balances[msg.sender]=sub_uint256(balances[msg.sender], amount);

+}

 

-     mapping(address => uint256) balances;

+function migrateTo (address    to) public  {

+require(creator==msg.sender);

+to.transfer(this.balance);

+}

 

-     constructor() public {

-         creator = msg.sender;

-     }

-

-     function deposit() public payable {

-         assert(balances[msg.sender] + msg.value > balances[msg.sender]);

-         balances[msg.sender] += msg.value;

-     }

-

-     function withdraw(uint256 amount) public {

-         // <yes> <report> ACCESS_CONTROL

-         require(amount >= balances[msg.sender]);

-         msg.sender.transfer(amount);

-         balances[msg.sender] -= amount;

-     }

-

-     // In an emergency the owner can migrate  allfunds to a different address.

-

-     function migrateTo(address to) public {

-         require(creator == msg.sender);

-         to.transfer(this.balance);

-     }

-

- }

+}
