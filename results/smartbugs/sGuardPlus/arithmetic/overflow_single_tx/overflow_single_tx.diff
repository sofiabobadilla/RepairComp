--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/arithmetic/overflow_single_tx.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/sGuardPlus/arithmetic/overflow_single_tx/overflow_single_tx.sol
@@ -1,51 +1,54 @@
-/*

- * @source: https://github.com/ConsenSys/evm-analyzer-benchmark-suite

- * @author: Suhabe Bugrara

- * @vulnerable_at_lines: 18,24,30,36,42,48

- */

 

-//Single transaction overflow

-//Post-transaction effect: overflow escapes to publicly-readable storage

+                        contract sGuardPlus {

+                                constructor() internal {

+                                        

+                                        

+                                }

+                                function add_uint(uint a, uint b) internal pure returns (uint) {

+                                uint c = a + b;

+                                assert(c >= a);

+                                return c;

+                        }

+function mul_uint(uint a, uint b) internal pure returns (uint) {

+                                if (a == 0) {

+                                        return 0;

+                                }

+                                uint c = a * b;

+                                assert(c / a == b);

+                                return c;

+                        }

+function sub_uint(uint a, uint b) internal pure returns (uint) {

+                                assert(b <= a);

+                                return a - b;

+                        }

+                                

+                                

+                                

+                        }

+                contract IntegerOverflowSingleTransaction is sGuardPlus {

+uint  public   count = 1;

+function overflowaddtostate (uint256    input) public  {

+count=add_uint(count, input);

+}

 

-pragma solidity ^0.4.23;

+function overflowmultostate (uint256    input) public  {

+count=mul_uint(count, input);

+}

 

-contract IntegerOverflowSingleTransaction {

-    uint public count = 1;

+function underflowtostate (uint256    input) public  {

+count=sub_uint(count, input);

+}

 

-    // ADD overflow with result stored in state variable.

-    function overflowaddtostate(uint256 input) public {

-        // <yes> <report> ARITHMETIC

-        count += input;

-    }

+function overflowlocalonly (uint256    input) public  {

+uint     res = count+input;

+}

 

-    // MUL overflow with result stored in state variable.

-    function overflowmultostate(uint256 input) public {

-        // <yes> <report> ARITHMETIC

-        count *= input;

-    }

+function overflowmulocalonly (uint256    input) public  {

+uint     res = mul_uint(count, input);

+}

 

-    // Underflow with result stored in state variable.

-    function underflowtostate(uint256 input) public {

-        // <yes> <report> ARITHMETIC

-        count -= input;

-    }

-

-    // ADD Overflow, no effect on state.

-    function overflowlocalonly(uint256 input) public {

-        // <yes> <report> ARITHMETIC

-        uint res = count + input;

-    }

-

-    // MUL Overflow, no effect on state.

-    function overflowmulocalonly(uint256 input) public {

-        // <yes> <report> ARITHMETIC

-        uint res = count * input;

-    }

-

-    // Underflow, no effect on state.

-    function underflowlocalonly(uint256 input) public {

-        // <yes> <report> ARITHMETIC

-       	uint res = count - input;

-    }

+function underflowlocalonly (uint256    input) public  {

+uint     res = count-input;

+}

 

 }
