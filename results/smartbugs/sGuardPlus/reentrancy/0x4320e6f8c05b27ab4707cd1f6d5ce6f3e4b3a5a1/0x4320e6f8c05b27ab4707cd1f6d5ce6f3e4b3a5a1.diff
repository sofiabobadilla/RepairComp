--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/sGuardPlus/reentrancy/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol
@@ -1,97 +1,84 @@
 

-/*

- * @source: etherscan.io 

- * @author: -

- * @vulnerable_at_lines: 55

- */

+                        contract sGuardPlus {

+                                constructor() internal {

+                                        __lock_modifier0_lock = false;

+                                        

+                                }

+                                

+                                

+                bool private __lock_modifier0_lock;

+                modifier __lock_modifier0() {

+                        require(!__lock_modifier0_lock);

+                        __lock_modifier0_lock = true;

+                        _;

+                        __lock_modifier0_lock = false;

+                        

+                }

+                

+                                

+                                

+                        }

+                contract ACCURAL_DEPOSIT is sGuardPlus {

+mapping (address  => uint256 ) public   balances;

+uint  public   MinSum = 1 ether;

+LogFile     Log = LogFile(0x0486cF65A2F2F3A392CBEa398AFB7F5f0B72FF46);

+bool     intitalized;

+function SetMinSum (uint    _val) public  {

+if (intitalized)

+revert();

 

-pragma solidity ^0.4.19;

-

-contract ACCURAL_DEPOSIT

-{

-    mapping (address=>uint256) public balances;   

-   

-    uint public MinSum = 1 ether;

-    

-    LogFile Log = LogFile(0x0486cF65A2F2F3A392CBEa398AFB7F5f0B72FF46);

-    

-    bool intitalized;

-    

-    function SetMinSum(uint _val)

-    public

-    {

-        if(intitalized)revert();

-        MinSum = _val;

-    }

-    

-    function SetLogFile(address _log)

-    public

-    {

-        if(intitalized)revert();

-        Log = LogFile(_log);

-    }

-    

-    function Initialized()

-    public

-    {

-        intitalized = true;

-    }

-    

-    function Deposit()

-    public

-    payable

-    {

-        balances[msg.sender]+= msg.value;

-        Log.AddMessage(msg.sender,msg.value,"Put");

-    }

-    

-    function Collect(uint _am)

-    public

-    payable

-    {

-        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)

-        {

-            // <yes> <report> REENTRANCY

-            if(msg.sender.call.value(_am)())

-            {

-                balances[msg.sender]-=_am;

-                Log.AddMessage(msg.sender,_am,"Collect");

-            }

-        }

-    }

-    

-    function() 

-    public 

-    payable

-    {

-        Deposit();

-    }

-    

+MinSum=_val;

 }

 

+function SetLogFile (address    _log) public  {

+if (intitalized)

+revert();

 

+Log=LogFile(_log);

+}

 

-contract LogFile

+function Initialized () public  {

+intitalized=true;

+}

+

+function Deposit () public payable {

+balances[msg.sender]+=msg.value;

+Log.AddMessage(msg.sender, msg.value, "Put");

+}

+

+function Collect (uint    _am) public __lock_modifier0 payable {

+if (balances[msg.sender]>=MinSum&&balances[msg.sender]>=_am)

 {

-    struct Message

-    {

-        address Sender;

-        string  Data;

-        uint Val;

-        uint  Time;

-    }

-    

-    Message[] public History;

-    

-    Message LastMsg;

-    

-    function AddMessage(address _adr,uint _val,string _data)

-    public

-    {

-        LastMsg.Sender = _adr;

-        LastMsg.Time = now;

-        LastMsg.Val = _val;

-        LastMsg.Data = _data;

-        History.push(LastMsg);

-    }

-}
+if (msg.sender.call.value(_am)())

+{

+balances[msg.sender]-=_am;

+Log.AddMessage(msg.sender, _am, "Collect");

+}

+

+}

+

+}

+

+function () public payable {

+Deposit();

+}

+

+}

+contract LogFile  {

+struct Message {

+address     Sender;

+string     Data;

+uint     Val;

+uint     Time;

+}

+Message [] public   History;

+Message     LastMsg;

+function AddMessage (address    _adr,uint    _val,string    _data) public  {

+LastMsg.Sender=_adr;

+LastMsg.Time=now;

+LastMsg.Val=_val;

+LastMsg.Data=_data;

+History.push(LastMsg);

+}

+

+}
