--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/sGuardPlus/reentrancy/0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4/0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol
@@ -1,74 +1,72 @@
-/*

- * @source: etherscan.io 

- * @author: -

- * @vulnerable_at_lines: 38

- */

 

-pragma solidity ^0.4.19;

-

-contract PrivateBank

-{

-    mapping (address => uint) public balances;

-    

-    uint public MinDeposit = 1 ether;

-    

-    Log TransferLog;

-    

-    function PrivateBank(address _log)

-    {

-        TransferLog = Log(_log);

-    }

-    

-    function Deposit()

-    public

-    payable

-    {

-        if(msg.value >= MinDeposit)

-        {

-            balances[msg.sender]+=msg.value;

-            TransferLog.AddMessage(msg.sender,msg.value,"Deposit");

-        }

-    }

-    

-    function CashOut(uint _am)

-    {

-        if(_am<=balances[msg.sender])

-        {            

-            // <yes> <report> REENTRANCY

-            if(msg.sender.call.value(_am)())

-            {

-                balances[msg.sender]-=_am;

-                TransferLog.AddMessage(msg.sender,_am,"CashOut");

-            }

-        }

-    }

-    

-    function() public payable{}    

-    

+                        contract sGuardPlus {

+                                constructor() internal {

+                                        __lock_modifier0_lock = false;

+                                        

+                                }

+                                

+                                

+                bool private __lock_modifier0_lock;

+                modifier __lock_modifier0() {

+                        require(!__lock_modifier0_lock);

+                        __lock_modifier0_lock = true;

+                        _;

+                        __lock_modifier0_lock = false;

+                        

+                }

+                

+                                

+                                

+                        }

+                contract PrivateBank is sGuardPlus {

+mapping (address  => uint ) public   balances;

+uint  public   MinDeposit = 1 ether;

+Log     TransferLog;

+constructor (address    _log)   {

+TransferLog=Log(_log);

 }

 

-contract Log 

+function Deposit () public payable {

+if (msg.value>=MinDeposit)

 {

-   

-    struct Message

-    {

-        address Sender;

-        string  Data;

-        uint Val;

-        uint  Time;

-    }

-    

-    Message[] public History;

-    

-    Message LastMsg;

-    

-    function AddMessage(address _adr,uint _val,string _data)

-    public

-    {

-        LastMsg.Sender = _adr;

-        LastMsg.Time = now;

-        LastMsg.Val = _val;

-        LastMsg.Data = _data;

-        History.push(LastMsg);

-    }

-}
+balances[msg.sender]+=msg.value;

+TransferLog.AddMessage(msg.sender, msg.value, "Deposit");

+}

+

+}

+

+function CashOut (uint    _am)  __lock_modifier0  {

+if (_am<=balances[msg.sender])

+{

+if (msg.sender.call.value(_am)())

+{

+balances[msg.sender]-=_am;

+TransferLog.AddMessage(msg.sender, _am, "CashOut");

+}

+

+}

+

+}

+

+function () public payable {

+}

+

+}

+contract Log  {

+struct Message {

+address     Sender;

+string     Data;

+uint     Val;

+uint     Time;

+}

+Message [] public   History;

+Message     LastMsg;

+function AddMessage (address    _adr,uint    _val,string    _data) public  {

+LastMsg.Sender=_adr;

+LastMsg.Time=now;

+LastMsg.Val=_val;

+LastMsg.Data=_data;

+History.push(LastMsg);

+}

+

+}
