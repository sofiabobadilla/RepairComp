[CHECKER] Integer Over/Underflows
[CHECKER] Suicidal
[CHECKER] Re-Entrancy
[CHECKER] Improper use of Tx.origin
[CHECKER] Ether-Leaking

[INFO] all funcs : 4
[INFO] reachable : 4
[INFO] Generating Paths ... took 0.00027s
[INFO] # path : 18

[INFO] Violate CEI: false
[INFO] msg.sender = this possible: false
[INFO] Performing Interval Analysis ... took 0.000616s
Generating VCs ... took 0.005538s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 1 Total elapsed : 0.047085
[
-1 -> true
0 -> true
]
[
]
1/9 ... [IO] line 17, (balances[msg.sender] + msg.value) ... proven
2/9 ... [IO] line 18, (balances[msg.sender] + msg.value) ... proven
3/9 ... [IO] line 26, (lastWithdrawTime[msg.sender] + 604800) ... proven
4/9 ... [IO] line 27, (lastWithdrawTime[msg.sender] + 604800) ... proven
5/9 ... [IO] line 29, (balances[msg.sender] - _weiToWithdraw) ... proven
6/9 ... [ETH_LEAK] line 31, msg.sender.call.value(_weiToWithdraw)() ... unproven
7/9 ... [RE_EL] line 31, msg.sender.call.value(_weiToWithdraw)() ... unproven
8/9 ... [RE] line 16, (EtherStore, depositFunds, []) ... unproven
9/9 ... [RE] line 21, (EtherStore, withdrawFunds, [uint256]) ... unproven
took 0.463029s

Generating VCs ... took 0.002769s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 2 Total elapsed : 0.52705
[
-1 -> @Invest_sum >= Σ_u balances__@12
0 -> @Invest_sum >= Σ_u balances__@12
]
[
]
1/9 ... [IO] line 17, (balances[msg.sender] + msg.value) ... proven
2/9 ... [IO] line 18, (balances[msg.sender] + msg.value) ... proven
3/9 ... [IO] line 26, (lastWithdrawTime[msg.sender] + 604800) ... proven
4/9 ... [IO] line 27, (lastWithdrawTime[msg.sender] + 604800) ... proven
5/9 ... [IO] line 29, (balances[msg.sender] - _weiToWithdraw) ... proven
6/9 ... [ETH_LEAK] line 31, msg.sender.call.value(_weiToWithdraw)() ... proven
7/9 ... [RE_EL] line 31, msg.sender.call.value(_weiToWithdraw)() ... proven
8/9 ... [RE] line 16, (EtherStore, depositFunds, []) ... unproven
9/9 ... [RE] line 21, (EtherStore, withdrawFunds, [uint256]) ... unproven
took 5.714515s

Generating VCs ... took 0.002822s
Checking validity of VCs ... took 2.625932s

Generating VCs ... took 0.002499s
Checking validity of VCs ... took 8.144337s

Generating VCs ... took 0.002732s
Checking validity of VCs ... took 2.517994s

Generating VCs ... took 0.002519s
Checking validity of VCs ... took 2.688409s

Generating VCs ... took 0.002618s
Checking validity of VCs ... took 2.199484s

Generating VCs ... took 0.002621s
Checking validity of VCs ... took 3.877803s

Generating VCs ... took 0.002658s
Checking validity of VCs ... took 2.782516s

Iter : 10 To explore : 158 Explored : 192 Total elapsed : 31.113302
Generating VCs ... took 0.002563s
Checking validity of VCs ... took 1.368732s

Generating VCs ... took 0.002668s
Checking validity of VCs ... took 2.059862s

Generating VCs ... took 0.002626s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 12 Total elapsed : 34.657566
[
-1 -> ((withdrawalLimit__@4 == 1000000000000000000) /\ @Invest_sum >= Σ_u balances__@12)
0 -> @Invest_sum >= Σ_u balances__@12
]
[
]
1/9 ... [IO] line 17, (balances[msg.sender] + msg.value) ... proven
2/9 ... [IO] line 18, (balances[msg.sender] + msg.value) ... proven
3/9 ... [IO] line 26, (lastWithdrawTime[msg.sender] + 604800) ... proven
4/9 ... [IO] line 27, (lastWithdrawTime[msg.sender] + 604800) ... proven
5/9 ... [IO] line 29, (balances[msg.sender] - _weiToWithdraw) ... proven
6/9 ... [ETH_LEAK] line 31, msg.sender.call.value(_weiToWithdraw)() ... proven
7/9 ... [RE_EL] line 31, msg.sender.call.value(_weiToWithdraw)() ... proven
8/9 ... [RE] line 16, (EtherStore, depositFunds, []) ... unproven
9/9 ... [RE] line 21, (EtherStore, withdrawFunds, [uint256]) ... unproven
took 1.076606s

Generating VCs ... took 0.00271s
Checking validity of VCs ... took 2.127576s

Generating VCs ... took 0.002649s
Checking validity of VCs ... took 11.887154s

Generating VCs ... took 0.00260899999999s
Checking validity of VCs ... took 3.012546s

Generating VCs ... took 0.002706s
Checking validity of VCs ... took 2.626377s

Generating VCs ... took 0.00267700000001s
Checking validity of VCs ... took 3.245894s

Generating VCs ... took 0.002576s
Checking validity of VCs ... took 1.010726s

Generating VCs ... took 0.002619s
Checking validity of VCs ... took 2.566629s

Iter : 20 To explore : 150 Explored : 364 Total elapsed : 62.173548
Generating VCs ... took 0.002517s
Checking validity of VCs ... took 2.352707s

Generating VCs ... took 0.00248500000001s
Checking validity of VCs ... took 0.969837s

Generating VCs ... took 0.00248699999999s
Checking validity of VCs ... took 3.398056s

Generating VCs ... took 0.00262600000001s
Checking validity of VCs ... took 1.957654s

Generating VCs ... took 0.00269300000001s
Checking validity of VCs ... took 1.93652s

Generating VCs ... took 0.00280100000001s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 25 Total elapsed : 72.953076
[
-1 -> ((withdrawalLimit__@4 == 1000000000000000000) /\ @Invest_sum >= Σ_u balances__@12)
0 -> ((withdrawalLimit__@4 == 1000000000000000000) /\ @Invest_sum >= Σ_u balances__@12)
]
[
]
1/9 ... [IO] line 17, (balances[msg.sender] + msg.value) ... proven
2/9 ... [IO] line 18, (balances[msg.sender] + msg.value) ... proven
3/9 ... [IO] line 26, (lastWithdrawTime[msg.sender] + 604800) ... proven
4/9 ... [IO] line 27, (lastWithdrawTime[msg.sender] + 604800) ... proven
5/9 ... [IO] line 29, (balances[msg.sender] - _weiToWithdraw) ... proven
6/9 ... [ETH_LEAK] line 31, msg.sender.call.value(_weiToWithdraw)() ... proven
7/9 ... [RE_EL] line 31, msg.sender.call.value(_weiToWithdraw)() ... proven
8/9 ... [RE] line 16, (EtherStore, depositFunds, []) ... unproven
9/9 ... [RE] line 21, (EtherStore, withdrawFunds, [uint256]) ... unproven
took 1.049668s

Generating VCs ... took 0.002551s
Checking validity of VCs ... took 2.371911s

Generating VCs ... took 0.00247299999999s
Checking validity of VCs ... took 3.892563s

Generating VCs ... took 0.002531s
Checking validity of VCs ... took 10.038071s

Generating VCs ... took 0.00265800000001s
Checking validity of VCs ... took 2.011652s

Iter : 30 To explore : 86 Explored : 465 Total elapsed : 92.223554
Generating VCs ... took 0.00264s
Checking validity of VCs ... took 3.704015s

Generating VCs ... took 0.00266099999999s
Checking validity of VCs ... took 3.270711s

Generating VCs ... took 0.002545s
Checking validity of VCs ... took 1.389772s

Generating VCs ... took 0.00257400000001s
Checking validity of VCs ... took 3.017407s

Generating VCs ... took 0.002679s
Checking validity of VCs ... took 2.39307s

Generating VCs ... took 0.00272400000001s
Checking validity of VCs ... took 0.995781s

Generating VCs ... took 0.00269200000001s
Checking validity of VCs ... took 3.08291s

Generating VCs ... took 0.00279500000001s
Checking validity of VCs ... took 3.913477s

Generating VCs ... took 0.00275000000001s
Checking validity of VCs ... took 7.767121s

Generating VCs ... took 0.002623s
Checking validity of VCs ... took 3.925608s

Iter : 40 To explore : 103 Explored : 492 Total elapsed : 125.768561
Generating VCs ... took 0.002894s
Checking validity of VCs ... took 2.48681s

Generating VCs ... took 0.00301300000001s
Checking validity of VCs ... took 1.157752s

Generating VCs ... took 0.00344900000002s
Checking validity of VCs ... took 3.194074s

Generating VCs ... took 0.002658s
Checking validity of VCs ... took 3.495655s

Generating VCs ... took 0.003815s
Checking validity of VCs ... took 3.520066s

Generating VCs ... took 0.00265999999999s
Checking validity of VCs ... took 1.988197s

Generating VCs ... took 0.002623s
Checking validity of VCs ... took 4.198638s

Generating VCs ... took 0.00272000000001s
Checking validity of VCs ... took 5.141082s

Generating VCs ... took 0.00140999999999s
Checking validity of VCs ... 
1/10 ... [NO_EFFECT] line 18, (@pre1 == balances[msg.sender]) ... unproven
2/10 ... [NO_EFFECT] line 29, (@pre3 == balances[msg.sender]) ... unproven
3/10 ... [NO_EFFECT] line 30, (@pre2 == lastWithdrawTime[msg.sender]) ... unproven
4/10 ... [ASSIGN_CONST] line 18, (balances[msg.sender] == 0) ... unproven
5/10 ... [ASSIGN_CONST] line 29, (balances[msg.sender] == 0) ... unproven
6/10 ... [DEAD] line 17, false ... unproven
7/10 ... [DEAD] line 22, false ... unproven
8/10 ... [DEAD] line 24, false ... unproven
9/10 ... [DEAD] line 26, false ... unproven
10/10 ... [DEAD] line 27, false ... unproven
took 3.196213s


===== Vulnerability Report =====
[1] [IO] line 17, (balances[msg.sender] + msg.value) : proven
[2] [IO] line 18, (balances[msg.sender] + msg.value) : proven
[3] [IO] line 26, (lastWithdrawTime[msg.sender] + 604800) : proven
[4] [IO] line 27, (lastWithdrawTime[msg.sender] + 604800) : proven
[5] [IO] line 29, (balances[msg.sender] - _weiToWithdraw) : proven
[6] [ETH_LEAK] line 31, msg.sender.call.value(_weiToWithdraw)() : proven
[7] [RE_EL] line 31, msg.sender.call.value(_weiToWithdraw)() : proven
[8] [RE] line 16, (EtherStore, depositFunds, []) : unproven
[9] [RE] line 21, (EtherStore, withdrawFunds, [uint256]) : unproven

===== Regression Report =====
[1] [NO_EFFECT] line 18, (@pre1 == balances[msg.sender]) : unproven
[2] [NO_EFFECT] line 29, (@pre3 == balances[msg.sender]) : unproven
[3] [NO_EFFECT] line 30, (@pre2 == lastWithdrawTime[msg.sender]) : unproven
[4] [ASSIGN_CONST] line 18, (balances[msg.sender] == 0) : unproven
[5] [ASSIGN_CONST] line 29, (balances[msg.sender] == 0) : unproven
[6] [DEAD] line 17, false : unproven
[7] [DEAD] line 22, false : unproven
[8] [DEAD] line 24, false : unproven
[9] [DEAD] line 26, false : unproven
[10] [DEAD] line 27, false : unproven

============ Statistics ============
# Iter                    : 47
# Alarm / Query           : 2 / 9
- integer over/underflow  : 0 / 5
- kill-anyone             : 0 / 0
- ether-leaking           : 0 / 1
- reentrancy-leaking      : 0 / 1
- reentrancy              : 2 / 2
- tx.origin               : 0 / 0

Time Elapsed (Real) : 154.236922979
Time Elapsed (CPU)  : 154.221875
