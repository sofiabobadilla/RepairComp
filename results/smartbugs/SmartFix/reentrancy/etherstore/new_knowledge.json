{
  "src": [ "etherstore.sol" ],
  "knowledge": [
    {
      "abs_patch": [
        "Abs_Insert ({mapping(address => uint256)}, {}, 1, 0, 0, 0 @ {mapping(address => uint256)})"
      ],
      "score": 0.1
    },
    {
      "abs_patch": [
        "Abs_Insert ({mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0 @ {mapping(address => uint256)})"
      ],
      "score": 0.1
    },
    {
      "abs_patch": [
        "Abs_Replace ({mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0 @ {mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0 @ {+,>=} @ {mapping(address => uint256)} @ {+,<=} @ {mapping(address => uint256)})"
      ],
      "score": -0.1
    },
    {
      "abs_patch": [
        "Abs_Replace ({mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0 @ {mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0 @ {<=} @ {uint256} @ {>} @ {uint256})"
      ],
      "score": -0.1
    },
    {
      "abs_patch": [
        "Abs_AtomLst [\nAbs_NR ({mapping(address => uint256)}, {}, 1, 0, 0, 0)\nAbs_NR ({mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0)\n]"
      ],
      "score": 0.094
    },
    {
      "abs_patch": [
        "Abs_AtomLst [\nAbs_Move ({mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0)\n]"
      ],
      "score": 0.5
    },
    {
      "abs_patch": [
        "Abs_AtomLst [\nAbs_Move ({mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0)\n]",
        "Abs_Insert ({mapping(address => uint256)}, {}, 1, 0, 0, 0 @ {mapping(address => uint256)})"
      ],
      "score": 0.6
    },
    {
      "abs_patch": [
        "Abs_AtomLst [\nAbs_Move ({mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0)\n]",
        "Abs_Insert ({mapping(address => uint256)}, {}, 1, 0, 0, 0 @ {mapping(address => uint256)})",
        "Abs_Insert ({mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0 @ {mapping(address => uint256)})"
      ],
      "score": 0.7
    },
    {
      "abs_patch": [
        "Abs_AtomLst [\nAbs_Move ({mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0)\n]",
        "Abs_Insert ({mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0 @ {mapping(address => uint256)})"
      ],
      "score": 0.6
    },
    {
      "abs_patch": [
        "Abs_AtomLst [\nAbs_Move ({mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0)\n]",
        "Abs_Replace ({mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0 @ {mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0 @ {+,>=} @ {mapping(address => uint256)} @ {+,<=} @ {mapping(address => uint256)})"
      ],
      "score": 0.4
    },
    {
      "abs_patch": [
        "Abs_AtomLst [\nAbs_Move ({mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0)\n]",
        "Abs_Replace ({mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0 @ {mapping(address => uint256)}, {uint256,mapping(address => uint256)}, 0, 1, 0, 0 @ {<=} @ {uint256} @ {>} @ {uint256})"
      ],
      "score": 0.4
    }
  ]
}