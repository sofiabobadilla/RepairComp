{
  "src": [ "0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol" ],
  "knowledge": [
    {
      "abs_patch": [
        "Abs_Insert ({mapping(address => uint256)}, {uint256}, 1, 0, 0, 0 @ {mapping(address => uint256)})"
      ],
      "score": 0.1
    },
    {
      "abs_patch": [
        "Abs_Insert ({mapping(address => uint256)}, {mapping(address => uint256)}, 0, 1, 0, 0 @ {mapping(address => uint256)})"
      ],
      "score": 0.1
    },
    {
      "abs_patch": [
        "Abs_Replace ({}, {address}, 0, 0, 0, 0 @ {}, {address}, 0, 0, 0, 0 @ {} @ {} @ {} @ {})"
      ],
      "score": 0.1
    },
    {
      "abs_patch": [
        "Abs_Replace ({}, {address}, 0, 0, 0, 0 @ {}, {address}, 0, 0, 0, 0 @ {==} @ {address} @ {!=} @ {address})"
      ],
      "score": -0.1
    },
    {
      "abs_patch": [
        "Abs_Replace ({mapping(address => uint256)}, {mapping(address => uint256)}, 0, 1, 0, 0 @ {mapping(address => uint256)}, {mapping(address => uint256)}, 0, 1, 0, 0 @ {<=} @ {mapping(address => uint256)} @ {>} @ {mapping(address => uint256)})"
      ],
      "score": -0.1
    },
    {
      "abs_patch": [
        "Abs_AtomLst [\nAbs_NR ({contract Log}, {address}, 0, 0, 0, 0)\nAbs_NR ({mapping(address => uint256)}, {uint256}, 1, 0, 0, 0)\nAbs_NR ({mapping(address => uint256)}, {mapping(address => uint256)}, 0, 1, 0, 0)\nAbs_NR ({}, {}, 1, 0, 0, 0)\n]"
      ],
      "score": 0.08799999999999999
    },
    {
      "abs_patch": [
        "Abs_AtomLst [\nAbs_NR ({mapping(address => uint256)}, {uint256}, 1, 0, 0, 0)\nAbs_NR ({mapping(address => uint256)}, {mapping(address => uint256)}, 0, 1, 0, 0)\nAbs_NR ({}, {}, 1, 0, 0, 0)\n]"
      ],
      "score": -0.10900000000000001
    },
    {
      "abs_patch": [
        "Abs_AtomLst [\nAbs_Move ({mapping(address => uint256)}, {mapping(address => uint256)}, 0, 1, 0, 0)\nAbs_ElseRevert ({mapping(address => uint256)}, {mapping(address => uint256)}, 0, 1, 0, 0)\n]"
      ],
      "score": 0.5
    },
    {
      "abs_patch": [
        "Abs_AtomLst [\nAbs_Move ({mapping(address => uint256)}, {mapping(address => uint256)}, 0, 1, 0, 0)\nAbs_ElseRevert ({mapping(address => uint256)}, {mapping(address => uint256)}, 0, 1, 0, 0)\n]",
        "Abs_Insert ({mapping(address => uint256)}, {uint256}, 1, 0, 0, 0 @ {mapping(address => uint256)})"
      ],
      "score": 0.6
    },
    {
      "abs_patch": [
        "Abs_AtomLst [\nAbs_Move ({mapping(address => uint256)}, {mapping(address => uint256)}, 0, 1, 0, 0)\nAbs_ElseRevert ({mapping(address => uint256)}, {mapping(address => uint256)}, 0, 1, 0, 0)\n]",
        "Abs_Insert ({mapping(address => uint256)}, {uint256}, 1, 0, 0, 0 @ {mapping(address => uint256)})",
        "Abs_Replace ({}, {address}, 0, 0, 0, 0 @ {}, {address}, 0, 0, 0, 0 @ {} @ {} @ {} @ {})"
      ],
      "score": 0.7
    },
    {
      "abs_patch": [
        "Abs_AtomLst [\nAbs_Move ({mapping(address => uint256)}, {mapping(address => uint256)}, 0, 1, 0, 0)\nAbs_ElseRevert ({mapping(address => uint256)}, {mapping(address => uint256)}, 0, 1, 0, 0)\n]",
        "Abs_Replace ({}, {address}, 0, 0, 0, 0 @ {}, {address}, 0, 0, 0, 0 @ {} @ {} @ {} @ {})"
      ],
      "score": 0.6
    },
    {
      "abs_patch": [
        "Abs_AtomLst [\nAbs_Move ({mapping(address => uint256)}, {mapping(address => uint256)}, 0, 1, 0, 0)\nAbs_ElseRevert ({mapping(address => uint256)}, {mapping(address => uint256)}, 0, 1, 0, 0)\n]",
        "Abs_Replace ({}, {address}, 0, 0, 0, 0 @ {}, {address}, 0, 0, 0, 0 @ {==} @ {address} @ {!=} @ {address})"
      ],
      "score": 0.4
    }
  ]
}