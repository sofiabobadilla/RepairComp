[INFO] compiled with solc ver. 0.4.25
[INFO] all funcs : 14
[INFO] reachable : 14

[INFO] Violate CEI: false
[INFO] msg.sender = this possible: false
[STEP] Run analyzer
[STEP] Collect fix targets
    (IO, (Government/investInTheSystem/[]), 107, (profitFromCrash + msg.value)),
    (IO, (Government/lendGovernmentMoney/[address]), 35, (lastTimeOfNewCredit + TWELVE_HOURS)),
    (IO, (Government/lendGovernmentMoney/[address]), 49, (round + 1)),
    (IO, (Government/lendGovernmentMoney/[address]), 59, (amount * 110)),
    (IO, (Government/lendGovernmentMoney/[address]), 62, (amount * 5)),
    (IO, (Government/lendGovernmentMoney/[address]), 65, (amount * 5)),
    (IO, (Government/lendGovernmentMoney/[address]), 65, (profitFromCrash + ((amount * 5) / 100))),
    (IO, (Government/lendGovernmentMoney/[address]), 70, (amount * 5)),
    (IO, (Government/lendGovernmentMoney/[address]), 72, (amount * 110)),
    (IO, (Government/lendGovernmentMoney/[address]), 72, (buddies[msg.sender] + ((amount * 110) / 100))),
    (IO, (Government/lendGovernmentMoney/[address]), 74, (address(this).balance - profitFromCrash)),
    (IO, (Government/lendGovernmentMoney/[address]), 76, (buddies[creditorAddresses[lastCreditorPayedOut]] - creditorAmounts[lastCreditorPayedOut])),
    (IO, (Government/lendGovernmentMoney/[address]), 77, (lastCreditorPayedOut + 1)),
    (IO, (Government/totalDebt/[]), 95, (debt + creditorAmounts[i])),
    (IO, (Government/totalPayedOut/[]), 101, (payout + creditorAmounts[i])),
    (ETH_LEAK, (Government/lendGovernmentMoney/[address]), 37, msg.sender.send(amount);),
    (ETH_LEAK, (Government/lendGovernmentMoney/[address]), 39, creditorAddresses[(creditorAddresses.length - 1)].send(profitFromCrash);),
    (ETH_LEAK, (Government/lendGovernmentMoney/[address]), 70, buddy.send(((amount * 5) / 100));),
    (ETH_LEAK, (Government/lendGovernmentMoney/[address]), 75, creditorAddresses[lastCreditorPayedOut].send(creditorAmounts[lastCreditorPayedOut]);),
    (ETH_LEAK, (Government/lendGovernmentMoney/[address]), 82, msg.sender.send(amount);)

[INFO] # of basic patch components : 20
[INFO] extracted components
[
InsertLine (35, assume(((lastTimeOfNewCredit + TWELVE_HOURS) >= lastTimeOfNewCredit));),
InsertLine (49, assume(((round + 1) >= round));),
InsertLine (59, assume(((amount == 0) || (((amount * 110) / amount) == 110)));),
InsertLine (62, assume(((amount == 0) || (((amount * 5) / amount) == 5)));),
InsertLine (65, assume(((amount == 0) || (((amount * 5) / amount) == 5)));),
InsertLine (65, assume(((profitFromCrash + ((amount * 5) / 100)) >= profitFromCrash));),
InsertLine (70, assume(((amount == 0) || (((amount * 5) / amount) == 5)));),
InsertLine (72, assume(((amount == 0) || (((amount * 110) / amount) == 110)));),
InsertLine (72, assume(((buddies[msg.sender] + ((amount * 110) / 100)) >= buddies[msg.sender]));),
InsertLine (74, assume((address(this).balance >= profitFromCrash));),
InsertLine (76, assume((buddies[creditorAddresses[lastCreditorPayedOut]] >= creditorAmounts[lastCreditorPayedOut]));),
InsertLine (77, assume(((lastCreditorPayedOut + 1) >= lastCreditorPayedOut));),
InsertLine (95, assume(((debt + creditorAmounts[i]) >= debt));),
InsertLine (101, assume(((payout + creditorAmounts[i]) >= payout));),
InsertLine (107, assume(((profitFromCrash + msg.value) >= profitFromCrash));),
InsertLine (112, assume((corruptElite == msg.sender));),
Replace (35, ((lastTimeOfNewCredit + TWELVE_HOURS) < block.timestamp), ((lastTimeOfNewCredit + TWELVE_HOURS) >= block.timestamp)),
Replace (64, (profitFromCrash < (10000 * (10 ** 18))), (profitFromCrash > (10000 * (10 ** 18)))),
Replace (74, (creditorAmounts[lastCreditorPayedOut] <= (address(this).balance - profitFromCrash)), (creditorAmounts[lastCreditorPayedOut] > (address(this).balance - profitFromCrash))),
AtomLst [
Replace (75, creditorAmounts[lastCreditorPayedOut], tmp__1)
InsertLine (75, creditorAmounts[lastCreditorPayedOut] = 0;)
InsertLine (75, tmp__1 = creditorAmounts[lastCreditorPayedOut];)
]
]
- Regression found, results/denial_of_service/list_dos/candidates/cand_20/patch.sol
/home/opam/.local/lib/python3.8/site-packages/sklearn/metrics/_regression.py:682: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.
  warnings.warn(msg, UndefinedMetricWarning)
- New best candidate, iter 2, 2347.58268499s : results/denial_of_service/list_dos/candidates/cand_1/patch.sol
[STEP] Enter Repair Loop

========== Statistics ==========
# Iter                    : 2
# Alarm (orginal)         : 20
# Alarm (patch)           : 19
# Alarm wo leak (patch)   : 14
# Edit (min,max)          : 1, 1
# Patch                   : 1
- First solution          : n/a
- First solution (iter)   : n/a
- First solution (time)   : n/a
# Uncompiled candidate    : 0
# Verifier error          : 0

========== Patch info ==========
- 1, Size: 1., Edit: 1, Iter: 2, Time: 2347.58268499, results/denial_of_service/list_dos/candidates/cand_1/patch.sol

Time Elapsed (Real) : 2348.88046694
Time Elapsed (CPU)  : 7.03487
