[CHECKER] Integer Over/Underflows
[CHECKER] Suicidal
[CHECKER] Re-Entrancy
[CHECKER] Improper use of Tx.origin
[CHECKER] Ether-Leaking

[INFO] all funcs : 2
[INFO] reachable : 2
[INFO] Generating Paths ... took 0.000212s
[INFO] # path : 11

[INFO] Violate CEI: false
[INFO] msg.sender = this possible: false
[INFO] Performing Interval Analysis ... took 0.000572s
Generating VCs ... took 0.005178s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 1 Total elapsed : 0.032432
[
0 -> true
6 -> true
]
[
]
1/2 ... [IO] line 22, (x + 1) ... proven
2/2 ... [ETH_LEAK] line 24, refundAddresses[x].send(refunds[refundAddresses[x]]) ... unproven
took 0.443901s

Generating VCs ... took 0.000463s
Checking validity of VCs ... took 0.01523s

Generating VCs ... took 0.000453s
Checking validity of VCs ... took 0.292737s

Generating VCs ... took 0.000412s
Checking validity of VCs ... took 0.67313s

Generating VCs ... took 0.00041s
Checking validity of VCs ... took 0.38422s

Generating VCs ... took 0.000455s
Checking validity of VCs ... took 20.058705s

Generating VCs ... took 0.00047s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 7 Total elapsed : 21.915353
[
0 -> NoOverFlow (Σrefunds__@8)
6 -> NoOverFlow (Σrefunds__@8)
]
[
]
1/2 ... [IO] line 22, (x + 1) ... proven
2/2 ... [ETH_LEAK] line 24, refundAddresses[x].send(refunds[refundAddresses[x]]) ... unproven
took 0.127711s

Generating VCs ... took 0.000420999999999s
Checking validity of VCs ... took 20.062806s

Generating VCs ... took 0.000489000000002s
Checking validity of VCs ... took 0.381659s

Iter : 10 To explore : 39 Explored : 84 Total elapsed : 42.482609
Generating VCs ... took 0.000489999999999s
Checking validity of VCs ... took 21.176s

Generating VCs ... took 0.000423999999995s
Checking validity of VCs ... took 0.354044s

Generating VCs ... took 0.000417999999996s
Checking validity of VCs ... took 20.104841s

Generating VCs ... took 0.000412999999995s
Checking validity of VCs ... took 0.04492s

Generating VCs ... took 0.000413999999992s
Checking validity of VCs ... took 0.685906s

Generating VCs ... took 0.000520999999992s
Checking validity of VCs ... took 0.044286s

Generating VCs ... took 0.000414000000006s
Checking validity of VCs ... took 0.122461s

Generating VCs ... took 0.000450000000001s
Checking validity of VCs ... took 0.00968899999999s

Generating VCs ... took 0.000686000000002s
Checking validity of VCs ... took 0.166057s

Generating VCs ... took 0.00041499999999s
Checking validity of VCs ... took 0.016836s

Iter : 20 To explore : 49 Explored : 104 Total elapsed : 85.219869
Generating VCs ... took 0.000401999999994s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 20 Total elapsed : 85.262754
[
0 -> ((Σrefunds__@8 == 0) /\ NoOverFlow (Σrefunds__@8))
6 -> ((Σrefunds__@8 == 0) /\ NoOverFlow (Σrefunds__@8))
]
[
]
1/2 ... [IO] line 22, (x + 1) ... proven
2/2 ... [ETH_LEAK] line 24, refundAddresses[x].send(refunds[refundAddresses[x]]) ... proven
took 0.457491s

Generating VCs ... took 0.000244999999993s
Checking validity of VCs ... 
1/3 ... [NO_EFFECT] line 22, (@pre1 == x) ... unproven
2/3 ... [NO_EFFECT] line 24, (@pre2 == refundAddresses[x]) ... unproven
3/3 ... [ASSIGN_CONST] line 22, (x == 0) ... unproven
took 0.763704s


===== Vulnerability Report =====
[1] [IO] line 22, (x + 1) : proven
[2] [ETH_LEAK] line 24, refundAddresses[x].send(refunds[refundAddresses[x]]) : proven

===== Regression Report =====
[1] [NO_EFFECT] line 22, (@pre1 == x) : unproven
[2] [NO_EFFECT] line 24, (@pre2 == refundAddresses[x]) : unproven
[3] [ASSIGN_CONST] line 22, (x == 0) : unproven

============ Statistics ============
# Iter                    : 20
# Alarm / Query           : 0 / 2
- integer over/underflow  : 0 / 1
- kill-anyone             : 0 / 0
- ether-leaking           : 0 / 1
- reentrancy-leaking      : 0 / 0
- reentrancy              : 0 / 0
- tx.origin               : 0 / 0

Time Elapsed (Real) : 86.4957389832
Time Elapsed (CPU)  : 86.441822
