[CHECKER] Integer Over/Underflows
[CHECKER] Suicidal
[CHECKER] Re-Entrancy
[CHECKER] Improper use of Tx.origin
[CHECKER] Ether-Leaking

[INFO] all funcs : 21
[INFO] reachable : 18
[INFO] Generating Paths ... took 0.002346s
[INFO] # path : 125

[INFO] Violate CEI: false
[INFO] msg.sender = this possible: false
[INFO] Performing Interval Analysis ... took 0.012658s
Generating VCs ... took 0.069069s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 1 Total elapsed : 0.240961
[
0 -> true
47 -> true
]
[
]
1/24 ... [IO] line 3, (a + b) ... proven
2/24 ... [IO] line 4, (a + b) ... proven
3/24 ... [IO] line 72, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
4/24 ... [IO] line 73, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
5/24 ... [IO] line 82, (roundIndex + 1) ... proven
6/24 ... [IO] line 83, ((roundIndex + 1) * blocksPerRound) ... proven
7/24 ... [IO] line 83, (roundIndex + 1) ... proven
8/24 ... [IO] line 84, (((roundIndex + 1) * blocksPerRound) + subpotIndex) ... unproven
9/24 ... [IO] line 84, ((roundIndex + 1) * blocksPerRound) ... proven
10/24 ... [IO] line 84, (roundIndex + 1) ... proven
11/24 ... [IO] line 91, (subpotsCount + 1) ... proven
12/24 ... [IO] line 92, (subpotsCount + 1) ... unproven
13/24 ... [IO] line 148, (msg.value - (msg.value % ticketPrice)) ... proven
14/24 ... [IO] line 154, (msg.value - value) ... proven
15/24 ... [IO] line 159, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
16/24 ... [IO] line 160, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
17/24 ... [IO] line 163, (rounds[roundIndex].buyers.length + 1) ... proven
18/24 ... [IO] line 167, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... proven
19/24 ... [IO] line 168, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... proven
20/24 ... [IO] line 169, (rounds[roundIndex].ticketsCount + ticketsCount) ... unproven
21/24 ... [IO] line 172, (rounds[roundIndex].pot + value) ... proven
22/24 ... [IO] line 173, (rounds[roundIndex].pot + value) ... proven
23/24 ... [ETH_LEAK] line 121, winner.send(subpot); ... unproven
24/24 ... [ETH_LEAK] line 154, msg.sender.send((msg.value - value)); ... unproven
took 23.549787s

Generating VCs ... took 0.073373s
Checking validity of VCs ... took 0.073121s

Generating VCs ... took 0.067183s
Checking validity of VCs ... took 0.03555s

Generating VCs ... took 0.067961s
Checking validity of VCs ... took 0.060611s

Generating VCs ... took 0.066598s
Checking validity of VCs ... took 0.04886s

Generating VCs ... took 0.069324s
Checking validity of VCs ... took 0.074161s

Generating VCs ... took 0.068837s
Checking validity of VCs ... took 0.059689s

Generating VCs ... took 0.068623s
Checking validity of VCs ... took 0.049009s

Generating VCs ... took 0.068607s
Checking validity of VCs ... took 0.074335s

Iter : 10 To explore : 254 Explored : 263 Total elapsed : 24.843787
Generating VCs ... took 0.066557s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 10 Total elapsed : 24.954545
[
0 -> (blocksPerRound__@33 == 6800)
47 -> (blocksPerRound__@33 == 6800)
]
[
]
1/24 ... [IO] line 3, (a + b) ... proven
2/24 ... [IO] line 4, (a + b) ... proven
3/24 ... [IO] line 72, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
4/24 ... [IO] line 73, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
5/24 ... [IO] line 82, (roundIndex + 1) ... proven
6/24 ... [IO] line 83, ((roundIndex + 1) * blocksPerRound) ... proven
7/24 ... [IO] line 83, (roundIndex + 1) ... proven
8/24 ... [IO] line 84, (((roundIndex + 1) * blocksPerRound) + subpotIndex) ... unproven
9/24 ... [IO] line 84, ((roundIndex + 1) * blocksPerRound) ... proven
10/24 ... [IO] line 84, (roundIndex + 1) ... proven
11/24 ... [IO] line 91, (subpotsCount + 1) ... proven
12/24 ... [IO] line 92, (subpotsCount + 1) ... unproven
13/24 ... [IO] line 148, (msg.value - (msg.value % ticketPrice)) ... proven
14/24 ... [IO] line 154, (msg.value - value) ... proven
15/24 ... [IO] line 159, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
16/24 ... [IO] line 160, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
17/24 ... [IO] line 163, (rounds[roundIndex].buyers.length + 1) ... proven
18/24 ... [IO] line 167, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... proven
19/24 ... [IO] line 168, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... proven
20/24 ... [IO] line 169, (rounds[roundIndex].ticketsCount + ticketsCount) ... unproven
21/24 ... [IO] line 172, (rounds[roundIndex].pot + value) ... proven
22/24 ... [IO] line 173, (rounds[roundIndex].pot + value) ... proven
23/24 ... [ETH_LEAK] line 121, winner.send(subpot); ... unproven
24/24 ... [ETH_LEAK] line 154, msg.sender.send((msg.value - value)); ... unproven
took 5.96068s

Generating VCs ... took 0.07316s
Checking validity of VCs ... took 1.686069s

Generating VCs ... took 0.067612s
Checking validity of VCs ... took 1.736178s

Generating VCs ... took 0.066434s
Checking validity of VCs ... took 1.675029s

Generating VCs ... took 0.069703s
Checking validity of VCs ... took 1.760376s

Generating VCs ... took 0.067319s
Checking validity of VCs ... took 1.695192s

Generating VCs ... took 0.065862s
Checking validity of VCs ... took 1.670679s

Generating VCs ... took 0.066108s
Checking validity of VCs ... took 1.676921s

Generating VCs ... took 0.067359s
Checking validity of VCs ... took 1.678261s

Generating VCs ... took 0.065632s
Checking validity of VCs ... took 1.739639s

Iter : 20 To explore : 155 Explored : 422 Total elapsed : 46.888733
Generating VCs ... took 0.066614s
Checking validity of VCs ... took 1.786535s

Generating VCs ... took 0.0766s
Checking validity of VCs ... took 1.78879s

Generating VCs ... took 0.066495s
Checking validity of VCs ... took 1.699821s

Generating VCs ... took 0.065958s
Checking validity of VCs ... took 1.762882s

Generating VCs ... took 0.066746s
Checking validity of VCs ... took 1.678161s

Generating VCs ... took 0.069124s
Checking validity of VCs ... took 1.753539s

Generating VCs ... took 0.066392s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 26 Total elapsed : 59.523319
[
0 -> ((blockReward__@39 == 5000000000000000000) /\ (blocksPerRound__@33 == 6800))
47 -> ((blockReward__@39 == 5000000000000000000) /\ (blocksPerRound__@33 == 6800))
]
[
]
1/24 ... [IO] line 3, (a + b) ... proven
2/24 ... [IO] line 4, (a + b) ... proven
3/24 ... [IO] line 72, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
4/24 ... [IO] line 73, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
5/24 ... [IO] line 82, (roundIndex + 1) ... proven
6/24 ... [IO] line 83, ((roundIndex + 1) * blocksPerRound) ... proven
7/24 ... [IO] line 83, (roundIndex + 1) ... proven
8/24 ... [IO] line 84, (((roundIndex + 1) * blocksPerRound) + subpotIndex) ... unproven
9/24 ... [IO] line 84, ((roundIndex + 1) * blocksPerRound) ... proven
10/24 ... [IO] line 84, (roundIndex + 1) ... proven
11/24 ... [IO] line 91, (subpotsCount + 1) ... proven
12/24 ... [IO] line 92, (subpotsCount + 1) ... unproven
13/24 ... [IO] line 148, (msg.value - (msg.value % ticketPrice)) ... proven
14/24 ... [IO] line 154, (msg.value - value) ... proven
15/24 ... [IO] line 159, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
16/24 ... [IO] line 160, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
17/24 ... [IO] line 163, (rounds[roundIndex].buyers.length + 1) ... proven
18/24 ... [IO] line 167, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... proven
19/24 ... [IO] line 168, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... proven
20/24 ... [IO] line 169, (rounds[roundIndex].ticketsCount + ticketsCount) ... unproven
21/24 ... [IO] line 172, (rounds[roundIndex].pot + value) ... proven
22/24 ... [IO] line 173, (rounds[roundIndex].pot + value) ... proven
23/24 ... [ETH_LEAK] line 121, winner.send(subpot); ... unproven
24/24 ... [ETH_LEAK] line 154, msg.sender.send((msg.value - value)); ... unproven
took 9.193791s

Generating VCs ... took 0.066828s
Checking validity of VCs ... took 2.037624s

Generating VCs ... took 0.069553s
Checking validity of VCs ... took 1.991408s

Generating VCs ... took 0.066505s
Checking validity of VCs ... took 1.937841s

Iter : 30 To explore : 82 Explored : 622 Total elapsed : 73.311038
Generating VCs ... took 0.066493s
Checking validity of VCs ... took 1.943424s

Generating VCs ... took 0.067009s
Checking validity of VCs ... took 1.941431s

Generating VCs ... took 0.066617s
Checking validity of VCs ... took 1.972589s

Generating VCs ... took 0.075767s
Checking validity of VCs ... took 1.990641s

Generating VCs ... took 0.066859s
Checking validity of VCs ... took 1.910787s

Generating VCs ... took 0.067251s
Checking validity of VCs ... took 1.948148s

Generating VCs ... took 0.065546s
Checking validity of VCs ... took 1.919978s

Generating VCs ... took 0.066172s
Checking validity of VCs ... took 1.912124s

Generating VCs ... took 0.066103s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 38 Total elapsed : 91.455401
[
0 -> (((blockReward__@39 == 5000000000000000000) /\ (blocksPerRound__@33 == 6800)) /\ (ticketPrice__@36 == 100000000000000000))
47 -> (((blockReward__@39 == 5000000000000000000) /\ (blocksPerRound__@33 == 6800)) /\ (ticketPrice__@36 == 100000000000000000))
]
[
]
1/24 ... [IO] line 3, (a + b) ... proven
2/24 ... [IO] line 4, (a + b) ... proven
3/24 ... [IO] line 72, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
4/24 ... [IO] line 73, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
5/24 ... [IO] line 82, (roundIndex + 1) ... proven
6/24 ... [IO] line 83, ((roundIndex + 1) * blocksPerRound) ... proven
7/24 ... [IO] line 83, (roundIndex + 1) ... proven
8/24 ... [IO] line 84, (((roundIndex + 1) * blocksPerRound) + subpotIndex) ... unproven
9/24 ... [IO] line 84, ((roundIndex + 1) * blocksPerRound) ... proven
10/24 ... [IO] line 84, (roundIndex + 1) ... proven
11/24 ... [IO] line 91, (subpotsCount + 1) ... proven
12/24 ... [IO] line 92, (subpotsCount + 1) ... unproven
13/24 ... [IO] line 148, (msg.value - (msg.value % ticketPrice)) ... proven
14/24 ... [IO] line 154, (msg.value - value) ... proven
15/24 ... [IO] line 159, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
16/24 ... [IO] line 160, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
17/24 ... [IO] line 163, (rounds[roundIndex].buyers.length + 1) ... proven
18/24 ... [IO] line 167, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... proven
19/24 ... [IO] line 168, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... proven
20/24 ... [IO] line 169, (rounds[roundIndex].ticketsCount + ticketsCount) ... unproven
21/24 ... [IO] line 172, (rounds[roundIndex].pot + value) ... proven
22/24 ... [IO] line 173, (rounds[roundIndex].pot + value) ... proven
23/24 ... [ETH_LEAK] line 121, winner.send(subpot); ... unproven
24/24 ... [ETH_LEAK] line 154, msg.sender.send((msg.value - value)); ... unproven
took 9.10466s

Generating VCs ... took 0.072191s
Checking validity of VCs ... took 2.193978s

Iter : 40 To explore : 5 Explored : 632 Total elapsed : 100.917934
Generating VCs ... took 0.067203s
Checking validity of VCs ... took 2.162101s

Generating VCs ... took 0.066544s
Checking validity of VCs ... took 2.133171s

Generating VCs ... took 0.065481s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 42 Total elapsed : 107.570331
[
0 -> ((((blockReward__@39 >= ticketPrice__@36) /\ (blockReward__@39 == 5000000000000000000)) /\ (blocksPerRound__@33 == 6800)) /\ (ticketPrice__@36 == 100000000000000000))
47 -> ((((blockReward__@39 >= ticketPrice__@36) /\ (blockReward__@39 == 5000000000000000000)) /\ (blocksPerRound__@33 == 6800)) /\ (ticketPrice__@36 == 100000000000000000))
]
[
]
1/24 ... [IO] line 3, (a + b) ... proven
2/24 ... [IO] line 4, (a + b) ... proven
3/24 ... [IO] line 72, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
4/24 ... [IO] line 73, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
5/24 ... [IO] line 82, (roundIndex + 1) ... proven
6/24 ... [IO] line 83, ((roundIndex + 1) * blocksPerRound) ... proven
7/24 ... [IO] line 83, (roundIndex + 1) ... proven
8/24 ... [IO] line 84, (((roundIndex + 1) * blocksPerRound) + subpotIndex) ... unproven
9/24 ... [IO] line 84, ((roundIndex + 1) * blocksPerRound) ... proven
10/24 ... [IO] line 84, (roundIndex + 1) ... proven
11/24 ... [IO] line 91, (subpotsCount + 1) ... proven
12/24 ... [IO] line 92, (subpotsCount + 1) ... unproven
13/24 ... [IO] line 148, (msg.value - (msg.value % ticketPrice)) ... proven
14/24 ... [IO] line 154, (msg.value - value) ... proven
15/24 ... [IO] line 159, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
16/24 ... [IO] line 160, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
17/24 ... [IO] line 163, (rounds[roundIndex].buyers.length + 1) ... proven
18/24 ... [IO] line 167, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... proven
19/24 ... [IO] line 168, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... proven
20/24 ... [IO] line 169, (rounds[roundIndex].ticketsCount + ticketsCount) ... unproven
21/24 ... [IO] line 172, (rounds[roundIndex].pot + value) ... proven
22/24 ... [IO] line 173, (rounds[roundIndex].pot + value) ... proven
23/24 ... [ETH_LEAK] line 121, winner.send(subpot); ... unproven
24/24 ... [ETH_LEAK] line 154, msg.sender.send((msg.value - value)); ... unproven
took 9.402219s

Generating VCs ... took 0.069007s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 43 Total elapsed : 117.33987
[
0 -> (((((blockReward__@39 >= blocksPerRound__@33) /\ (blockReward__@39 >= ticketPrice__@36)) /\ (blockReward__@39 == 5000000000000000000)) /\ (blocksPerRound__@33 == 6800)) /\ (ticketPrice__@36 == 100000000000000000))
47 -> (((((blockReward__@39 >= blocksPerRound__@33) /\ (blockReward__@39 >= ticketPrice__@36)) /\ (blockReward__@39 == 5000000000000000000)) /\ (blocksPerRound__@33 == 6800)) /\ (ticketPrice__@36 == 100000000000000000))
]
[
]
1/24 ... [IO] line 3, (a + b) ... proven
2/24 ... [IO] line 4, (a + b) ... proven
3/24 ... [IO] line 72, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
4/24 ... [IO] line 73, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
5/24 ... [IO] line 82, (roundIndex + 1) ... proven
6/24 ... [IO] line 83, ((roundIndex + 1) * blocksPerRound) ... proven
7/24 ... [IO] line 83, (roundIndex + 1) ... proven
8/24 ... [IO] line 84, (((roundIndex + 1) * blocksPerRound) + subpotIndex) ... unproven
9/24 ... [IO] line 84, ((roundIndex + 1) * blocksPerRound) ... proven
10/24 ... [IO] line 84, (roundIndex + 1) ... proven
11/24 ... [IO] line 91, (subpotsCount + 1) ... proven
12/24 ... [IO] line 92, (subpotsCount + 1) ... unproven
13/24 ... [IO] line 148, (msg.value - (msg.value % ticketPrice)) ... proven
14/24 ... [IO] line 154, (msg.value - value) ... proven
15/24 ... [IO] line 159, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
16/24 ... [IO] line 160, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
17/24 ... [IO] line 163, (rounds[roundIndex].buyers.length + 1) ... proven
18/24 ... [IO] line 167, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... proven
19/24 ... [IO] line 168, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... proven
20/24 ... [IO] line 169, (rounds[roundIndex].ticketsCount + ticketsCount) ... unproven
21/24 ... [IO] line 172, (rounds[roundIndex].pot + value) ... proven
22/24 ... [IO] line 173, (rounds[roundIndex].pot + value) ... proven
23/24 ... [ETH_LEAK] line 121, winner.send(subpot); ... unproven
24/24 ... [ETH_LEAK] line 154, msg.sender.send((msg.value - value)); ... unproven
took 6.230322s

Generating VCs ... took 0.06758s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 44 Total elapsed : 123.926347
[
0 -> ((((((blockReward__@39 >= blocksPerRound__@33) /\ (blockReward__@39 >= ticketPrice__@36)) /\ (ticketPrice__@36 >= blocksPerRound__@33)) /\ (blockReward__@39 == 5000000000000000000)) /\ (blocksPerRound__@33 == 6800)) /\ (ticketPrice__@36 == 100000000000000000))
47 -> ((((((blockReward__@39 >= blocksPerRound__@33) /\ (blockReward__@39 >= ticketPrice__@36)) /\ (ticketPrice__@36 >= blocksPerRound__@33)) /\ (blockReward__@39 == 5000000000000000000)) /\ (blocksPerRound__@33 == 6800)) /\ (ticketPrice__@36 == 100000000000000000))
]
[
]
1/24 ... [IO] line 3, (a + b) ... proven
2/24 ... [IO] line 4, (a + b) ... proven
3/24 ... [IO] line 72, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
4/24 ... [IO] line 73, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
5/24 ... [IO] line 82, (roundIndex + 1) ... proven
6/24 ... [IO] line 83, ((roundIndex + 1) * blocksPerRound) ... proven
7/24 ... [IO] line 83, (roundIndex + 1) ... proven
8/24 ... [IO] line 84, (((roundIndex + 1) * blocksPerRound) + subpotIndex) ... unproven
9/24 ... [IO] line 84, ((roundIndex + 1) * blocksPerRound) ... proven
10/24 ... [IO] line 84, (roundIndex + 1) ... proven
11/24 ... [IO] line 91, (subpotsCount + 1) ... proven
12/24 ... [IO] line 92, (subpotsCount + 1) ... unproven
13/24 ... [IO] line 148, (msg.value - (msg.value % ticketPrice)) ... proven
14/24 ... [IO] line 154, (msg.value - value) ... proven
15/24 ... [IO] line 159, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
16/24 ... [IO] line 160, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
17/24 ... [IO] line 163, (rounds[roundIndex].buyers.length + 1) ... proven
18/24 ... [IO] line 167, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... proven
19/24 ... [IO] line 168, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... proven
20/24 ... [IO] line 169, (rounds[roundIndex].ticketsCount + ticketsCount) ... unproven
21/24 ... [IO] line 172, (rounds[roundIndex].pot + value) ... proven
22/24 ... [IO] line 173, (rounds[roundIndex].pot + value) ... proven
23/24 ... [ETH_LEAK] line 121, winner.send(subpot); ... unproven
24/24 ... [ETH_LEAK] line 154, msg.sender.send((msg.value - value)); ... unproven
took 10.696065s

Generating VCs ... took 0.0198s
Checking validity of VCs ... 
1/52 ... [NO_EFFECT] line 4, (@pre18 == c) ... unproven
2/52 ... [NO_EFFECT] line 65, (@pre5 == winningTicketIndex) ... unproven
3/52 ... [NO_EFFECT] line 68, (@pre4 == ticketIndex) ... unproven
4/52 ... [NO_EFFECT] line 71, (@pre3 == buyer) ... unproven
5/52 ... [NO_EFFECT] line 73, (@pre2 == ticketIndex) ... unproven
6/52 ... [NO_EFFECT] line 88, (@pre7 == subpotsCount) ... unproven
7/52 ... [NO_EFFECT] line 92, (@pre6 == subpotsCount) ... unproven
8/52 ... [NO_EFFECT] line 148, (@pre17 == value) ... unproven
9/52 ... [NO_EFFECT] line 158, (@pre16 == ticketsCount) ... unproven
10/52 ... [NO_EFFECT] line 160, (@pre15 == rounds[roundIndex].ticketsCount) ... unproven
11/52 ... [NO_EFFECT] line 163, (@pre12 == buyersLength) ... unproven
12/52 ... [NO_EFFECT] line 163, (@pre13 == rounds[roundIndex].buyers.length) ... unproven
13/52 ... [NO_EFFECT] line 163, (@pre14 == Tmp3) ... unproven
14/52 ... [NO_EFFECT] line 164, (@pre11 == rounds[roundIndex].buyers[buyersLength]) ... unproven
15/52 ... [NO_EFFECT] line 168, (@pre10 == rounds[roundIndex].ticketsCountByBuyer[msg.sender]) ... unproven
16/52 ... [NO_EFFECT] line 169, (@pre9 == rounds[roundIndex].ticketsCount) ... unproven
17/52 ... [NO_EFFECT] line 173, (@pre8 == rounds[roundIndex].pot) ... unproven
18/52 ... [ASSIGN_CONST] line 4, (c == 0) ... unproven
19/52 ... [ASSIGN_CONST] line 73, (ticketIndex == 0) ... unproven
20/52 ... [ASSIGN_CONST] line 92, (subpotsCount == 0) ... unproven
21/52 ... [ASSIGN_CONST] line 148, (value == 0) ... unproven
22/52 ... [ASSIGN_CONST] line 160, (rounds[roundIndex].ticketsCount == 0) ... unproven
23/52 ... [ASSIGN_CONST] line 163, (rounds[roundIndex].buyers.length == 0) ... unproven
24/52 ... [ASSIGN_CONST] line 168, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] == 0) ... unproven
25/52 ... [ASSIGN_CONST] line 169, (rounds[roundIndex].ticketsCount == 0) ... unproven
26/52 ... [ASSIGN_CONST] line 173, (rounds[roundIndex].pot == 0) ... unproven
27/52 ... [DEAD] line 3, false ... unproven
28/52 ... [DEAD] line 58, false ... unproven
29/52 ... [DEAD] line 60, false ... unproven
30/52 ... [DEAD] line 64, false ... unproven
31/52 ... [DEAD] line 70, false ... unproven
32/52 ... [DEAD] line 72, false ... unproven
33/52 ... [DEAD] line 75, false ... unproven
34/52 ... [DEAD] line 82, false ... unproven
35/52 ... [DEAD] line 83, false ... unproven
36/52 ... [DEAD] line 90, false ... unproven
37/52 ... [DEAD] line 91, false ... unproven
38/52 ... [DEAD] line 98, false ... unproven
39/52 ... [DEAD] line 103, false ... unproven
40/52 ... [DEAD] line 105, false ... unproven
41/52 ... [DEAD] line 108, false ... unproven
42/52 ... [DEAD] line 110, false ... unproven
43/52 ... [DEAD] line 117, false ... unproven
44/52 ... [DEAD] line 118, false ... unproven
45/52 ... [DEAD] line 146, false ... unproven
46/52 ... [DEAD] line 147, false ... unproven
47/52 ... [DEAD] line 150, false ... unproven
48/52 ... [DEAD] line 152, false ... unproven
49/52 ... [DEAD] line 159, false ... unproven
50/52 ... [DEAD] line 162, false ... unproven
51/52 ... [DEAD] line 167, false ... unproven
52/52 ... [DEAD] line 172, false ... unproven
took 32.149835s


===== Vulnerability Report =====
[1] [IO] line 3, (a + b) : proven
[2] [IO] line 4, (a + b) : proven
[3] [IO] line 72, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) : proven
[4] [IO] line 73, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) : proven
[5] [IO] line 82, (roundIndex + 1) : proven
[6] [IO] line 83, ((roundIndex + 1) * blocksPerRound) : proven
[7] [IO] line 83, (roundIndex + 1) : proven
[8] [IO] line 84, (((roundIndex + 1) * blocksPerRound) + subpotIndex) : unproven
[9] [IO] line 84, ((roundIndex + 1) * blocksPerRound) : proven
[10] [IO] line 84, (roundIndex + 1) : proven
[11] [IO] line 91, (subpotsCount + 1) : proven
[12] [IO] line 92, (subpotsCount + 1) : unproven
[13] [IO] line 148, (msg.value - (msg.value % ticketPrice)) : proven
[14] [IO] line 154, (msg.value - value) : proven
[15] [IO] line 159, (rounds[roundIndex].ticketsCount + ticketsCount) : proven
[16] [IO] line 160, (rounds[roundIndex].ticketsCount + ticketsCount) : proven
[17] [IO] line 163, (rounds[roundIndex].buyers.length + 1) : proven
[18] [IO] line 167, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) : proven
[19] [IO] line 168, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) : proven
[20] [IO] line 169, (rounds[roundIndex].ticketsCount + ticketsCount) : unproven
[21] [IO] line 172, (rounds[roundIndex].pot + value) : proven
[22] [IO] line 173, (rounds[roundIndex].pot + value) : proven
[23] [ETH_LEAK] line 121, winner.send(subpot); : unproven
[24] [ETH_LEAK] line 154, msg.sender.send((msg.value - value)); : unproven

===== Regression Report =====
[1] [NO_EFFECT] line 4, (@pre18 == c) : unproven
[2] [NO_EFFECT] line 65, (@pre5 == winningTicketIndex) : unproven
[3] [NO_EFFECT] line 68, (@pre4 == ticketIndex) : unproven
[4] [NO_EFFECT] line 71, (@pre3 == buyer) : unproven
[5] [NO_EFFECT] line 73, (@pre2 == ticketIndex) : unproven
[6] [NO_EFFECT] line 88, (@pre7 == subpotsCount) : unproven
[7] [NO_EFFECT] line 92, (@pre6 == subpotsCount) : unproven
[8] [NO_EFFECT] line 148, (@pre17 == value) : unproven
[9] [NO_EFFECT] line 158, (@pre16 == ticketsCount) : unproven
[10] [NO_EFFECT] line 160, (@pre15 == rounds[roundIndex].ticketsCount) : unproven
[11] [NO_EFFECT] line 163, (@pre12 == buyersLength) : unproven
[12] [NO_EFFECT] line 163, (@pre13 == rounds[roundIndex].buyers.length) : unproven
[13] [NO_EFFECT] line 163, (@pre14 == Tmp3) : unproven
[14] [NO_EFFECT] line 164, (@pre11 == rounds[roundIndex].buyers[buyersLength]) : unproven
[15] [NO_EFFECT] line 168, (@pre10 == rounds[roundIndex].ticketsCountByBuyer[msg.sender]) : unproven
[16] [NO_EFFECT] line 169, (@pre9 == rounds[roundIndex].ticketsCount) : unproven
[17] [NO_EFFECT] line 173, (@pre8 == rounds[roundIndex].pot) : unproven
[18] [ASSIGN_CONST] line 4, (c == 0) : unproven
[19] [ASSIGN_CONST] line 73, (ticketIndex == 0) : unproven
[20] [ASSIGN_CONST] line 92, (subpotsCount == 0) : unproven
[21] [ASSIGN_CONST] line 148, (value == 0) : unproven
[22] [ASSIGN_CONST] line 160, (rounds[roundIndex].ticketsCount == 0) : unproven
[23] [ASSIGN_CONST] line 163, (rounds[roundIndex].buyers.length == 0) : unproven
[24] [ASSIGN_CONST] line 168, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] == 0) : unproven
[25] [ASSIGN_CONST] line 169, (rounds[roundIndex].ticketsCount == 0) : unproven
[26] [ASSIGN_CONST] line 173, (rounds[roundIndex].pot == 0) : unproven
[27] [DEAD] line 3, false : unproven
[28] [DEAD] line 58, false : unproven
[29] [DEAD] line 60, false : unproven
[30] [DEAD] line 64, false : unproven
[31] [DEAD] line 70, false : unproven
[32] [DEAD] line 72, false : unproven
[33] [DEAD] line 75, false : unproven
[34] [DEAD] line 82, false : unproven
[35] [DEAD] line 83, false : unproven
[36] [DEAD] line 90, false : unproven
[37] [DEAD] line 91, false : unproven
[38] [DEAD] line 98, false : unproven
[39] [DEAD] line 103, false : unproven
[40] [DEAD] line 105, false : unproven
[41] [DEAD] line 108, false : unproven
[42] [DEAD] line 110, false : unproven
[43] [DEAD] line 117, false : unproven
[44] [DEAD] line 118, false : unproven
[45] [DEAD] line 146, false : unproven
[46] [DEAD] line 147, false : unproven
[47] [DEAD] line 150, false : unproven
[48] [DEAD] line 152, false : unproven
[49] [DEAD] line 159, false : unproven
[50] [DEAD] line 162, false : unproven
[51] [DEAD] line 167, false : unproven
[52] [DEAD] line 172, false : unproven

============ Statistics ============
# Iter                    : 45
# Alarm / Query           : 5 / 24
- integer over/underflow  : 3 / 22
- kill-anyone             : 0 / 0
- ether-leaking           : 2 / 2
- reentrancy-leaking      : 0 / 0
- reentrancy              : 0 / 0
- tx.origin               : 0 / 0

Time Elapsed (Real) : 164.221763849
Time Elapsed (CPU)  : 164.27782
