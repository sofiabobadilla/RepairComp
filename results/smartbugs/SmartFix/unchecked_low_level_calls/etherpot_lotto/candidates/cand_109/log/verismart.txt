[CHECKER] Integer Over/Underflows
[CHECKER] Suicidal
[CHECKER] Re-Entrancy
[CHECKER] Improper use of Tx.origin
[CHECKER] Ether-Leaking

[INFO] all funcs : 21
[INFO] reachable : 18
[INFO] Generating Paths ... took 0.002249s
[INFO] # path : 104

[INFO] Violate CEI: false
[INFO] msg.sender = this possible: false
[INFO] Performing Interval Analysis ... took 0.010346s
Generating VCs ... took 0.051822s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 1 Total elapsed : 0.18103
[
0 -> true
47 -> true
]
[
]
1/21 ... [IO] line 3, (a + b) ... proven
2/21 ... [IO] line 4, (a + b) ... proven
3/21 ... [IO] line 72, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
4/21 ... [IO] line 73, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
5/21 ... [IO] line 82, ((roundIndex + 1) * blocksPerRound) ... proven
6/21 ... [IO] line 82, (roundIndex + 1) ... proven
7/21 ... [IO] line 83, (((roundIndex + 1) * blocksPerRound) + subpotIndex) ... unproven
8/21 ... [IO] line 83, ((roundIndex + 1) * blocksPerRound) ... proven
9/21 ... [IO] line 83, (roundIndex + 1) ... proven
10/21 ... [IO] line 90, (subpotsCount + 1) ... unproven
11/21 ... [IO] line 146, (msg.value - (msg.value % ticketPrice)) ... proven
12/21 ... [IO] line 152, (msg.value - value) ... proven
13/21 ... [IO] line 157, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
14/21 ... [IO] line 158, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
15/21 ... [IO] line 161, (rounds[roundIndex].buyers.length + 1) ... proven
16/21 ... [IO] line 165, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... unproven
17/21 ... [IO] line 166, (rounds[roundIndex].ticketsCount + ticketsCount) ... unproven
18/21 ... [IO] line 169, (rounds[roundIndex].pot + value) ... proven
19/21 ... [IO] line 170, (rounds[roundIndex].pot + value) ... proven
20/21 ... [ETH_LEAK] line 119, winner.send(subpot); ... unproven
21/21 ... [ETH_LEAK] line 152, msg.sender.send((msg.value - value)); ... unproven
took 82.124871s

Generating VCs ... took 0.05093s
Checking validity of VCs ... took 0.067096s

Generating VCs ... took 0.049924s
Checking validity of VCs ... took 0.031643s

Generating VCs ... took 0.050375s
Checking validity of VCs ... took 0.05373s

Generating VCs ... took 0.052103s
Checking validity of VCs ... took 0.043725s

Generating VCs ... took 0.053405s
Checking validity of VCs ... took 0.065437s

Generating VCs ... took 0.051862s
Checking validity of VCs ... took 0.054204s

Generating VCs ... took 0.053847s
Checking validity of VCs ... took 0.045383s

Generating VCs ... took 0.051471s
Checking validity of VCs ... took 0.067331s

Iter : 10 To explore : 254 Explored : 263 Total elapsed : 83.174758
Generating VCs ... took 0.051285s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 10 Total elapsed : 83.262648
[
0 -> (blocksPerRound__@33 == 6800)
47 -> (blocksPerRound__@33 == 6800)
]
[
]
1/21 ... [IO] line 3, (a + b) ... proven
2/21 ... [IO] line 4, (a + b) ... proven
3/21 ... [IO] line 72, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
4/21 ... [IO] line 73, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
5/21 ... [IO] line 82, ((roundIndex + 1) * blocksPerRound) ... proven
6/21 ... [IO] line 82, (roundIndex + 1) ... proven
7/21 ... [IO] line 83, (((roundIndex + 1) * blocksPerRound) + subpotIndex) ... unproven
8/21 ... [IO] line 83, ((roundIndex + 1) * blocksPerRound) ... proven
9/21 ... [IO] line 83, (roundIndex + 1) ... proven
10/21 ... [IO] line 90, (subpotsCount + 1) ... unproven
11/21 ... [IO] line 146, (msg.value - (msg.value % ticketPrice)) ... proven
12/21 ... [IO] line 152, (msg.value - value) ... proven
13/21 ... [IO] line 157, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
14/21 ... [IO] line 158, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
15/21 ... [IO] line 161, (rounds[roundIndex].buyers.length + 1) ... proven
16/21 ... [IO] line 165, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... unproven
17/21 ... [IO] line 166, (rounds[roundIndex].ticketsCount + ticketsCount) ... unproven
18/21 ... [IO] line 169, (rounds[roundIndex].pot + value) ... proven
19/21 ... [IO] line 170, (rounds[roundIndex].pot + value) ... proven
20/21 ... [ETH_LEAK] line 119, winner.send(subpot); ... unproven
21/21 ... [ETH_LEAK] line 152, msg.sender.send((msg.value - value)); ... unproven
took 4.807447s

Generating VCs ... took 0.051532s
Checking validity of VCs ... took 1.435973s

Generating VCs ... took 0.056797s
Checking validity of VCs ... took 1.496794s

Generating VCs ... took 0.051022s
Checking validity of VCs ... took 1.469148s

Generating VCs ... took 0.051288s
Checking validity of VCs ... took 1.482372s

Generating VCs ... took 0.057352s
Checking validity of VCs ... took 1.419776s

Generating VCs ... took 0.051127s
Checking validity of VCs ... took 1.462747s

Generating VCs ... took 0.051483s
Checking validity of VCs ... took 1.472515s

Generating VCs ... took 0.053928s
Checking validity of VCs ... took 1.435432s

Generating VCs ... took 0.051044s
Checking validity of VCs ... took 1.536046s

Iter : 20 To explore : 155 Explored : 422 Total elapsed : 101.812875
Generating VCs ... took 0.052854s
Checking validity of VCs ... took 1.537242s

Generating VCs ... took 0.051441s
Checking validity of VCs ... took 1.522338s

Generating VCs ... took 0.051125s
Checking validity of VCs ... took 1.445236s

Generating VCs ... took 0.050641s
Checking validity of VCs ... took 1.559272s

Generating VCs ... took 0.051258s
Checking validity of VCs ... took 1.466176s

Generating VCs ... took 0.056462s
Checking validity of VCs ... took 1.480479s

Generating VCs ... took 0.051517s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 26 Total elapsed : 112.649491
[
0 -> ((blockReward__@39 == 5000000000000000000) /\ (blocksPerRound__@33 == 6800))
47 -> ((blockReward__@39 == 5000000000000000000) /\ (blocksPerRound__@33 == 6800))
]
[
]
1/21 ... [IO] line 3, (a + b) ... proven
2/21 ... [IO] line 4, (a + b) ... proven
3/21 ... [IO] line 72, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
4/21 ... [IO] line 73, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
5/21 ... [IO] line 82, ((roundIndex + 1) * blocksPerRound) ... proven
6/21 ... [IO] line 82, (roundIndex + 1) ... proven
7/21 ... [IO] line 83, (((roundIndex + 1) * blocksPerRound) + subpotIndex) ... unproven
8/21 ... [IO] line 83, ((roundIndex + 1) * blocksPerRound) ... proven
9/21 ... [IO] line 83, (roundIndex + 1) ... proven
10/21 ... [IO] line 90, (subpotsCount + 1) ... unproven
11/21 ... [IO] line 146, (msg.value - (msg.value % ticketPrice)) ... proven
12/21 ... [IO] line 152, (msg.value - value) ... proven
13/21 ... [IO] line 157, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
14/21 ... [IO] line 158, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
15/21 ... [IO] line 161, (rounds[roundIndex].buyers.length + 1) ... proven
16/21 ... [IO] line 165, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... unproven
17/21 ... [IO] line 166, (rounds[roundIndex].ticketsCount + ticketsCount) ... unproven
18/21 ... [IO] line 169, (rounds[roundIndex].pot + value) ... proven
19/21 ... [IO] line 170, (rounds[roundIndex].pot + value) ... proven
20/21 ... [ETH_LEAK] line 119, winner.send(subpot); ... unproven
21/21 ... [ETH_LEAK] line 152, msg.sender.send((msg.value - value)); ... unproven
took 8.729845s

Generating VCs ... took 0.055515s
Checking validity of VCs ... took 1.707615s

Generating VCs ... took 0.057987s
Checking validity of VCs ... took 1.674921s

Generating VCs ... took 0.05248s
Checking validity of VCs ... took 1.692476s

Iter : 30 To explore : 82 Explored : 622 Total elapsed : 125.262427
Generating VCs ... took 0.05508s
Checking validity of VCs ... took 1.694391s

Generating VCs ... took 0.051036s
Checking validity of VCs ... took 1.742635s

Generating VCs ... took 0.05171s
Checking validity of VCs ... took 1.664229s

Generating VCs ... took 0.051233s
Checking validity of VCs ... took 1.683886s

Generating VCs ... took 0.052338s
Checking validity of VCs ... took 1.620516s

Generating VCs ... took 0.05614s
Checking validity of VCs ... took 1.59845s

Generating VCs ... took 0.050138s
Checking validity of VCs ... took 1.639398s

Generating VCs ... took 0.051524s
Checking validity of VCs ... took 1.644632s

Generating VCs ... took 0.050795s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 38 Total elapsed : 140.695911
[
0 -> (((blockReward__@39 == 5000000000000000000) /\ (blocksPerRound__@33 == 6800)) /\ (ticketPrice__@36 == 100000000000000000))
47 -> (((blockReward__@39 == 5000000000000000000) /\ (blocksPerRound__@33 == 6800)) /\ (ticketPrice__@36 == 100000000000000000))
]
[
]
1/21 ... [IO] line 3, (a + b) ... proven
2/21 ... [IO] line 4, (a + b) ... proven
3/21 ... [IO] line 72, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
4/21 ... [IO] line 73, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) ... proven
5/21 ... [IO] line 82, ((roundIndex + 1) * blocksPerRound) ... proven
6/21 ... [IO] line 82, (roundIndex + 1) ... proven
7/21 ... [IO] line 83, (((roundIndex + 1) * blocksPerRound) + subpotIndex) ... unproven
8/21 ... [IO] line 83, ((roundIndex + 1) * blocksPerRound) ... proven
9/21 ... [IO] line 83, (roundIndex + 1) ... proven
10/21 ... [IO] line 90, (subpotsCount + 1) ... unproven
11/21 ... [IO] line 146, (msg.value - (msg.value % ticketPrice)) ... proven
12/21 ... [IO] line 152, (msg.value - value) ... proven
13/21 ... [IO] line 157, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
14/21 ... [IO] line 158, (rounds[roundIndex].ticketsCount + ticketsCount) ... proven
15/21 ... [IO] line 161, (rounds[roundIndex].buyers.length + 1) ... proven
16/21 ... [IO] line 165, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) ... unproven
17/21 ... [IO] line 166, (rounds[roundIndex].ticketsCount + ticketsCount) ... unproven
18/21 ... [IO] line 169, (rounds[roundIndex].pot + value) ... proven
19/21 ... [IO] line 170, (rounds[roundIndex].pot + value) ... proven
20/21 ... [ETH_LEAK] line 119, winner.send(subpot); ... unproven
21/21 ... [ETH_LEAK] line 152, msg.sender.send((msg.value - value)); ... unproven
took 10.911019s

Generating VCs ... took 0.050946s
Checking validity of VCs ... took 1.78343s

Generating VCs ... took 0.019621s
Checking validity of VCs ... 
1/49 ... [NO_EFFECT] line 4, (@pre18 == c) ... unproven
2/49 ... [NO_EFFECT] line 65, (@pre5 == winningTicketIndex) ... unproven
3/49 ... [NO_EFFECT] line 68, (@pre4 == ticketIndex) ... unproven
4/49 ... [NO_EFFECT] line 71, (@pre3 == buyer) ... unproven
5/49 ... [NO_EFFECT] line 73, (@pre2 == ticketIndex) ... unproven
6/49 ... [NO_EFFECT] line 87, (@pre7 == subpotsCount) ... unproven
7/49 ... [NO_EFFECT] line 90, (@pre6 == subpotsCount) ... unproven
8/49 ... [NO_EFFECT] line 146, (@pre17 == value) ... unproven
9/49 ... [NO_EFFECT] line 156, (@pre16 == ticketsCount) ... unproven
10/49 ... [NO_EFFECT] line 158, (@pre15 == rounds[roundIndex].ticketsCount) ... unproven
11/49 ... [NO_EFFECT] line 161, (@pre12 == buyersLength) ... unproven
12/49 ... [NO_EFFECT] line 161, (@pre13 == rounds[roundIndex].buyers.length) ... unproven
13/49 ... [NO_EFFECT] line 161, (@pre14 == Tmp3) ... unproven
14/49 ... [NO_EFFECT] line 162, (@pre11 == rounds[roundIndex].buyers[buyersLength]) ... unproven
15/49 ... [NO_EFFECT] line 165, (@pre10 == rounds[roundIndex].ticketsCountByBuyer[msg.sender]) ... unproven
16/49 ... [NO_EFFECT] line 166, (@pre9 == rounds[roundIndex].ticketsCount) ... unproven
17/49 ... [NO_EFFECT] line 170, (@pre8 == rounds[roundIndex].pot) ... unproven
18/49 ... [ASSIGN_CONST] line 4, (c == 0) ... unproven
19/49 ... [ASSIGN_CONST] line 73, (ticketIndex == 0) ... unproven
20/49 ... [ASSIGN_CONST] line 90, (subpotsCount == 0) ... unproven
21/49 ... [ASSIGN_CONST] line 146, (value == 0) ... unproven
22/49 ... [ASSIGN_CONST] line 158, (rounds[roundIndex].ticketsCount == 0) ... unproven
23/49 ... [ASSIGN_CONST] line 161, (rounds[roundIndex].buyers.length == 0) ... unproven
24/49 ... [ASSIGN_CONST] line 165, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] == 0) ... unproven
25/49 ... [ASSIGN_CONST] line 166, (rounds[roundIndex].ticketsCount == 0) ... unproven
26/49 ... [ASSIGN_CONST] line 170, (rounds[roundIndex].pot == 0) ... unproven
27/49 ... [DEAD] line 3, false ... unproven
28/49 ... [DEAD] line 58, false ... unproven
29/49 ... [DEAD] line 60, false ... unproven
30/49 ... [DEAD] line 64, false ... unproven
31/49 ... [DEAD] line 70, false ... unproven
32/49 ... [DEAD] line 72, false ... unproven
33/49 ... [DEAD] line 75, false ... unproven
34/49 ... [DEAD] line 82, false ... unproven
35/49 ... [DEAD] line 89, false ... unproven
36/49 ... [DEAD] line 96, false ... unproven
37/49 ... [DEAD] line 101, false ... unproven
38/49 ... [DEAD] line 103, false ... unproven
39/49 ... [DEAD] line 106, false ... unproven
40/49 ... [DEAD] line 108, false ... unproven
41/49 ... [DEAD] line 115, false ... unproven
42/49 ... [DEAD] line 116, false ... unproven
43/49 ... [DEAD] line 144, false ... unproven
44/49 ... [DEAD] line 145, false ... unproven
45/49 ... [DEAD] line 148, false ... unproven
46/49 ... [DEAD] line 150, false ... unproven
47/49 ... [DEAD] line 157, false ... unproven
48/49 ... [DEAD] line 160, false ... unproven
49/49 ... [DEAD] line 169, false ... unproven
took 22.662917s


===== Vulnerability Report =====
[1] [IO] line 3, (a + b) : proven
[2] [IO] line 4, (a + b) : proven
[3] [IO] line 72, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) : proven
[4] [IO] line 73, (ticketIndex + rounds[roundIndex].ticketsCountByBuyer[buyer]) : proven
[5] [IO] line 82, ((roundIndex + 1) * blocksPerRound) : proven
[6] [IO] line 82, (roundIndex + 1) : proven
[7] [IO] line 83, (((roundIndex + 1) * blocksPerRound) + subpotIndex) : unproven
[8] [IO] line 83, ((roundIndex + 1) * blocksPerRound) : proven
[9] [IO] line 83, (roundIndex + 1) : proven
[10] [IO] line 90, (subpotsCount + 1) : unproven
[11] [IO] line 146, (msg.value - (msg.value % ticketPrice)) : proven
[12] [IO] line 152, (msg.value - value) : proven
[13] [IO] line 157, (rounds[roundIndex].ticketsCount + ticketsCount) : proven
[14] [IO] line 158, (rounds[roundIndex].ticketsCount + ticketsCount) : proven
[15] [IO] line 161, (rounds[roundIndex].buyers.length + 1) : proven
[16] [IO] line 165, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] + ticketsCount) : unproven
[17] [IO] line 166, (rounds[roundIndex].ticketsCount + ticketsCount) : unproven
[18] [IO] line 169, (rounds[roundIndex].pot + value) : proven
[19] [IO] line 170, (rounds[roundIndex].pot + value) : proven
[20] [ETH_LEAK] line 119, winner.send(subpot); : unproven
[21] [ETH_LEAK] line 152, msg.sender.send((msg.value - value)); : unproven

===== Regression Report =====
[1] [NO_EFFECT] line 4, (@pre18 == c) : unproven
[2] [NO_EFFECT] line 65, (@pre5 == winningTicketIndex) : unproven
[3] [NO_EFFECT] line 68, (@pre4 == ticketIndex) : unproven
[4] [NO_EFFECT] line 71, (@pre3 == buyer) : unproven
[5] [NO_EFFECT] line 73, (@pre2 == ticketIndex) : unproven
[6] [NO_EFFECT] line 87, (@pre7 == subpotsCount) : unproven
[7] [NO_EFFECT] line 90, (@pre6 == subpotsCount) : unproven
[8] [NO_EFFECT] line 146, (@pre17 == value) : unproven
[9] [NO_EFFECT] line 156, (@pre16 == ticketsCount) : unproven
[10] [NO_EFFECT] line 158, (@pre15 == rounds[roundIndex].ticketsCount) : unproven
[11] [NO_EFFECT] line 161, (@pre12 == buyersLength) : unproven
[12] [NO_EFFECT] line 161, (@pre13 == rounds[roundIndex].buyers.length) : unproven
[13] [NO_EFFECT] line 161, (@pre14 == Tmp3) : unproven
[14] [NO_EFFECT] line 162, (@pre11 == rounds[roundIndex].buyers[buyersLength]) : unproven
[15] [NO_EFFECT] line 165, (@pre10 == rounds[roundIndex].ticketsCountByBuyer[msg.sender]) : unproven
[16] [NO_EFFECT] line 166, (@pre9 == rounds[roundIndex].ticketsCount) : unproven
[17] [NO_EFFECT] line 170, (@pre8 == rounds[roundIndex].pot) : unproven
[18] [ASSIGN_CONST] line 4, (c == 0) : unproven
[19] [ASSIGN_CONST] line 73, (ticketIndex == 0) : unproven
[20] [ASSIGN_CONST] line 90, (subpotsCount == 0) : unproven
[21] [ASSIGN_CONST] line 146, (value == 0) : unproven
[22] [ASSIGN_CONST] line 158, (rounds[roundIndex].ticketsCount == 0) : unproven
[23] [ASSIGN_CONST] line 161, (rounds[roundIndex].buyers.length == 0) : unproven
[24] [ASSIGN_CONST] line 165, (rounds[roundIndex].ticketsCountByBuyer[msg.sender] == 0) : unproven
[25] [ASSIGN_CONST] line 166, (rounds[roundIndex].ticketsCount == 0) : unproven
[26] [ASSIGN_CONST] line 170, (rounds[roundIndex].pot == 0) : unproven
[27] [DEAD] line 3, false : unproven
[28] [DEAD] line 58, false : unproven
[29] [DEAD] line 60, false : unproven
[30] [DEAD] line 64, false : unproven
[31] [DEAD] line 70, false : unproven
[32] [DEAD] line 72, false : unproven
[33] [DEAD] line 75, false : unproven
[34] [DEAD] line 82, false : unproven
[35] [DEAD] line 89, false : unproven
[36] [DEAD] line 96, false : unproven
[37] [DEAD] line 101, false : unproven
[38] [DEAD] line 103, false : unproven
[39] [DEAD] line 106, false : unproven
[40] [DEAD] line 108, false : unproven
[41] [DEAD] line 115, false : unproven
[42] [DEAD] line 116, false : unproven
[43] [DEAD] line 144, false : unproven
[44] [DEAD] line 145, false : unproven
[45] [DEAD] line 148, false : unproven
[46] [DEAD] line 150, false : unproven
[47] [DEAD] line 157, false : unproven
[48] [DEAD] line 160, false : unproven
[49] [DEAD] line 169, false : unproven

============ Statistics ============
# Iter                    : 39
# Alarm / Query           : 6 / 21
- integer over/underflow  : 4 / 19
- kill-anyone             : 0 / 0
- ether-leaking           : 2 / 2
- reentrancy-leaking      : 0 / 0
- reentrancy              : 0 / 0
- tx.origin               : 0 / 0

Time Elapsed (Real) : 174.482698917
Time Elapsed (CPU)  : 174.531014
