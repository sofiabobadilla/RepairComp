{
  "src": [ "0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol" ],
  "knowledge": [
    {
      "abs_patch": [
        "Abs_Insert ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0 @ {uint256[]})"
      ],
      "score": 0.08333333333333333
    },
    {
      "abs_patch": [
        "Abs_Insert ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0 @ {uint256[]})",
        "Abs_AddModifier ({address}, {}, 1, 0, 0, 0 @ {}, {address}, 0, 0, 0, 0)"
      ],
      "score": 0.0
    },
    {
      "abs_patch": [
        "Abs_Insert ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0 @ {uint256[]})",
        "Abs_AddModifier ({address}, {}, 1, 0, 0, 0 @ {}, {address}, 0, 0, 0, 0)",
        "Abs_AddModifier ({address}, {address,mapping(address => bool)}, 1, 1, 0, 0 @ {}, {address}, 0, 0, 0, 0)"
      ],
      "score": 0.5833333333333334
    },
    {
      "abs_patch": [
        "Abs_Insert ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0 @ {uint256[]})",
        "Abs_AtomLst [\nAbs_NR ({address}, {}, 1, 0, 0, 0)\nAbs_NR ({uint256}, {address}, 1, 0, 0, 0)\nAbs_NR ({mapping(address => bool)}, {}, 1, 0, 0, 0)\nAbs_NR ({address}, {address,mapping(address => bool)}, 1, 1, 0, 0)\nAbs_NR ({}, {address,mapping(address => bool)}, 1, 1, 0, 0)\nAbs_NR ({}, {address,mapping(address => bool)}, 1, 1, 0, 0)\nAbs_NR ({uint256[]}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0)\nAbs_NR ({}, {mapping(address => bool)}, 1, 0, 0, 0)\nAbs_NR ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0)\nAbs_NR ({}, {uint256,mapping(address => bool)}, 1, 0, 0, 0)\nAbs_NR ({}, {address}, 1, 1, 0, 0)\nAbs_NR ({}, {address}, 1, 1, 0, 0)\nAbs_NR ({}, {}, 1, 0, 0, 0)\n]"
      ],
      "score": 0.13416666666666666
    },
    {
      "abs_patch": [ "Abs_Insert ({address}, {}, 0, 0, 0, 0 @ {})" ],
      "score": 0.08333333333333333
    },
    {
      "abs_patch": [
        "Abs_Insert ({address}, {}, 0, 0, 0, 0 @ {})",
        "Abs_Insert ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0 @ {uint256[]})"
      ],
      "score": 0.16666666666666666
    },
    {
      "abs_patch": [
        "Abs_Insert ({address}, {}, 0, 0, 0, 0 @ {})",
        "Abs_Insert ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0 @ {uint256[]})",
        "Abs_AddModifier ({}, {address}, 1, 1, 0, 0 @ {}, {address}, 0, 0, 0, 0)"
      ],
      "score": 0.08333333333333333
    },
    {
      "abs_patch": [
        "Abs_Insert ({address}, {}, 0, 0, 0, 0 @ {})",
        "Abs_Insert ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0 @ {uint256[]})",
        "Abs_AddModifier ({address}, {}, 1, 0, 0, 0 @ {}, {address}, 0, 0, 0, 0)"
      ],
      "score": 0.08333333333333333
    },
    {
      "abs_patch": [
        "Abs_Insert ({address}, {}, 0, 0, 0, 0 @ {})",
        "Abs_Insert ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0 @ {uint256[]})",
        "Abs_AddModifier ({address}, {address,mapping(address => bool)}, 1, 1, 0, 0 @ {}, {address}, 0, 0, 0, 0)"
      ],
      "score": 0.08333333333333333
    },
    {
      "abs_patch": [
        "Abs_Insert ({address}, {}, 0, 0, 0, 0 @ {})",
        "Abs_Insert ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0 @ {uint256[]})",
        "Abs_AddModifier ({address}, {address,mapping(address => bool)}, 1, 1, 0, 0 @ {}, {address}, 0, 0, 0, 0)",
        "Abs_AddModifier ({address}, {}, 1, 0, 0, 0 @ {}, {address}, 0, 0, 0, 0)"
      ],
      "score": 0.6666666666666666
    },
    {
      "abs_patch": [
        "Abs_Insert ({address}, {}, 0, 0, 0, 0 @ {})",
        "Abs_Insert ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0 @ {uint256[]})",
        "Abs_AtomLst [\nAbs_NR ({}, {address}, 1, 1, 0, 0)\nAbs_NR ({address}, {}, 1, 0, 0, 0)\nAbs_NR ({mapping(address => bool)}, {}, 1, 0, 0, 0)\nAbs_NR ({}, {address,mapping(address => bool)}, 1, 1, 0, 0)\nAbs_NR ({}, {address,mapping(address => bool)}, 1, 1, 0, 0)\nAbs_NR ({uint256[]}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0)\nAbs_NR ({}, {mapping(address => bool)}, 1, 0, 0, 0)\nAbs_NR ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0)\nAbs_NR ({}, {uint256,mapping(address => bool)}, 1, 0, 0, 0)\nAbs_NR ({}, {}, 1, 0, 0, 0)\n]"
      ],
      "score": 0.05833333333333335
    },
    {
      "abs_patch": [
        "Abs_Insert ({address}, {}, 0, 0, 0, 0 @ {})",
        "Abs_Insert ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0 @ {uint256[]})",
        "Abs_AtomLst [\nAbs_NR ({address}, {}, 1, 0, 0, 0)\nAbs_NR ({uint256}, {address}, 1, 0, 0, 0)\nAbs_NR ({mapping(address => bool)}, {}, 1, 0, 0, 0)\nAbs_NR ({address}, {address,mapping(address => bool)}, 1, 1, 0, 0)\nAbs_NR ({}, {address,mapping(address => bool)}, 1, 1, 0, 0)\nAbs_NR ({}, {address,mapping(address => bool)}, 1, 1, 0, 0)\nAbs_NR ({uint256[]}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0)\nAbs_NR ({}, {mapping(address => bool)}, 1, 0, 0, 0)\nAbs_NR ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0)\nAbs_NR ({}, {uint256,mapping(address => bool)}, 1, 0, 0, 0)\nAbs_NR ({}, {address}, 1, 1, 0, 0)\nAbs_NR ({}, {address}, 1, 1, 0, 0)\nAbs_NR ({}, {}, 1, 0, 0, 0)\n]"
      ],
      "score": 0.2175
    },
    {
      "abs_patch": [
        "Abs_Insert ({address}, {}, 0, 0, 0, 0 @ {})",
        "Abs_AtomLst [\nAbs_NR ({address}, {}, 1, 0, 0, 0)\nAbs_NR ({uint256}, {address}, 1, 0, 0, 0)\nAbs_NR ({mapping(address => bool)}, {}, 1, 0, 0, 0)\nAbs_NR ({address}, {address,mapping(address => bool)}, 1, 1, 0, 0)\nAbs_NR ({}, {address,mapping(address => bool)}, 1, 1, 0, 0)\nAbs_NR ({}, {address,mapping(address => bool)}, 1, 1, 0, 0)\nAbs_NR ({uint256[]}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0)\nAbs_NR ({}, {mapping(address => bool)}, 1, 0, 0, 0)\nAbs_NR ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0)\nAbs_NR ({}, {uint256,mapping(address => bool)}, 1, 0, 0, 0)\nAbs_NR ({}, {address}, 1, 1, 0, 0)\nAbs_NR ({}, {address}, 1, 1, 0, 0)\nAbs_NR ({}, {}, 1, 0, 0, 0)\n]"
      ],
      "score": 0.13416666666666666
    },
    {
      "abs_patch": [
        "Abs_AddModifier ({}, {address}, 1, 1, 0, 0 @ {}, {address}, 0, 0, 0, 0)"
      ],
      "score": -0.08333333333333333
    },
    {
      "abs_patch": [
        "Abs_AddModifier ({}, {address}, 1, 1, 0, 0 @ {}, {address}, 0, 0, 0, 0)",
        "Abs_Insert ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0 @ {uint256[]})"
      ],
      "score": 0.0
    },
    {
      "abs_patch": [
        "Abs_AddModifier ({address}, {}, 1, 0, 0, 0 @ {}, {address}, 0, 0, 0, 0)"
      ],
      "score": -2.0
    },
    {
      "abs_patch": [
        "Abs_AddModifier ({address}, {}, 1, 0, 0, 0 @ {}, {address}, 0, 0, 0, 0)"
      ],
      "score": -0.08333333333333333
    },
    {
      "abs_patch": [
        "Abs_AddModifier ({address}, {address,mapping(address => bool)}, 1, 1, 0, 0 @ {}, {address}, 0, 0, 0, 0)"
      ],
      "score": -2.0
    },
    {
      "abs_patch": [
        "Abs_AddModifier ({address}, {address,mapping(address => bool)}, 1, 1, 0, 0 @ {}, {address}, 0, 0, 0, 0)"
      ],
      "score": -0.08333333333333333
    },
    {
      "abs_patch": [
        "Abs_AddModifier ({address}, {address,mapping(address => bool)}, 1, 1, 0, 0 @ {}, {address}, 0, 0, 0, 0)",
        "Abs_AddModifier ({address}, {}, 1, 0, 0, 0 @ {}, {address}, 0, 0, 0, 0)"
      ],
      "score": 0.5
    },
    {
      "abs_patch": [
        "Abs_AddModifier ({address}, {address,mapping(address => bool)}, 1, 1, 0, 0 @ {}, {address}, 0, 0, 0, 0)",
        "Abs_AddModifier ({address}, {}, 1, 0, 0, 0 @ {}, {address}, 0, 0, 0, 0)",
        "Abs_Insert ({address}, {}, 0, 0, 0, 0 @ {})"
      ],
      "score": 0.5833333333333334
    },
    {
      "abs_patch": [
        "Abs_AddModifier ({address}, {address,mapping(address => bool)}, 1, 1, 0, 0 @ {}, {address}, 0, 0, 0, 0)",
        "Abs_AddModifier ({address}, {}, 1, 0, 0, 0 @ {}, {address}, 0, 0, 0, 0)",
        "Abs_AddModifier ({}, {address}, 1, 1, 0, 0 @ {}, {address}, 0, 0, 0, 0)"
      ],
      "score": 0.4166666666666667
    },
    {
      "abs_patch": [
        "Abs_ChangeToCnstr ({address}, {address,mapping(address => bool)}, 1, 1, 0, 0)"
      ],
      "score": -2.3
    },
    {
      "abs_patch": [
        "Abs_AtomLst [\nAbs_NR ({}, {address}, 1, 1, 0, 0)\nAbs_NR ({address}, {}, 1, 0, 0, 0)\nAbs_NR ({mapping(address => bool)}, {}, 1, 0, 0, 0)\nAbs_NR ({}, {address,mapping(address => bool)}, 1, 1, 0, 0)\nAbs_NR ({}, {address,mapping(address => bool)}, 1, 1, 0, 0)\nAbs_NR ({uint256[]}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0)\nAbs_NR ({}, {mapping(address => bool)}, 1, 0, 0, 0)\nAbs_NR ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0)\nAbs_NR ({}, {uint256,mapping(address => bool)}, 1, 0, 0, 0)\nAbs_NR ({}, {}, 1, 0, 0, 0)\n]"
      ],
      "score": -0.10833333333333334
    },
    {
      "abs_patch": [
        "Abs_AtomLst [\nAbs_NR ({address}, {}, 1, 0, 0, 0)\nAbs_NR ({uint256}, {address}, 1, 0, 0, 0)\nAbs_NR ({mapping(address => bool)}, {}, 1, 0, 0, 0)\nAbs_NR ({address}, {address,mapping(address => bool)}, 1, 1, 0, 0)\nAbs_NR ({}, {address,mapping(address => bool)}, 1, 1, 0, 0)\nAbs_NR ({}, {address,mapping(address => bool)}, 1, 1, 0, 0)\nAbs_NR ({uint256[]}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0)\nAbs_NR ({}, {mapping(address => bool)}, 1, 0, 0, 0)\nAbs_NR ({}, {mapping(address => bool),uint256[]}, 1, 0, 0, 0)\nAbs_NR ({}, {uint256,mapping(address => bool)}, 1, 0, 0, 0)\nAbs_NR ({}, {address}, 1, 1, 0, 0)\nAbs_NR ({}, {address}, 1, 1, 0, 0)\nAbs_NR ({}, {}, 1, 0, 0, 0)\n]"
      ],
      "score": 0.05083333333333332
    }
  ]
}