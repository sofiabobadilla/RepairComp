[INFO] compiled with solc ver. 0.4.25
[INFO] all funcs : 116
[INFO] reachable : 57

[INFO] Violate CEI: false
[INFO] msg.sender = this possible: false
[STEP] Run analyzer
[STEP] Collect fix targets
    (IO, (SmartBillions/addHashes/[uint256]), 675, (n + _sadd)),
    (IO, (SmartBillions/addHashes/[uint256]), 679, (hashes.length + _sadd)),
    (IO, (SmartBillions/addHashes/[uint256]), 685, (block.number - (block.number % 10))),
    (IO, (SmartBillions/betOf/[address]), 521, (player.blockNum + 256)),
    (IO, (SmartBillions/betPrize/[struct SmartBillions.Bet_uint24]), 493, (uint256(_player.value) * 7000000)),
    (IO, (SmartBillions/betPrize/[struct SmartBillions.Bet_uint24]), 496, (uint256(_player.value) * 20000)),
    (IO, (SmartBillions/betPrize/[struct SmartBillions.Bet_uint24]), 499, (uint256(_player.value) * 500)),
    (IO, (SmartBillions/betPrize/[struct SmartBillions.Bet_uint24]), 502, (uint256(_player.value) * 25)),
    (IO, (SmartBillions/betPrize/[struct SmartBillions.Bet_uint24]), 505, (uint256(_player.value) * 3)),
    (IO, (SmartBillions/calcHashes/[uint32_uint32]), 702, (_lastb + 1)),
    (IO, (SmartBillions/calcHashes/[uint32_uint32]), 704, (_lastb + 2)),
    (IO, (SmartBillions/calcHashes/[uint32_uint32]), 706, (_lastb + 3)),
    (IO, (SmartBillions/calcHashes/[uint32_uint32]), 708, (_lastb + 4)),
    (IO, (SmartBillions/calcHashes/[uint32_uint32]), 710, (_lastb + 5)),
    (IO, (SmartBillions/calcHashes/[uint32_uint32]), 712, (_lastb + 6)),
    (IO, (SmartBillions/calcHashes/[uint32_uint32]), 714, (_lastb + 7)),
    (IO, (SmartBillions/calcHashes/[uint32_uint32]), 716, (_lastb + 8)),
    (IO, (SmartBillions/calcHashes/[uint32_uint32]), 718, (_lastb + 9)),
    (IO, (SmartBillions/coldStore/[uint256]), 318, ((((investBalance * 9) / 10) + walletBalance) + _amount)),
    (IO, (SmartBillions/coldStore/[uint256]), 318, (((investBalance * 9) / 10) + walletBalance)),
    (IO, (SmartBillions/coldStore/[uint256]), 318, (investBalance * 9)),
    (IO, (SmartBillions/coldStore/[uint256]), 320, (coldStoreLast + (((4 * 60) * 24) * 7))),
    (IO, (SmartBillions/commitDividend/[address]), 468, (balances[_who] * 4294967295)),
    (IO, (SmartBillions/commitDividend/[address]), 471, (balance + (share * dividends[last]))),
    (IO, (SmartBillions/commitDividend/[address]), 471, (share * dividends[last])),
    (IO, (SmartBillions/commitDividend/[address]), 474, (walletBalance + balance)),
    (IO, (SmartBillions/commitDividend/[address]), 475, (wallets[_who].balance + uint208(balance))),
    (IO, (SmartBillions/disinvest/[]), 439, (balances[msg.sender] * (10 ** 15))),
    (IO, (SmartBillions/disinvest/[]), 442, (investBalance - initialInvestment)),
    (IO, (SmartBillions/disinvest/[]), 443, (initialInvestment * 9)),
    (IO, (SmartBillions/disinvest/[]), 443, (wallets[msg.sender].balance + uint208(((initialInvestment * 9) / 10)))),
    (IO, (SmartBillions/dividendsBlocks/[]), 254, (block.number - hashFirst)),
    (IO, (SmartBillions/dividendsBlocks/[]), 258, ((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)))),
    (IO, (SmartBillions/dividendsBlocks/[]), 258, (block.number - hashFirst)),
    (IO, (SmartBillions/getHash/[uint256]), 723, (_block - hashFirst)),
    (IO, (SmartBillions/getHash/[uint256]), 728, (_block - hashFirst)),
    (IO, (SmartBillions/getHash/[uint256]), 729, (24 * slotp)),
    (IO, (SmartBillions/houseKeeping/[]), 339, (investStart + (hashesSize * 5))),
    (IO, (SmartBillions/houseKeeping/[]), 344, (block.number - hashFirst)),
    (IO, (SmartBillions/houseKeeping/[]), 345, (dividends.length - 2)),
    (IO, (SmartBillions/houseKeeping/[]), 348, (dividends.length - 1)),
    (IO, (SmartBillions/invest/[address]), 401, (investStart + (hashesSize * 5))),
    (IO, (SmartBillions/invest/[address]), 413, (walletBalance + (investing / 10))),
    (IO, (SmartBillions/invest/[address]), 414, (wallets[owner].balance + uint208((investing / 10)))),
    (IO, (SmartBillions/invest/[address]), 416, (((investing * 5) / 100) * 2)),
    (IO, (SmartBillions/invest/[address]), 416, (investing * 5)),
    (IO, (SmartBillions/invest/[address]), 416, (walletBalance + (((investing * 5) / 100) * 2))),
    (IO, (SmartBillions/invest/[address]), 417, (investing * 5)),
    (IO, (SmartBillions/invest/[address]), 417, (wallets[owner].balance + uint208(((investing * 5) / 100)))),
    (IO, (SmartBillions/invest/[address]), 418, (investing * 5)),
    (IO, (SmartBillions/invest/[address]), 418, (wallets[_partner].balance + uint208(((investing * 5) / 100)))),
    (IO, (SmartBillions/invest/[address]), 421, (investing * 16)),
    (IO, (SmartBillions/invest/[address]), 422, (investing * 10)),
    (IO, (SmartBillions/invest/[address]), 423, (balances[msg.sender] + senderBalance)),
    (IO, (SmartBillions/invest/[address]), 424, (balances[owner] + ownerBalance)),
    (IO, (SmartBillions/invest/[address]), 425, (balances[animator] + animatorBalance)),
    (IO, (SmartBillions/invest/[address]), 426, ((senderBalance + ownerBalance) + animatorBalance)),
    (IO, (SmartBillions/invest/[address]), 426, (senderBalance + ownerBalance)),
    (IO, (SmartBillions/invest/[address]), 426, (totalSupply + ((senderBalance + ownerBalance) + animatorBalance))),
    (IO, (SmartBillions/pay/[uint256]), 379, (walletBalance + keepbalance)),
    (IO, (SmartBillions/pay/[uint256]), 380, (wallets[msg.sender].balance + uint208(keepbalance))),
    (IO, (SmartBillions/pay/[uint256]), 381, (block.number + (((4 * 60) * 24) * 30))),
    (IO, (SmartBillions/payWallet/[]), 364, (walletBalance - balance)),
    (IO, (SmartBillions/playSystem/[uint256_address]), 639, (dividends[dividendPeriod] + (msg.value / 20))),
    (IO, (SmartBillions/playSystem/[uint256_address]), 643, (walletBalance + fee)),
    (IO, (SmartBillions/playSystem/[uint256_address]), 644, (wallets[_partner].balance + uint208(fee))),
    (IO, (SmartBillions/playSystem/[uint256_address]), 646, (block.number + 3)),
    (IO, (SmartBillions/playSystem/[uint256_address]), 647, (block.number + 3)),
    (IO, (SmartBillions/playSystem/[uint256_address]), 652, (hashNext + 1)),
    (IO, (SmartBillions/playSystem/[uint256_address]), 656, (hashBetSum + msg.value)),
    (IO, (SmartBillions/putHash/[]), 737, (lastb + 10)),
    (IO, (SmartBillions/putHash/[]), 749, (num + (num % 10))),
    (IO, (SmartBillions/putHash/[]), 752, (lastb - hashFirst)),
    (IO, (SmartBillions/putHash/[]), 754, (lastb + 10)),
    (IO, (SmartBillions/resetBet/[]), 306, (block.number + 3)),
    (IO, (SmartBillions/won/[]), 558, (player.blockNum + 256)),
    (ETH_LEAK, (SmartBillions/invest/[address]), 407, msg.sender.transfer(msg.value.sub(investing));),
    (ETH_LEAK, (SmartBillions/pay/[uint256]), 372, msg.sender.transfer(_amount);),
    (ETH_LEAK, (SmartBillions/pay/[uint256]), 382, msg.sender.transfer(maxpay);)

[INFO] # of basic patch components : 89
[INFO] extracted components
[
InsertLine (254, assume((block.number >= hashFirst));),
InsertLine (258, assume(((10 * hashesSize) >= ((block.number - hashFirst) % (10 * hashesSize))));),
InsertLine (258, assume((block.number >= hashFirst));),
InsertLine (306, assume(((block.number + 3) >= block.number));),
InsertLine (318, assume((((((investBalance * 9) / 10) + walletBalance) + _amount) >= (((investBalance * 9) / 10) + walletBalance)));),
InsertLine (318, assume(((((investBalance * 9) / 10) + walletBalance) >= ((investBalance * 9) / 10)));),
InsertLine (318, assume(((investBalance == 0) || (((investBalance * 9) / investBalance) == 9)));),
InsertLine (320, assume(((coldStoreLast + (((4 * 60) * 24) * 7)) >= coldStoreLast));),
InsertLine (339, assume(((investStart + (hashesSize * 5)) >= investStart));),
InsertLine (344, assume((block.number >= hashFirst));),
InsertLine (345, assume((dividends.length >= 2));),
InsertLine (348, assume((dividends.length >= 1));),
InsertLine (364, assume((walletBalance >= balance));),
InsertLine (379, assume(((walletBalance + keepbalance) >= walletBalance));),
InsertLine (380, assume(((wallets[msg.sender].balance + uint208(keepbalance)) >= wallets[msg.sender].balance));),
InsertLine (381, assume(((block.number + (((4 * 60) * 24) * 30)) >= block.number));),
InsertLine (401, assume(((investStart + (hashesSize * 5)) >= investStart));),
InsertLine (413, assume(((walletBalance + (investing / 10)) >= walletBalance));),
InsertLine (414, assume(((wallets[owner].balance + uint208((investing / 10))) >= wallets[owner].balance));),
InsertLine (416, assume(((((investing * 5) / 100) == 0) || (((((investing * 5) / 100) * 2) / ((investing * 5) / 100)) == 2)));),
InsertLine (416, assume(((investing == 0) || (((investing * 5) / investing) == 5)));),
InsertLine (416, assume(((walletBalance + (((investing * 5) / 100) * 2)) >= walletBalance));),
InsertLine (417, assume(((investing == 0) || (((investing * 5) / investing) == 5)));),
InsertLine (417, assume(((wallets[owner].balance + uint208(((investing * 5) / 100))) >= wallets[owner].balance));),
InsertLine (418, assume(((investing == 0) || (((investing * 5) / investing) == 5)));),
InsertLine (418, assume(((wallets[_partner].balance + uint208(((investing * 5) / 100))) >= wallets[_partner].balance));),
InsertLine (421, assume(((investing == 0) || (((investing * 16) / investing) == 16)));),
InsertLine (422, assume(((investing == 0) || (((investing * 10) / investing) == 10)));),
InsertLine (423, assume(((balances[msg.sender] + senderBalance) >= balances[msg.sender]));),
InsertLine (424, assume(((balances[owner] + ownerBalance) >= balances[owner]));),
InsertLine (425, assume(((balances[animator] + animatorBalance) >= balances[animator]));),
InsertLine (426, assume((((senderBalance + ownerBalance) + animatorBalance) >= (senderBalance + ownerBalance)));),
InsertLine (426, assume(((senderBalance + ownerBalance) >= senderBalance));),
InsertLine (426, assume(((totalSupply + ((senderBalance + ownerBalance) + animatorBalance)) >= totalSupply));),
InsertLine (439, assume(((balances[msg.sender] == 0) || (((balances[msg.sender] * (10 ** 15)) / balances[msg.sender]) == (10 ** 15))));),
InsertLine (442, assume((investBalance >= initialInvestment));),
InsertLine (443, assume(((initialInvestment == 0) || (((initialInvestment * 9) / initialInvestment) == 9)));),
InsertLine (443, assume(((wallets[msg.sender].balance + uint208(((initialInvestment * 9) / 10))) >= wallets[msg.sender].balance));),
InsertLine (468, assume(((balances[_who] == 0) || (((balances[_who] * 4294967295) / balances[_who]) == 4294967295)));),
InsertLine (471, assume(((balance + (share * dividends[last])) >= balance));),
InsertLine (471, assume(((share == 0) || (((share * dividends[last]) / share) == dividends[last])));),
InsertLine (474, assume(((walletBalance + balance) >= walletBalance));),
InsertLine (475, assume(((wallets[_who].balance + uint208(balance)) >= wallets[_who].balance));),
InsertLine (493, assume(((uint256(_player.value) == 0) || (((uint256(_player.value) * 7000000) / uint256(_player.value)) == 7000000)));),
InsertLine (496, assume(((uint256(_player.value) == 0) || (((uint256(_player.value) * 20000) / uint256(_player.value)) == 20000)));),
InsertLine (499, assume(((uint256(_player.value) == 0) || (((uint256(_player.value) * 500) / uint256(_player.value)) == 500)));),
InsertLine (502, assume(((uint256(_player.value) == 0) || (((uint256(_player.value) * 25) / uint256(_player.value)) == 25)));),
InsertLine (505, assume(((uint256(_player.value) == 0) || (((uint256(_player.value) * 3) / uint256(_player.value)) == 3)));),
InsertLine (521, assume(((player.blockNum + 256) >= player.blockNum));),
InsertLine (558, assume(((player.blockNum + 256) >= player.blockNum));),
InsertLine (639, assume(((dividends[dividendPeriod] + (msg.value / 20)) >= dividends[dividendPeriod]));),
InsertLine (643, assume(((walletBalance + fee) >= walletBalance));),
InsertLine (644, assume(((wallets[_partner].balance + uint208(fee)) >= wallets[_partner].balance));),
InsertLine (646, assume(((block.number + 3) >= block.number));),
InsertLine (647, assume(((block.number + 3) >= block.number));),
InsertLine (652, assume(((hashNext + 1) >= hashNext));),
InsertLine (656, assume(((hashBetSum + msg.value) >= hashBetSum));),
InsertLine (675, assume(((n + _sadd) >= n));),
InsertLine (679, assume(((hashes.length + _sadd) >= hashes.length));),
InsertLine (685, assume((block.number >= (block.number % 10)));),
InsertLine (702, assume(((_lastb + 1) >= _lastb));),
InsertLine (704, assume(((_lastb + 2) >= _lastb));),
InsertLine (706, assume(((_lastb + 3) >= _lastb));),
InsertLine (708, assume(((_lastb + 4) >= _lastb));),
InsertLine (710, assume(((_lastb + 5) >= _lastb));),
InsertLine (712, assume(((_lastb + 6) >= _lastb));),
InsertLine (714, assume(((_lastb + 7) >= _lastb));),
InsertLine (716, assume(((_lastb + 8) >= _lastb));),
InsertLine (718, assume(((_lastb + 9) >= _lastb));),
InsertLine (723, assume((_block >= hashFirst));),
InsertLine (728, assume((_block >= hashFirst));),
InsertLine (729, assume(((24 == 0) || (((24 * slotp) / 24) == slotp)));),
InsertLine (737, assume(((lastb + 10) >= lastb));),
InsertLine (749, assume(((num + (num % 10)) >= num));),
InsertLine (752, assume((lastb >= hashFirst));),
InsertLine (754, assume(((lastb + 10) >= lastb));),
Replace (172, (msg.sender == owner), (msg.sender != owner)),
Replace (177, (msg.sender == animator), (msg.sender != animator)),
Replace (318, (this.balance >= ((((investBalance * 9) / 10) + walletBalance) + _amount)), (this.balance <= ((((investBalance * 9) / 10) + walletBalance) + _amount))),
Replace (320, ((coldStoreLast + (((4 * 60) * 24) * 7)) <= block.number), ((coldStoreLast + (((4 * 60) * 24) * 7)) >= block.number)),
Replace (339, (block.number >= (investStart + (hashesSize * 5))), (block.number <= (investStart + (hashesSize * 5)))),
Replace (401, (block.number < (investStart + (hashesSize * 5))), (block.number > (investStart + (hashesSize * 5)))),
Replace (518, (block.number >= (player.blockNum + (10 * hashesSize))), (block.number <= (player.blockNum + (10 * hashesSize)))),
Replace (521, (block.number < (player.blockNum + 256)), (block.number > (player.blockNum + 256))),
Replace (551, ((player.blockNum + (10 * hashesSize)) <= block.number), ((player.blockNum + (10 * hashesSize)) >= block.number)),
Replace (558, (block.number < (player.blockNum + 256)), (block.number > (player.blockNum + 256))),
Replace (646, (hashNext < (block.number + 3)), (hashNext > (block.number + 3))),
Replace (675, ((n + _sadd) > hashesSize), ((n + _sadd) < hashesSize)),
Replace (737, (block.number <= (lastb + 10)), (block.number > (lastb + 10)))
]
- Regression found, results/bad_randomness/smart_billions/candidates/cand_89/patch.sol
/home/opam/.local/lib/python3.8/site-packages/sklearn/metrics/_regression.py:682: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.
  warnings.warn(msg, UndefinedMetricWarning)
- New best candidate, iter 2, 978.145902872s : results/bad_randomness/smart_billions/candidates/cand_1/patch.sol
[STEP] Enter Repair Loop

========== Statistics ==========
# Iter                    : 5
# Alarm (orginal)         : 79
# Alarm (patch)           : 77
# Alarm wo leak (patch)   : 74
# Edit (min,max)          : 1, 1
# Patch                   : 1
- First solution          : n/a
- First solution (iter)   : n/a
- First solution (time)   : n/a
# Uncompiled candidate    : 54
# Verifier error          : 0

========== Patch info ==========
- 1, Size: 1., Edit: 1, Iter: 2, Time: 978.145902872, results/bad_randomness/smart_billions/candidates/cand_1/patch.sol

========== Uncompiled ==========
results/bad_randomness/smart_billions/candidates/cand_61/patch.sol
results/bad_randomness/smart_billions/candidates/cand_62/patch.sol
results/bad_randomness/smart_billions/candidates/cand_63/patch.sol
results/bad_randomness/smart_billions/candidates/cand_64/patch.sol
results/bad_randomness/smart_billions/candidates/cand_65/patch.sol
results/bad_randomness/smart_billions/candidates/cand_66/patch.sol
results/bad_randomness/smart_billions/candidates/cand_67/patch.sol
results/bad_randomness/smart_billions/candidates/cand_68/patch.sol
results/bad_randomness/smart_billions/candidates/cand_69/patch.sol
results/bad_randomness/smart_billions/candidates/cand_150/patch.sol
results/bad_randomness/smart_billions/candidates/cand_151/patch.sol
results/bad_randomness/smart_billions/candidates/cand_152/patch.sol
results/bad_randomness/smart_billions/candidates/cand_153/patch.sol
results/bad_randomness/smart_billions/candidates/cand_154/patch.sol
results/bad_randomness/smart_billions/candidates/cand_155/patch.sol
results/bad_randomness/smart_billions/candidates/cand_156/patch.sol
results/bad_randomness/smart_billions/candidates/cand_157/patch.sol
results/bad_randomness/smart_billions/candidates/cand_158/patch.sol
results/bad_randomness/smart_billions/candidates/cand_236/patch.sol
results/bad_randomness/smart_billions/candidates/cand_237/patch.sol
results/bad_randomness/smart_billions/candidates/cand_238/patch.sol
results/bad_randomness/smart_billions/candidates/cand_239/patch.sol
results/bad_randomness/smart_billions/candidates/cand_240/patch.sol
results/bad_randomness/smart_billions/candidates/cand_241/patch.sol
results/bad_randomness/smart_billions/candidates/cand_242/patch.sol
results/bad_randomness/smart_billions/candidates/cand_243/patch.sol
results/bad_randomness/smart_billions/candidates/cand_244/patch.sol
results/bad_randomness/smart_billions/candidates/cand_322/patch.sol
results/bad_randomness/smart_billions/candidates/cand_323/patch.sol
results/bad_randomness/smart_billions/candidates/cand_324/patch.sol
results/bad_randomness/smart_billions/candidates/cand_325/patch.sol
results/bad_randomness/smart_billions/candidates/cand_326/patch.sol
results/bad_randomness/smart_billions/candidates/cand_327/patch.sol
results/bad_randomness/smart_billions/candidates/cand_328/patch.sol
results/bad_randomness/smart_billions/candidates/cand_329/patch.sol
results/bad_randomness/smart_billions/candidates/cand_330/patch.sol
results/bad_randomness/smart_billions/candidates/cand_407/patch.sol
results/bad_randomness/smart_billions/candidates/cand_408/patch.sol
results/bad_randomness/smart_billions/candidates/cand_409/patch.sol
results/bad_randomness/smart_billions/candidates/cand_410/patch.sol
results/bad_randomness/smart_billions/candidates/cand_411/patch.sol
results/bad_randomness/smart_billions/candidates/cand_412/patch.sol
results/bad_randomness/smart_billions/candidates/cand_413/patch.sol
results/bad_randomness/smart_billions/candidates/cand_414/patch.sol
results/bad_randomness/smart_billions/candidates/cand_415/patch.sol
results/bad_randomness/smart_billions/candidates/cand_491/patch.sol
results/bad_randomness/smart_billions/candidates/cand_492/patch.sol
results/bad_randomness/smart_billions/candidates/cand_493/patch.sol
results/bad_randomness/smart_billions/candidates/cand_494/patch.sol
results/bad_randomness/smart_billions/candidates/cand_495/patch.sol
results/bad_randomness/smart_billions/candidates/cand_496/patch.sol
results/bad_randomness/smart_billions/candidates/cand_497/patch.sol
results/bad_randomness/smart_billions/candidates/cand_498/patch.sol
results/bad_randomness/smart_billions/candidates/cand_499/patch.sol

Time Elapsed (Real) : 1950.58866692
Time Elapsed (CPU)  : 27.018151
