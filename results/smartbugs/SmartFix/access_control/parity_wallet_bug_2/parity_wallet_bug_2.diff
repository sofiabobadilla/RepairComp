--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/access_control/parity_wallet_bug_2.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SmartFix/access_control/parity_wallet_bug_2/parity_wallet_bug_2.sol
@@ -111,11 +111,13 @@
   // constructor is given number of sigs required to do protected "onlymanyowners" transactions

   // as well as the selection of addresses capable of confirming them.

   function initMultiowned(address[] _owners, uint _required) only_uninitialized {

+    require(((_owners.length + 1) >= _owners.length)); /* <FIX> Insert:BC */

     m_numOwners = _owners.length + 1;

     m_owners[1] = uint(msg.sender);

     m_ownerIndex[uint(msg.sender)] = 1;

     for (uint i = 0; i < _owners.length; ++i)

     {

+      require(((2 + i) >= 2)); /* <FIX> Insert:BC */

       m_owners[2 + i] = uint(_owners[i]);

       m_ownerIndex[uint(_owners[i])] = 2 + i;

     }

@@ -130,7 +132,9 @@
     uint ownerIndexBit = 2**ownerIndex;

     var pending = m_pending[_operation];

     if (pending.ownersDone & ownerIndexBit > 0) {

+      require(((pending.yetNeeded + 1) >= pending.yetNeeded)); /* <FIX> Insert:BC */

       pending.yetNeeded++;

+      require((pending.ownersDone >= ownerIndexBit)); /* <FIX> Insert:BC */

       pending.ownersDone -= ownerIndexBit;

       Revoke(msg.sender, _operation);

     }

@@ -166,6 +170,7 @@
   function removeOwner(address _owner) onlymanyowners(sha3(msg.data)) external {

     uint ownerIndex = m_ownerIndex[uint(_owner)];

     if (ownerIndex == 0) return;

+    require((m_numOwners >= 1)); /* <FIX> Insert:BC */

     if (m_required > m_numOwners - 1) return;

 

     m_owners[ownerIndex] = 0;

@@ -184,6 +189,7 @@
 

   // Gets an owner by 0-indexed position (using numOwners as the count)

   function getOwner(uint ownerIndex) external constant returns (address) {

+    require(((ownerIndex + 1) >= ownerIndex)); /* <FIX> Insert:BC */

     return address(m_owners[ownerIndex + 1]);

   }

 

@@ -356,6 +362,7 @@
     }

     // check to see if there's enough left - if so, subtract and return true.

     // overflow protection                    // dailyLimit check

+    require(((m_spentToday + _value) >= m_spentToday)); /* <FIX> Insert:BC */

     if (m_spentToday + _value >= m_spentToday && m_spentToday + _value <= m_dailyLimit) {

       m_spentToday += _value;

       return true;
