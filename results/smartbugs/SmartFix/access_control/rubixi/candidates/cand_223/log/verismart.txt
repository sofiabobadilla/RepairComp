[CHECKER] Integer Over/Underflows
[CHECKER] Suicidal
[CHECKER] Re-Entrancy
[CHECKER] Improper use of Tx.origin
[CHECKER] Ether-Leaking

[INFO] all funcs : 19
[INFO] reachable : 17
[INFO] Generating Paths ... took 0.003611s
[INFO] # path : 151

[INFO] Violate CEI: false
[INFO] msg.sender = this possible: false
[INFO] Performing Interval Analysis ... took 0.005036s
Generating VCs ... took 0.021342s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 1 Total elapsed : 0.109826
[
0 -> true
112 -> true
]
[
]
1/26 ... [IO] line 47, (collectedFees + msg.value) ... proven
2/26 ... [IO] line 48, (collectedFees + msg.value) ... proven
3/26 ... [IO] line 62, (msg.value * pyramidMultiplier) ... proven
4/26 ... [IO] line 63, (msg.value * pyramidMultiplier) ... unproven
5/26 ... [IO] line 71, (100 - _fee) ... proven
6/26 ... [IO] line 71, (balance + ((msg.value * (100 - _fee)) / 100)) ... unproven
7/26 ... [IO] line 71, (msg.value * (100 - _fee)) ... unproven
8/26 ... [IO] line 72, (collectedFees + ((msg.value * _fee) / 100)) ... proven
9/26 ... [IO] line 72, (msg.value * _fee) ... proven
10/26 ... [IO] line 73, (msg.value * _fee) ... proven
11/26 ... [IO] line 74, (collectedFees + ((msg.value * _fee) / 100)) ... proven
12/26 ... [IO] line 74, (msg.value * _fee) ... proven
13/26 ... [IO] line 81, (balance - participants[payoutOrder].payout) ... proven
14/26 ... [IO] line 82, (payoutOrder + 1) ... proven
15/26 ... [IO] line 95, (_amt * 1000000000000000000) ... proven
16/26 ... [IO] line 96, (_amt * 1000000000000000000) ... proven
17/26 ... [IO] line 102, (collectedFees - _amt) ... proven
18/26 ... [IO] line 108, ((collectedFees / 100) * _pcent) ... proven
19/26 ... [IO] line 109, ((collectedFees / 100) * _pcent) ... proven
20/26 ... [IO] line 112, (collectedFees - feesToCollect) ... proven
21/26 ... [IO] line 161, (participants.length - payoutOrder) ... unproven
22/26 ... [ETH_LEAK] line 79, participants[payoutOrder].etherAddress.send(payoutToSend); ... unproven
23/26 ... [ETH_LEAK] line 90, creator.send(collectedFees); ... unproven
24/26 ... [ETH_LEAK] line 101, creator.send(_amt); ... unproven
25/26 ... [ETH_LEAK] line 110, creator.send(feesToCollect); ... unproven
26/26 ... [TX_ORG] line 28, assume((msg.sender == creator)); ... proven
took 4.591079s

Generating VCs ... took 0.023361s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 2 Total elapsed : 4.813122
[
0 -> (Read(@TU, creator__@18) == true)
112 -> (Read(@TU, creator__@18) == true)
]
[
]
1/26 ... [IO] line 47, (collectedFees + msg.value) ... proven
2/26 ... [IO] line 48, (collectedFees + msg.value) ... proven
3/26 ... [IO] line 62, (msg.value * pyramidMultiplier) ... proven
4/26 ... [IO] line 63, (msg.value * pyramidMultiplier) ... unproven
5/26 ... [IO] line 71, (100 - _fee) ... proven
6/26 ... [IO] line 71, (balance + ((msg.value * (100 - _fee)) / 100)) ... unproven
7/26 ... [IO] line 71, (msg.value * (100 - _fee)) ... unproven
8/26 ... [IO] line 72, (collectedFees + ((msg.value * _fee) / 100)) ... proven
9/26 ... [IO] line 72, (msg.value * _fee) ... proven
10/26 ... [IO] line 73, (msg.value * _fee) ... proven
11/26 ... [IO] line 74, (collectedFees + ((msg.value * _fee) / 100)) ... proven
12/26 ... [IO] line 74, (msg.value * _fee) ... proven
13/26 ... [IO] line 81, (balance - participants[payoutOrder].payout) ... proven
14/26 ... [IO] line 82, (payoutOrder + 1) ... proven
15/26 ... [IO] line 95, (_amt * 1000000000000000000) ... proven
16/26 ... [IO] line 96, (_amt * 1000000000000000000) ... proven
17/26 ... [IO] line 102, (collectedFees - _amt) ... proven
18/26 ... [IO] line 108, ((collectedFees / 100) * _pcent) ... proven
19/26 ... [IO] line 109, ((collectedFees / 100) * _pcent) ... proven
20/26 ... [IO] line 112, (collectedFees - feesToCollect) ... proven
21/26 ... [IO] line 161, (participants.length - payoutOrder) ... unproven
22/26 ... [ETH_LEAK] line 79, participants[payoutOrder].etherAddress.send(payoutToSend); ... unproven
23/26 ... [ETH_LEAK] line 90, creator.send(collectedFees); ... proven
24/26 ... [ETH_LEAK] line 101, creator.send(_amt); ... proven
25/26 ... [ETH_LEAK] line 110, creator.send(feesToCollect); ... proven
26/26 ... [TX_ORG] line 28, assume((msg.sender == creator)); ... proven
took 1.150219s

Generating VCs ... took 0.020456s
Checking validity of VCs ... took 0.773832s

Generating VCs ... took 0.021688s
Checking validity of VCs ... took 0.647608s

Generating VCs ... took 0.022006s
Checking validity of VCs ... took 0.020811s

Generating VCs ... took 0.021394s
Checking validity of VCs ... took 0.578499s

Generating VCs ... took 0.023158s
Checking validity of VCs ... took 0.301819s

Generating VCs ... took 0.021823s
Checking validity of VCs ... took 0.650775s

Generating VCs ... took 0.021593s
Checking validity of VCs ... took 0.998718s

Iter : 10 To explore : 962 Explored : 1148 Total elapsed : 10.29252
Generating VCs ... took 0.023241s
Checking validity of VCs ... took 0.711079s

Generating VCs ... took 0.024639s
Checking validity of VCs ... took 0.868499s

Generating VCs ... took 0.022149s
Checking validity of VCs ... took 0.591202s

Generating VCs ... took 0.022312s
Checking validity of VCs ... took 0.733035s

Generating VCs ... took 0.022304s
Checking validity of VCs ... took 0.709447s

Generating VCs ... took 0.022903s
Checking validity of VCs ... took 0.5833s

Generating VCs ... took 0.022512s
Checking validity of VCs ... took 0.815467s

Generating VCs ... took 0.022767s
Checking validity of VCs ... took 14.173931s

Generating VCs ... took 0.021033s
Checking validity of VCs ... took 1.115881s

Generating VCs ... took 0.022668s
Checking validity of VCs ... took 1.716348s

Iter : 20 To explore : 2459 Explored : 2655 Total elapsed : 32.915872
Generating VCs ... took 0.020336s
Checking validity of VCs ... took 1.364689s

Generating VCs ... took 0.022715s
Checking validity of VCs ... took 0.653596s

Generating VCs ... took 0.02111s
Checking validity of VCs ... took 0.594268s

Generating VCs ... took 0.022017s
Checking validity of VCs ... took 0.680421s

Generating VCs ... took 0.020672s
Checking validity of VCs ... took 1.064309s

Generating VCs ... took 0.022072s
Checking validity of VCs ... took 1.047074s

Generating VCs ... took 0.021413s
Checking validity of VCs ... took 1.108045s

Generating VCs ... took 0.02097s
Checking validity of VCs ... took 1.133474s

Generating VCs ... took 0.023167s
Checking validity of VCs ... took 1.071568s

Generating VCs ... took 0.020711s
Checking validity of VCs ... took 1.071072s

Iter : 30 To explore : 3038 Explored : 3244 Total elapsed : 43.112241
Generating VCs ... took 0.02078s
Checking validity of VCs ... took 0.676869s

Generating VCs ... took 0.022952s
Checking validity of VCs ... took 0.385442s

Generating VCs ... took 0.020719s
Checking validity of VCs ... took 0.568896s

Generating VCs ... took 0.022072s
Checking validity of VCs ... took 1.201138s

Generating VCs ... took 0.021091s
Checking validity of VCs ... took 1.183211s

Generating VCs ... took 0.021459s
Checking validity of VCs ... took 0.858023s

Generating VCs ... took 0.020944s
Checking validity of VCs ... took 0.833881s

Generating VCs ... took 0.021123s
Checking validity of VCs ... took 0.813491s

Generating VCs ... took 0.023921s
Checking validity of VCs ... took 0.648292s

Generating VCs ... took 0.021233s
Checking validity of VCs ... took 0.83384s

Iter : 40 To explore : 4371 Explored : 4587 Total elapsed : 51.657899
Generating VCs ... took 0.024122s
Checking validity of VCs ... took 0.783034s

Generating VCs ... took 0.020954s
Checking validity of VCs ... took 1.177356s

Generating VCs ... took 0.022572s
Checking validity of VCs ... took 1.178962s

Generating VCs ... took 0.021201s
Checking validity of VCs ... took 1.280834s

Generating VCs ... took 0.02133s
Checking validity of VCs ... took 1.198822s

Generating VCs ... took 0.021269s
Checking validity of VCs ... took 1.246181s

Generating VCs ... took 0.023098s
Checking validity of VCs ... took 1.211437s

Generating VCs ... took 0.021342s
Checking validity of VCs ... took 0.391894s

Generating VCs ... took 0.020999s
Checking validity of VCs ... took 1.19967s

Generating VCs ... took 0.024753s
Checking validity of VCs ... took 1.732937s

Iter : 50 To explore : 4902 Explored : 5128 Total elapsed : 63.46671
Generating VCs ... took 0.021379s
Checking validity of VCs ... took 1.34713s

Generating VCs ... took 0.025086s
Checking validity of VCs ... took 1.246602s

Generating VCs ... took 0.025369s
Checking validity of VCs ... took 1.721672s

Generating VCs ... took 0.021355s
Checking validity of VCs ... took 1.648175s

Generating VCs ... took 0.022633s
Checking validity of VCs ... took 1.17718s

Generating VCs ... took 0.025125s
Checking validity of VCs ... took 1.199889s

Generating VCs ... took 0.02185s
Checking validity of VCs ... took 1.176734s

Generating VCs ... took 0.020808s
Checking validity of VCs ... took 1.155915s

Generating VCs ... took 0.023357s
Checking validity of VCs ... took 1.016202s

Generating VCs ... took 0.022711s
Checking validity of VCs ... took 1.252744s

Iter : 60 To explore : 6026 Explored : 6262 Total elapsed : 77.036535
Generating VCs ... took 0.027563s
Checking validity of VCs ... took 1.459128s

Generating VCs ... took 0.021206s
Checking validity of VCs ... took 1.106154s

Generating VCs ... took 0.021785s
Checking validity of VCs ... took 1.259397s

Generating VCs ... took 0.044329s
Checking validity of VCs ... took 1.090155s

Generating VCs ... took 0.021943s
Checking validity of VCs ... took 1.453761s

Generating VCs ... took 0.021914s
Checking validity of VCs ... took 1.629674s

Generating VCs ... took 0.021241s
Checking validity of VCs ... took 1.770147s

Generating VCs ... took 0.026922s
Checking validity of VCs ... took 1.583849s

Generating VCs ... took 0.022545s
Checking validity of VCs ... took 1.743112s

Generating VCs ... took 0.021651s
Checking validity of VCs ... took 1.829358s

Iter : 70 To explore : 7207 Explored : 7453 Total elapsed : 92.707019
Generating VCs ... took 0.026781s
Checking validity of VCs ... took 1.730745s

Generating VCs ... took 0.021203s
Checking validity of VCs ... took 2.286463s

Generating VCs ... took 0.021627s
Checking validity of VCs ... took 1.829279s

Generating VCs ... took 0.021923s
Checking validity of VCs ... took 1.459261s

Generating VCs ... took 0.022004s
Checking validity of VCs ... took 1.601464s

Generating VCs ... took 0.024993s
Checking validity of VCs ... took 2.162269s

Generating VCs ... took 0.025299s
Checking validity of VCs ... took 1.154981s

Generating VCs ... took 0.024201s
Checking validity of VCs ... took 1.299405s

Generating VCs ... took 0.021535s
Checking validity of VCs ... took 1.004797s

Generating VCs ... took 0.022315s
Checking validity of VCs ... took 2.085813s

Iter : 80 To explore : 8306 Explored : 8562 Total elapsed : 110.03383
Generating VCs ... took 0.02447s
Checking validity of VCs ... took 1.408732s

Generating VCs ... took 0.020886s
Checking validity of VCs ... took 1.058132s

Generating VCs ... took 0.020738s
Checking validity of VCs ... took 1.24544s

Generating VCs ... took 0.021293s
Checking validity of VCs ... took 1.005082s

Generating VCs ... took 0.02148s
Checking validity of VCs ... took 1.722344s

Generating VCs ... took 0.026909s
Checking validity of VCs ... took 1.37003s

Generating VCs ... took 0.021317s
Checking validity of VCs ... took 1.1282s

Generating VCs ... took 0.02079s
Checking validity of VCs ... took 1.305518s

Generating VCs ... took 0.021193s
Checking validity of VCs ... took 1.067667s

Generating VCs ... took 0.024826s
Checking validity of VCs ... took 28.029846s

Iter : 90 To explore : 9100 Explored : 9366 Total elapsed : 149.98318
Generating VCs ... took 0.021201s
Checking validity of VCs ... took 1.551407s

Generating VCs ... took 0.00680100000002s
Checking validity of VCs ... 
1/56 ... [NO_EFFECT] line 48, (@pre3 == collectedFees) ... unproven
2/56 ... [NO_EFFECT] line 52, (@pre2 == _fee) ... unproven
3/56 ... [NO_EFFECT] line 54, (@pre1 == _fee) ... unproven
4/56 ... [NO_EFFECT] line 63, (@pre10 == struct_init(Participant, msg.sender, ((msg.value * pyramidMultiplier) / 100)).etherAddress) ... unproven
5/56 ... [NO_EFFECT] line 63, (@pre9 == struct_init(Participant, msg.sender, ((msg.value * pyramidMultiplier) / 100)).payout) ... unproven
6/56 ... [NO_EFFECT] line 71, (@pre8 == balance) ... unproven
7/56 ... [NO_EFFECT] line 74, (@pre7 == collectedFees) ... unproven
8/56 ... [NO_EFFECT] line 78, (@pre6 == payoutToSend) ... unproven
9/56 ... [NO_EFFECT] line 81, (@pre5 == balance) ... unproven
10/56 ... [NO_EFFECT] line 82, (@pre4 == payoutOrder) ... unproven
11/56 ... [NO_EFFECT] line 96, (@pre12 == _amt) ... unproven
12/56 ... [NO_EFFECT] line 102, (@pre11 == collectedFees) ... unproven
13/56 ... [NO_EFFECT] line 109, (@pre14 == feesToCollect) ... unproven
14/56 ... [NO_EFFECT] line 112, (@pre13 == collectedFees) ... unproven
15/56 ... [NO_EFFECT] line 117, (@pre15 == creator) ... unproven
16/56 ... [NO_EFFECT] line 123, (@pre16 == pyramidMultiplier) ... unproven
17/56 ... [NO_EFFECT] line 129, (@pre17 == feePercent) ... unproven
18/56 ... [NO_EFFECT] line 134, (@pre18 == multiplier) ... unproven
19/56 ... [NO_EFFECT] line 139, (@pre19 == fee) ... unproven
20/56 ... [NO_EFFECT] line 144, (@pre20 == pyramidBalance) ... unproven
21/56 ... [NO_EFFECT] line 149, (@pre21 == balancePayout) ... unproven
22/56 ... [NO_EFFECT] line 153, (@pre22 == fees) ... unproven
23/56 ... [NO_EFFECT] line 157, (@pre23 == count) ... unproven
24/56 ... [NO_EFFECT] line 161, (@pre24 == count) ... unproven
25/56 ... [NO_EFFECT] line 166, (@pre26 == Address) ... unproven
26/56 ... [NO_EFFECT] line 167, (@pre25 == Payout) ... unproven
27/56 ... [ASSIGN_CONST] line 48, (collectedFees == 0) ... unproven
28/56 ... [ASSIGN_CONST] line 71, (balance == 0) ... unproven
29/56 ... [ASSIGN_CONST] line 74, (collectedFees == 0) ... unproven
30/56 ... [ASSIGN_CONST] line 81, (balance == 0) ... unproven
31/56 ... [ASSIGN_CONST] line 82, (payoutOrder == 0) ... unproven
32/56 ... [ASSIGN_CONST] line 102, (collectedFees == 0) ... unproven
33/56 ... [ASSIGN_CONST] line 112, (collectedFees == 0) ... unproven
34/56 ... [ASSIGN_CONST] line 161, (count == 0) ... unproven
35/56 ... [DEAD] line 28, false ... unproven
36/56 ... [DEAD] line 40, false ... unproven
37/56 ... [DEAD] line 46, false ... unproven
38/56 ... [DEAD] line 47, false ... unproven
39/56 ... [DEAD] line 54, false ... unproven
40/56 ... [DEAD] line 56, false ... unproven
41/56 ... [DEAD] line 62, false ... unproven
42/56 ... [DEAD] line 66, false ... unproven
43/56 ... [DEAD] line 67, false ... unproven
44/56 ... [DEAD] line 70, false ... unproven
45/56 ... [DEAD] line 72, false ... unproven
46/56 ... [DEAD] line 73, false ... unproven
47/56 ... [DEAD] line 88, false ... unproven
48/56 ... [DEAD] line 95, false ... unproven
49/56 ... [DEAD] line 97, false ... unproven
50/56 ... [DEAD] line 99, false ... unproven
51/56 ... [DEAD] line 106, false ... unproven
52/56 ... [DEAD] line 108, false ... unproven
53/56 ... [DEAD] line 111, false ... unproven
54/56 ... [DEAD] line 121, false ... unproven
55/56 ... [DEAD] line 127, false ... unproven
56/56 ... [DEAD] line 165, false ... unproven
took 2.116423s


===== Vulnerability Report =====
[1] [IO] line 47, (collectedFees + msg.value) : proven
[2] [IO] line 48, (collectedFees + msg.value) : proven
[3] [IO] line 62, (msg.value * pyramidMultiplier) : proven
[4] [IO] line 63, (msg.value * pyramidMultiplier) : unproven
[5] [IO] line 71, (100 - _fee) : proven
[6] [IO] line 71, (balance + ((msg.value * (100 - _fee)) / 100)) : unproven
[7] [IO] line 71, (msg.value * (100 - _fee)) : unproven
[8] [IO] line 72, (collectedFees + ((msg.value * _fee) / 100)) : proven
[9] [IO] line 72, (msg.value * _fee) : proven
[10] [IO] line 73, (msg.value * _fee) : proven
[11] [IO] line 74, (collectedFees + ((msg.value * _fee) / 100)) : proven
[12] [IO] line 74, (msg.value * _fee) : proven
[13] [IO] line 81, (balance - participants[payoutOrder].payout) : proven
[14] [IO] line 82, (payoutOrder + 1) : proven
[15] [IO] line 95, (_amt * 1000000000000000000) : proven
[16] [IO] line 96, (_amt * 1000000000000000000) : proven
[17] [IO] line 102, (collectedFees - _amt) : proven
[18] [IO] line 108, ((collectedFees / 100) * _pcent) : proven
[19] [IO] line 109, ((collectedFees / 100) * _pcent) : proven
[20] [IO] line 112, (collectedFees - feesToCollect) : proven
[21] [IO] line 161, (participants.length - payoutOrder) : unproven
[22] [ETH_LEAK] line 79, participants[payoutOrder].etherAddress.send(payoutToSend); : unproven
[23] [ETH_LEAK] line 90, creator.send(collectedFees); : proven
[24] [ETH_LEAK] line 101, creator.send(_amt); : proven
[25] [ETH_LEAK] line 110, creator.send(feesToCollect); : proven
[26] [TX_ORG] line 28, assume((msg.sender == creator)); : proven

===== Regression Report =====
[1] [NO_EFFECT] line 48, (@pre3 == collectedFees) : unproven
[2] [NO_EFFECT] line 52, (@pre2 == _fee) : unproven
[3] [NO_EFFECT] line 54, (@pre1 == _fee) : unproven
[4] [NO_EFFECT] line 63, (@pre10 == struct_init(Participant, msg.sender, ((msg.value * pyramidMultiplier) / 100)).etherAddress) : unproven
[5] [NO_EFFECT] line 63, (@pre9 == struct_init(Participant, msg.sender, ((msg.value * pyramidMultiplier) / 100)).payout) : unproven
[6] [NO_EFFECT] line 71, (@pre8 == balance) : unproven
[7] [NO_EFFECT] line 74, (@pre7 == collectedFees) : unproven
[8] [NO_EFFECT] line 78, (@pre6 == payoutToSend) : unproven
[9] [NO_EFFECT] line 81, (@pre5 == balance) : unproven
[10] [NO_EFFECT] line 82, (@pre4 == payoutOrder) : unproven
[11] [NO_EFFECT] line 96, (@pre12 == _amt) : unproven
[12] [NO_EFFECT] line 102, (@pre11 == collectedFees) : unproven
[13] [NO_EFFECT] line 109, (@pre14 == feesToCollect) : unproven
[14] [NO_EFFECT] line 112, (@pre13 == collectedFees) : unproven
[15] [NO_EFFECT] line 117, (@pre15 == creator) : unproven
[16] [NO_EFFECT] line 123, (@pre16 == pyramidMultiplier) : unproven
[17] [NO_EFFECT] line 129, (@pre17 == feePercent) : unproven
[18] [NO_EFFECT] line 134, (@pre18 == multiplier) : unproven
[19] [NO_EFFECT] line 139, (@pre19 == fee) : unproven
[20] [NO_EFFECT] line 144, (@pre20 == pyramidBalance) : unproven
[21] [NO_EFFECT] line 149, (@pre21 == balancePayout) : unproven
[22] [NO_EFFECT] line 153, (@pre22 == fees) : unproven
[23] [NO_EFFECT] line 157, (@pre23 == count) : unproven
[24] [NO_EFFECT] line 161, (@pre24 == count) : unproven
[25] [NO_EFFECT] line 166, (@pre26 == Address) : unproven
[26] [NO_EFFECT] line 167, (@pre25 == Payout) : unproven
[27] [ASSIGN_CONST] line 48, (collectedFees == 0) : unproven
[28] [ASSIGN_CONST] line 71, (balance == 0) : unproven
[29] [ASSIGN_CONST] line 74, (collectedFees == 0) : unproven
[30] [ASSIGN_CONST] line 81, (balance == 0) : unproven
[31] [ASSIGN_CONST] line 82, (payoutOrder == 0) : unproven
[32] [ASSIGN_CONST] line 102, (collectedFees == 0) : unproven
[33] [ASSIGN_CONST] line 112, (collectedFees == 0) : unproven
[34] [ASSIGN_CONST] line 161, (count == 0) : unproven
[35] [DEAD] line 28, false : unproven
[36] [DEAD] line 40, false : unproven
[37] [DEAD] line 46, false : unproven
[38] [DEAD] line 47, false : unproven
[39] [DEAD] line 54, false : unproven
[40] [DEAD] line 56, false : unproven
[41] [DEAD] line 62, false : unproven
[42] [DEAD] line 66, false : unproven
[43] [DEAD] line 67, false : unproven
[44] [DEAD] line 70, false : unproven
[45] [DEAD] line 72, false : unproven
[46] [DEAD] line 73, false : unproven
[47] [DEAD] line 88, false : unproven
[48] [DEAD] line 95, false : unproven
[49] [DEAD] line 97, false : unproven
[50] [DEAD] line 99, false : unproven
[51] [DEAD] line 106, false : unproven
[52] [DEAD] line 108, false : unproven
[53] [DEAD] line 111, false : unproven
[54] [DEAD] line 121, false : unproven
[55] [DEAD] line 127, false : unproven
[56] [DEAD] line 165, false : unproven

============ Statistics ============
# Iter                    : 90
# Alarm / Query           : 5 / 26
- integer over/underflow  : 4 / 21
- kill-anyone             : 0 / 0
- ether-leaking           : 1 / 4
- reentrancy-leaking      : 0 / 0
- reentrancy              : 0 / 0
- tx.origin               : 0 / 1

Time Elapsed (Real) : 153.569699049
Time Elapsed (CPU)  : 153.743761
