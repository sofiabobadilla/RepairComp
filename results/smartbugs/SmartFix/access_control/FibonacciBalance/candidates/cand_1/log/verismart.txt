[CHECKER] Integer Over/Underflows
[CHECKER] Suicidal
[CHECKER] Re-Entrancy
[CHECKER] Improper use of Tx.origin
[CHECKER] Ether-Leaking

[INFO] all funcs : 13
[INFO] reachable : 7
[INFO] Generating Paths ... took 9.4e-05s
[INFO] # path : 13

[INFO] Violate CEI: false
[INFO] msg.sender = this possible: false
[INFO] Performing Interval Analysis ... took 0.0003s
Generating VCs ... took 0.000683s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 1 Total elapsed : 0.031155
[
0 -> true
]
[
]
1/4 ... [IO] line 27, (withdrawalCounter + 1) ... proven
2/4 ... [IO] line 28, (withdrawalCounter + 1) ... proven
3/4 ... [IO] line 33, (calculatedFibNumber * 1000000000000000000) ... proven
4/4 ... [ETH_LEAK] line 33, msg.sender.transfer((calculatedFibNumber * 1000000000000000000)); ... unproven
took 0.394674s

Generating VCs ... took 0.000338s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 2 Total elapsed : 0.427302
[
0 -> (Read(@TU, fibonacciLibrary__@3) == true)
]
[
]
1/4 ... [IO] line 27, (withdrawalCounter + 1) ... proven
2/4 ... [IO] line 28, (withdrawalCounter + 1) ... proven
3/4 ... [IO] line 33, (calculatedFibNumber * 1000000000000000000) ... proven
4/4 ... [ETH_LEAK] line 33, msg.sender.transfer((calculatedFibNumber * 1000000000000000000)); ... unproven
took 0.215407s

Generating VCs ... took 0.000415s
Checking validity of VCs ... took 0.07549s

Generating VCs ... took 0.000393s
Checking validity of VCs ... took 0.00949s

Generating VCs ... took 0.000333s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 5 Total elapsed : 0.799377
[
0 -> ((start__@8 == 3) /\ (Read(@TU, fibonacciLibrary__@3) == true))
]
[
]
1/4 ... [IO] line 27, (withdrawalCounter + 1) ... proven
2/4 ... [IO] line 28, (withdrawalCounter + 1) ... proven
3/4 ... [IO] line 33, (calculatedFibNumber * 1000000000000000000) ... proven
4/4 ... [ETH_LEAK] line 33, msg.sender.transfer((calculatedFibNumber * 1000000000000000000)); ... unproven
took 0.617729s

Generating VCs ... took 0.000377s
Checking validity of VCs ... took 0.076509s

Generating VCs ... took 0.00034s
Checking validity of VCs ... took 0.073854s

Generating VCs ... took 0.000375s
Checking validity of VCs ... took 0.072539s

Generating VCs ... took 0.000371s
Checking validity of VCs ... took 0.07583s

Iter : 10 To explore : 75 Explored : 197 Total elapsed : 1.664454
Generating VCs ... took 0.000338s
Checking validity of VCs ... took 0.075869s

Generating VCs ... took 0.000476s
Checking validity of VCs ... took 0.072681s

Generating VCs ... took 0.000349s
Checking validity of VCs ... took 0.071214s

Generating VCs ... took 0.000373s
Checking validity of VCs ... took 0.072094s

Generating VCs ... took 0.000373s
Checking validity of VCs ... took 0.111121s

Generating VCs ... took 0.000414s
Checking validity of VCs ... took 0.081409s

Generating VCs ... took 0.000701s
Checking validity of VCs ... took 0.101069s

Generating VCs ... took 0.00035s
Checking validity of VCs ... took 0.070594s

Generating VCs ... took 0.000346s
Checking validity of VCs ... took 0.073661s

Generating VCs ... took 0.000351s
Checking validity of VCs ... took 0.071281s

Iter : 20 To explore : 230 Explored : 362 Total elapsed : 2.500773
Generating VCs ... took 0.00038s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 20 Total elapsed : 2.567759
[
0 -> (((calculatedFibNumber__@5 == 0) /\ (start__@8 == 3)) /\ (Read(@TU, fibonacciLibrary__@3) == true))
]
[
]
1/4 ... [IO] line 27, (withdrawalCounter + 1) ... proven
2/4 ... [IO] line 28, (withdrawalCounter + 1) ... proven
3/4 ... [IO] line 33, (calculatedFibNumber * 1000000000000000000) ... proven
4/4 ... [ETH_LEAK] line 33, msg.sender.transfer((calculatedFibNumber * 1000000000000000000)); ... proven
took 0.083188s

Generating VCs ... took 0.000147s
Checking validity of VCs ... 
1/4 ... [NO_EFFECT] line 28, (@pre1 == withdrawalCounter) ... unproven
2/4 ... [ASSIGN_CONST] line 28, (withdrawalCounter == 0) ... unproven
3/4 ... [DEAD] line 27, false ... unproven
4/4 ... [DEAD] line 33, false ... unproven
took 0.230777s


===== Vulnerability Report =====
[1] [IO] line 27, (withdrawalCounter + 1) : proven
[2] [IO] line 28, (withdrawalCounter + 1) : proven
[3] [IO] line 33, (calculatedFibNumber * 1000000000000000000) : proven
[4] [ETH_LEAK] line 33, msg.sender.transfer((calculatedFibNumber * 1000000000000000000)); : proven

===== Regression Report =====
[1] [NO_EFFECT] line 28, (@pre1 == withdrawalCounter) : unproven
[2] [ASSIGN_CONST] line 28, (withdrawalCounter == 0) : unproven
[3] [DEAD] line 27, false : unproven
[4] [DEAD] line 33, false : unproven

============ Statistics ============
# Iter                    : 20
# Alarm / Query           : 0 / 4
- integer over/underflow  : 0 / 3
- kill-anyone             : 0 / 0
- ether-leaking           : 0 / 1
- reentrancy-leaking      : 0 / 0
- reentrancy              : 0 / 0
- tx.origin               : 0 / 0

Time Elapsed (Real) : 2.83341097832
Time Elapsed (CPU)  : 2.815402
