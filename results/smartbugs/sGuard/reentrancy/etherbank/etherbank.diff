--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/etherbank.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/sGuard/reentrancy/etherbank/etherbank.sol
@@ -1,21 +1,38 @@
+contract sGuard{

+  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+    uint256 c = a + b;

+    assert(c >= a);

+    return c;

+  }

+  

+  bool internal locked_;

+  constructor() internal {

+    locked_ = false;

+  }

+  modifier nonReentrant_() {

+    require(!locked_);

+    locked_ = true;

+    _;

+    locked_ = false;

+  }

+}

 /*

  * @source: https://github.com/seresistvanandras/EthBench/blob/master/Benchmark/Simple/reentrant.sol

  * @author: -

  * @vulnerable_at_lines: 21

  */

 

-pragma solidity ^0.4.0;

-contract EtherBank{

+contract EtherBank is sGuard {

     mapping (address => uint) userBalances;

     function getBalance(address user) constant returns(uint) {  

 		return userBalances[user];

 	}

 

-	function addToBalance() {  

-		userBalances[msg.sender] += msg.value;

+	 function addToBalance() nonReentrant_  {  

+		userBalances[msg.sender] = add_uint256(userBalances[msg.sender], msg.value);

 	}

 

-	function withdrawBalance() {  

+	 function withdrawBalance() nonReentrant_  {  

 		uint amountToWithdraw = userBalances[msg.sender];

         // <yes> <report> REENTRANCY

 		if (!(msg.sender.call.value(amountToWithdraw)())) { throw; }
