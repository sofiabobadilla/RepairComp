--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/reentrancy_bonus.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/sGuard/reentrancy/reentrancy_bonus/reentrancy_bonus.sol
@@ -1,29 +1,46 @@
+contract sGuard{

+  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+    uint256 c = a + b;

+    assert(c >= a);

+    return c;

+  }

+  

+  bool internal locked_;

+  constructor() internal {

+    locked_ = false;

+  }

+  modifier nonReentrant_() {

+    require(!locked_);

+    locked_ = true;

+    _;

+    locked_ = false;

+  }

+}

 /*

  * @source: https://consensys.github.io/smart-contract-best-practices/known_attacks/

  * @author: consensys

  * @vulnerable_at_lines: 28

  */

 

-pragma solidity ^0.4.24;

 

-contract Reentrancy_bonus{

+contract Reentrancy_bonus is sGuard {

 

     // INSECURE

     mapping (address => uint) private userBalances;

     mapping (address => bool) private claimedBonus;

     mapping (address => uint) private rewardsForA;

 

-    function withdrawReward(address recipient) public {

+     function withdrawReward(address recipient) nonReentrant_  public {

         uint amountToWithdraw = rewardsForA[recipient];

         rewardsForA[recipient] = 0;

         (bool success, ) = recipient.call.value(amountToWithdraw)("");

         require(success);

     }

 

-    function getFirstWithdrawalBonus(address recipient) public {

+     function getFirstWithdrawalBonus(address recipient) nonReentrant_  public {

         require(!claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once

 

-        rewardsForA[recipient] += 100;

+        rewardsForA[recipient] = add_uint256(rewardsForA[recipient], 100);

         // <yes> <report> REENTRANCY

         withdrawReward(recipient); // At this point, the caller will be able to execute getFirstWithdrawalBonus again.

         claimedBonus[recipient] = true;
