{"bugFixes":{",lVz}[[GzRuC/c&zH[^;|&PD\"\\O$V":"rewardsForA[recipient] = add_uint256(rewardsForA[recipient], 100)","x1oG-U4G^_:Mag0%$N+U>V$m5Sow^yz$JdD'\"6wY:`":" function withdrawReward(address recipient) nonReentrant_ ","888D~c<OBCtx2r5{~`lByk5Ftu?|~J'U3cX@}._2Mz\\\\Y>H-vX3":" function getFirstWithdrawalBonus(address recipient) nonReentrant_ ","6g=aWc1}7+k:~Xl?HO|XRT%UB":"contract Reentrancy_bonus is sGuard "},"source":"/*\n * @source: https://consensys.github.io/smart-contract-best-practices/known_attacks/\n * @author: consensys\n * @vulnerable_at_lines: 28\n */\n\n\n6g=aWc1}7+k:~Xl?HO|XRT%UB{\n\n    // INSECURE\n    mapping (address => uint) private userBalances;\n    mapping (address => bool) private claimedBonus;\n    mapping (address => uint) private rewardsForA;\n\n    x1oG-U4G^_:Mag0%$N+U>V$m5Sow^yz$JdD'\"6wY:` public {\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");\n        require(success);\n    }\n\n    888D~c<OBCtx2r5{~`lByk5Ftu?|~J'U3cX@}._2Mz\\\\Y>H-vX3 public {\n        require(!claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once\n\n        ,lVz}[[GzRuC/c&zH[^;|&PD\"\\O$V;\n        // <yes> <report> REENTRANCY\n        withdrawReward(recipient); // At this point, the caller will be able to execute getFirstWithdrawalBonus again.\n        claimedBonus[recipient] = true;\n    }\n}\n","wrappers":{}}