
> symEvm@1.0.0 dev /sGuard
> node src/index.js "smartbugs/dataset/reentrancy/reentrancy_insecure.sol" "results/reentrancy/reentrancy_insecure" "Reentrancy_insecure"

smartbugs/dataset/reentrancy/reentrancy_insecure.sol
{ bugFixes:
   { 'z=uCd\',I%u0,d-@@ZeHz<4{1<"': ' function withdrawBalance() nonReentrant_ ',
     'yksnb26U(YY%a*]JC~%;^0{-kug%G': 'contract Reentrancy_insecure  is sGuard ' },
  source:
   '/*\n * @source: https://consensys.github.io/smart-contract-best-practices/known_attacks/\n * @author: consensys\n * @vulnerable_at_lines: 17\n */\n\n\nyksnb26U(YY%a*]JC~%;^0{-kug%G{\n\n    // INSECURE\n    mapping (address => uint) private userBalances;\n\n    z=uCd\',I%u0,d-@@ZeHz<4{1<" public {\n        uint amountToWithdraw = userBalances[msg.sender];\n        // <yes> <report> REENTRANCY\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(""); // At this point, the caller\'s code is executed, and can call withdrawBalance again\n        require(success);\n        userBalances[msg.sender] = 0;\n    }\n}\n',
  wrappers: Set { 'nonReentrant_' } }
