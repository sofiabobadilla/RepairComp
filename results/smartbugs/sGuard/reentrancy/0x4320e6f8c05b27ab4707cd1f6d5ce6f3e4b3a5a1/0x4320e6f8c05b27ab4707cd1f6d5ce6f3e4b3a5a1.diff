--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/sGuard/reentrancy/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol
@@ -1,3 +1,26 @@
+contract sGuard{

+  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+    assert(b <= a);

+    return a - b;

+  }

+  

+  bool internal locked_;

+  constructor() internal {

+    locked_ = false;

+  }

+  modifier nonReentrant_() {

+    require(!locked_);

+    locked_ = true;

+    _;

+    locked_ = false;

+  }

+  

+  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+    uint256 c = a + b;

+    assert(c >= a);

+    return c;

+  }

+}

 

 /*

  * @source: etherscan.io 

@@ -5,10 +28,9 @@
  * @vulnerable_at_lines: 55

  */

 

-pragma solidity ^0.4.19;

 

 contract ACCURAL_DEPOSIT

-{

+ is sGuard {

     mapping (address=>uint256) public balances;   

    

     uint public MinSum = 1 ether;

@@ -17,35 +39,35 @@
     

     bool intitalized;

     

-    function SetMinSum(uint _val)

+     function SetMinSum(uint _val) nonReentrant_ 

     public

     {

         if(intitalized)revert();

         MinSum = _val;

     }

     

-    function SetLogFile(address _log)

+     function SetLogFile(address _log) nonReentrant_ 

     public

     {

         if(intitalized)revert();

         Log = LogFile(_log);

     }

     

-    function Initialized()

+     function Initialized() nonReentrant_ 

     public

     {

         intitalized = true;

     }

     

-    function Deposit()

+     function Deposit() nonReentrant_ 

     public

     payable

     {

-        balances[msg.sender]+= msg.value;

+        balances[msg.sender] = add_uint256(balances[msg.sender], msg.value);

         Log.AddMessage(msg.sender,msg.value,"Put");

     }

     

-    function Collect(uint _am)

+     function Collect(uint _am) nonReentrant_ 

     public

     payable

     {

@@ -54,7 +76,7 @@
             // <yes> <report> REENTRANCY

             if(msg.sender.call.value(_am)())

             {

-                balances[msg.sender]-=_am;

+                balances[msg.sender] = sub_uint256(balances[msg.sender], _am);

                 Log.AddMessage(msg.sender,_am,"Collect");

             }

         }

@@ -72,7 +94,7 @@
 

 

 contract LogFile

-{

+ is sGuard {

     struct Message

     {

         address Sender;
