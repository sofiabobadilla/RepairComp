--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/etherstore.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/sGuard/reentrancy/etherstore/etherstore.sol
@@ -1,3 +1,26 @@
+contract sGuard{

+  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+    assert(b <= a);

+    return a - b;

+  }

+  

+  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+    uint256 c = a + b;

+    assert(c >= a);

+    return c;

+  }

+  

+  bool internal locked_;

+  constructor() internal {

+    locked_ = false;

+  }

+  modifier nonReentrant_() {

+    require(!locked_);

+    locked_ = true;

+    _;

+    locked_ = false;

+  }

+}

 /*

  * @source: https://github.com/sigp/solidity-security-blog

  * @author: Suhabe Bugrara

@@ -5,27 +28,26 @@
  */

 

 //added pragma version

-pragma solidity ^0.4.10;

 

-contract EtherStore {

+contract EtherStore  is sGuard {

 

     uint256 public withdrawalLimit = 1 ether;

     mapping(address => uint256) public lastWithdrawTime;

     mapping(address => uint256) public balances;

 

-    function depositFunds() public payable {

-        balances[msg.sender] += msg.value;

+     function depositFunds() nonReentrant_  public payable {

+        balances[msg.sender] = add_uint256(balances[msg.sender], msg.value);

     }

 

-    function withdrawFunds (uint256 _weiToWithdraw) public {

+     function withdrawFunds (uint256 _weiToWithdraw) nonReentrant_  public {

         require(balances[msg.sender] >= _weiToWithdraw);

         // limit the withdrawal

         require(_weiToWithdraw <= withdrawalLimit);

         // limit the time allowed to withdraw

-        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);

+        require(now >= add_uint256(lastWithdrawTime[msg.sender], 1 weeks));

         // <yes> <report> REENTRANCY

         require(msg.sender.call.value(_weiToWithdraw)());

-        balances[msg.sender] -= _weiToWithdraw;

+        balances[msg.sender] = sub_uint256(balances[msg.sender], _weiToWithdraw);

         lastWithdrawTime[msg.sender] = now;

     }

  }
