{"bugFixes":{";KovV7C#dpvT|\\z&,19\"J+dPalGi6e":"tokenBalance[msg.sender] = add_uint256(tokenBalance[msg.sender], 20)","Q&^keHlnA^cdE@e":"contract attack is sGuard ","sz7wi$=D~>_.TIfp'19={JXQ!x":"contract ModifierEntrancy  is sGuard ","L0=9:lj\\I#Sk4M,Ebj":" function airDrop() nonReentrant_ ","wAIhpN(?\\@.8Q":"contract Bank is sGuard "},"source":"/*\n * @source: https://github.com/SmartContractSecurity/SWC-registry/blob/master/test_cases/reentracy/modifier_reentrancy.sol\n * @author: - \n * @vulnerable_at_lines: 15\n */\n\n\nsz7wi$=D~>_.TIfp'19={JXQ!x{\n  mapping (address => uint) public tokenBalance;\n  string constant name = \"Nu Token\";\n\n  //If a contract has a zero balance and supports the token give them some token\n  // <yes> <report> REENTRANCY\n  L0=9:lj\\I#Sk4M,Ebj hasNoBalance supportsToken  public{\n    ;KovV7C#dpvT|\\z&,19\"J+dPalGi6e;\n  }\n\n  //Checks that the contract responds the way we want\n  modifier supportsToken() {\n    require(keccak256(abi.encodePacked(\"Nu Token\")) == Bank(msg.sender).supportsToken());\n    _;\n  }\n  //Checks that the caller has a zero balance\n  modifier hasNoBalance {\n      require(tokenBalance[msg.sender] == 0);\n      _;\n  }\n}\n\nwAIhpN(?\\@.8Q{\n    function supportsToken() external pure returns(bytes32){\n        return(keccak256(abi.encodePacked(\"Nu Token\")));\n    }\n}\n\nQ&^keHlnA^cdE@e{ //An example of a contract that breaks the contract above.\n    bool hasBeenCalled;\n    function supportsToken() external returns(bytes32){\n        if(!hasBeenCalled){\n            hasBeenCalled = true;\n            ModifierEntrancy(msg.sender).airDrop();\n        }\n        return(keccak256(abi.encodePacked(\"Nu Token\")));\n    }\n    function call(address token) public{\n        ModifierEntrancy(token).airDrop();\n    }\n}\n","wrappers":{}}