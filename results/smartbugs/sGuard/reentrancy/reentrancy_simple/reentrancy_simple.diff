--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/reentrancy_simple.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/sGuard/reentrancy/reentrancy_simple/reentrancy_simple.sol
@@ -1,23 +1,40 @@
+contract sGuard{

+  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+    uint256 c = a + b;

+    assert(c >= a);

+    return c;

+  }

+  

+  bool internal locked_;

+  constructor() internal {

+    locked_ = false;

+  }

+  modifier nonReentrant_() {

+    require(!locked_);

+    locked_ = true;

+    _;

+    locked_ = false;

+  }

+}

 /*

  * @source: https://github.com/trailofbits/not-so-smart-contracts/blob/master/reentrancy/Reentrancy.sol

  * @author: -

  * @vulnerable_at_lines: 24

  */

 

- pragma solidity ^0.4.15;

 

- contract Reentrance {

+ contract Reentrance  is sGuard {

      mapping (address => uint) userBalance;

 

      function getBalance(address u) constant returns(uint){

          return userBalance[u];

      }

 

-     function addToBalance() payable{

-         userBalance[msg.sender] += msg.value;

+      function addToBalance() nonReentrant_  payable{

+         userBalance[msg.sender] = add_uint256(userBalance[msg.sender], msg.value);

      }

 

-     function withdrawBalance(){

+      function withdrawBalance() nonReentrant_ {

          // send userBalance[msg.sender] ethers to msg.sender

          // if mgs.sender is a contract, it will call its fallback function

          // <yes> <report> REENTRANCY
