
> symEvm@1.0.0 dev /sGuard
> node src/index.js "smartbugs/dataset/time_manipulation/ether_lotto.sol" "results/time_manipulation/ether_lotto" "EtherLotto"

smartbugs/dataset/time_manipulation/ether_lotto.sol
{ bugFixes:
   { '\\%vZv@8h([;Vc#j!': 'sub_uint256(pot, FEE_AMOUNT)',
     'QE.9=2o,%!Fd;=F': ' function play() nonReentrant_ ',
     '.~zZ1!}/sBe&T(}k': 'pot = add_uint256(pot, msg.value)',
     '>;+3WO8X"RtYn,\'2\\2)P': 'contract EtherLotto  is sGuard ' },
  source:
   '/*\n * @article: https://blog.positive.com/predicting-random-numbers-in-ethereum-smart-contracts-e5358c6b8620\n * @source: https://etherscan.io/address/0xa11e4ed59dc94e69612f3111942626ed513cb172#code\n * @vulnerable_at_lines: 43\n * @author: -\n */\n\n\n/// @title Ethereum Lottery Game.\n\n>;+3WO8X"RtYn,\'2\\2)P{\n\n    // Amount of ether needed for participating in the lottery.\n    uint constant TICKET_AMOUNT = 10;\n\n    // Fixed amount fee for each lottery game.\n    uint constant FEE_AMOUNT = 1;\n\n    // Address where fee is sent.\n    address public bank;\n\n    // Public jackpot that each participant can win (minus fee).\n    uint public pot;\n\n    // Lottery constructor sets bank account from the smart-contract owner.\n    function EtherLotto() {\n        bank = msg.sender;\n    }\n\n    // Public function for playing lottery. Each time this function\n    // is invoked, the sender has an oportunity for winning pot.\n    QE.9=2o,%!Fd;=F payable {\n\n        // Participants must spend some fixed ether before playing lottery.\n        assert(msg.value == TICKET_AMOUNT);\n\n        // Increase pot for each participant.\n        .~zZ1!}/sBe&T(}k;\n\n        // Compute some *almost random* value for selecting winner from current transaction.\n        // <yes> <report> TIME_MANIPULATION\n        var random = uint(sha3(block.timestamp)) % 2;\n\n        // Distribution: 50% of participants will be winners.\n        if (random == 0) {\n\n            // Send fee to bank account.\n            bank.transfer(FEE_AMOUNT);\n\n            // Send jackpot to winner.\n            msg.sender.transfer(\\%vZv@8h([;Vc#j!);\n\n            // Restart jackpot.\n            pot = 0;\n        }\n    }\n\n}\n',
  wrappers: Set { 'sub_uint256', 'nonReentrant_', 'add_uint256' } }
