--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/front_running/odds_and_evens.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/sGuard/front_running/odds_and_evens/odds_and_evens.sol
@@ -1,12 +1,35 @@
+contract sGuard{

+  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+    uint256 c = a + b;

+    assert(c >= a);

+    return c;

+  }

+  

+  bool internal locked_;

+  constructor() internal {

+    locked_ = false;

+  }

+  modifier nonReentrant_() {

+    require(!locked_);

+    locked_ = true;

+    _;

+    locked_ = false;

+  }

+  

+  function add_uint8(uint8 a, uint8 b) internal pure returns (uint8) {

+    uint8 c = a + b;

+    assert(c >= a);

+    return c;

+  }

+}

 /*

  * @source: http://blockchain.unica.it/projects/ethereum-survey/attacks.html#oddsandevens

  * @author: -

  * @vulnerable_at_lines: 25,28

  */

 

-pragma solidity ^0.4.2;

 

-contract OddsAndEvens{

+contract OddsAndEvens is sGuard {

 

   struct Player {

     address addr;

@@ -22,18 +45,18 @@
     owner = msg.sender;

   }

 // <yes> <report> FRONT_RUNNING

-  function play(uint number) payable{

+   function play(uint number) nonReentrant_  payable{

     if (msg.value != 1 ether) throw;

     // <yes> <report> FRONT_RUNNING

     players[tot] = Player(msg.sender, number);

-    tot++;

+    (tot = add_uint8(tot, 1));

 

     if (tot==2) andTheWinnerIs();

   }

 

   function andTheWinnerIs() private {

     bool res ;

-    uint n = players[0].number+players[1].number;

+    uint n = add_uint256(players[0].number, players[1].number);

     if (n%2==0) {

       res = players[0].addr.send(1800 finney);

     }
