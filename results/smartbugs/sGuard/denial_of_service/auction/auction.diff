--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/denial_of_service/auction.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/sGuard/denial_of_service/auction/auction.sol
@@ -1,18 +1,29 @@
+contract sGuard{

+  bool internal locked_;

+  constructor() internal {

+    locked_ = false;

+  }

+  modifier nonReentrant_() {

+    require(!locked_);

+    locked_ = true;

+    _;

+    locked_ = false;

+  }

+}

 /*

  * @source: https://github.com/trailofbits/not-so-smart-contracts/blob/master/denial_of_service/auction.sol

  * @author: -

  * @vulnerable_at_lines: 23

  */

 

-pragma solidity ^0.4.15;

 

 //Auction susceptible to DoS attack

-contract DosAuction {

+contract DosAuction  is sGuard {

   address currentFrontrunner;

   uint currentBid;

 

   //Takes in bid, refunding the frontrunner if they are outbid

-  function bid() payable {

+   function bid() nonReentrant_  payable {

     require(msg.value > currentBid);

 

     //If the refund fails, the entire transaction reverts.
