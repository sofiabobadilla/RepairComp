--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/arithmetic/tokensalechallenge.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/sGuard/arithmetic/tokensalechallenge/tokensalechallenge.sol
@@ -1,12 +1,32 @@
+contract sGuard{

+  function mul_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+    if (a == 0) {

+      return 0;

+    }

+    uint256 c = a * b;

+    assert(c / a == b);

+    return c;

+  }

+  

+  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+    uint256 c = a + b;

+    assert(c >= a);

+    return c;

+  }

+  

+  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+    assert(b <= a);

+    return a - b;

+  }

+}

 /*

  * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-101 // https://capturetheether.com/challenges/math/token-sale/

  * @author: Steve Marx

  * @vulnerable_at_lines: 23,25,33

  */

 

-pragma solidity ^0.4.21;

 

-contract TokenSaleChallenge {

+contract TokenSaleChallenge  is sGuard {

     mapping(address => uint256) public balanceOf;

     uint256 constant PRICE_PER_TOKEN = 1 ether;

 

@@ -20,16 +40,16 @@
 

     function buy(uint256 numTokens) public payable {

         // <yes> <report> ARITHMETIC

-        require(msg.value == numTokens * PRICE_PER_TOKEN);

+        require(msg.value == mul_uint256(numTokens, PRICE_PER_TOKEN));

         // <yes> <report> ARITHMETIC

-        balanceOf[msg.sender] += numTokens;

+        balanceOf[msg.sender] = add_uint256(balanceOf[msg.sender], numTokens);

     }

 

     function sell(uint256 numTokens) public {

         require(balanceOf[msg.sender] >= numTokens);

 

-        balanceOf[msg.sender] -= numTokens;

+        balanceOf[msg.sender] = sub_uint256(balanceOf[msg.sender], numTokens);

         // <yes> <report> ARITHMETIC

-        msg.sender.transfer(numTokens * PRICE_PER_TOKEN);

+        msg.sender.transfer(mul_uint256(numTokens, PRICE_PER_TOKEN));

     }

 }
