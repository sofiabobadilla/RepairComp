
> symEvm@1.0.0 dev /sGuard
> node src/index.js "smartbugs/dataset/arithmetic/tokensalechallenge.sol" "results/arithmetic/tokensalechallenge" "TokenSaleChallenge"

smartbugs/dataset/arithmetic/tokensalechallenge.sol
{ bugFixes:
   { '\\my&af>o>bim(3[]<Y&hPYl=!&e': 'mul_uint256(numTokens, PRICE_PER_TOKEN)',
     '0`8"GcF.ETwHU[^`Wl/1z78Ikq*{nz4||]':
      'balanceOf[msg.sender] = add_uint256(balanceOf[msg.sender], numTokens)',
     '9\\UduKClA%,2w96n1nQSBq3u$)ey': 'contract TokenSaleChallenge  is sGuard ',
     '!So]%9H$%&w!zw)cEijP#&3neiiS75[#..':
      'balanceOf[msg.sender] = sub_uint256(balanceOf[msg.sender], numTokens)',
     '@-,8FuOpx<[.4f2{oI!]&i]wmNM': 'mul_uint256(numTokens, PRICE_PER_TOKEN)' },
  source:
   '/*\n * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-101 // https://capturetheether.com/challenges/math/token-sale/\n * @author: Steve Marx\n * @vulnerable_at_lines: 23,25,33\n */\n\n\n9\\UduKClA%,2w96n1nQSBq3u$)ey{\n    mapping(address => uint256) public balanceOf;\n    uint256 constant PRICE_PER_TOKEN = 1 ether;\n\n    function TokenSaleChallenge(address _player) public payable {\n        require(msg.value == 1 ether);\n    }\n\n    function isComplete() public view returns (bool) {\n        return address(this).balance < 1 ether;\n    }\n\n    function buy(uint256 numTokens) public payable {\n        // <yes> <report> ARITHMETIC\n        require(msg.value == @-,8FuOpx<[.4f2{oI!]&i]wmNM);\n        // <yes> <report> ARITHMETIC\n        0`8"GcF.ETwHU[^`Wl/1z78Ikq*{nz4||];\n    }\n\n    function sell(uint256 numTokens) public {\n        require(balanceOf[msg.sender] >= numTokens);\n\n        !So]%9H$%&w!zw)cEijP#&3neiiS75[#..;\n        // <yes> <report> ARITHMETIC\n        msg.sender.transfer(\\my&af>o>bim(3[]<Y&hPYl=!&e);\n    }\n}\n',
  wrappers: Set { 'mul_uint256', 'add_uint256', 'sub_uint256' } }
