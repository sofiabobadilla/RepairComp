
> symEvm@1.0.0 dev /sGuard
> node src/index.js "smartbugs/dataset/unchecked_low_level_calls/etherpot_lotto.sol" "results/unchecked_low_level_calls/etherpot_lotto" "Lotto"

smartbugs/dataset/unchecked_low_level_calls/etherpot_lotto.sol
{ bugFixes:
   { 'x.W8*E[($D3|<f6?Vw>fxJy:P)l5?':
      'rounds[roundIndex].pot = add_uint256(rounds[roundIndex].pot, value)',
     'L-2l#X^ziO`L(+q?o)xUi>,G":%+cZ4d[v"gOb/<>Mt_tWws(\\\\]\\C)ra|rAo=9%':
      'rounds[roundIndex].ticketsCountByBuyer[msg.sender] = add_uint256(rounds[roundIndex].ticketsCountByBuyer[msg.sender], ticketsCount)',
     '#|f??J0\\-a|wA,!5U<<f&Hq~z(p9#|gqbv;;+@=o-UE:P':
      'rounds[roundIndex].ticketsCount = add_uint256(rounds[roundIndex].ticketsCount, ticketsCount)',
     'lO[F[kr=>(yiM,\'': 'sub_uint256(msg.value, value)',
     'sU,wIO:F=h~T2c[j<L*{=vqJ-aYDXp:6G6m5W-*q?cGY9c%$9X':
      'div_uint256(rounds[roundIndex].pot, getSubpotsCount(roundIndex))',
     '(G00XhS03fz7V4<^WAd(]iz&%E;,Xl8~my': 'div_uint256(rounds[roundIndex].pot, blockReward)',
     '>@"I{a}S)Vz=': 'add_uint256(roundIndex, 1)',
     'F-+bCxCQ,5K`8Na.S<mBZ|ol.C(': 'div_uint256(block.number, blocksPerRound)',
     '|V|}AepoEd7j(rN': 'contract Lotto  is sGuard ',
     'YnK1t@clui#EOV."5opZ3`_Ye/G1.:3<}^bzq"}YH`B<d':
      'rounds[roundIndex].ticketsCount = add_uint256(rounds[roundIndex].ticketsCount, ticketsCount)',
     '!puD}.Jlt<i/g*e/N': 'div_uint256(value, ticketPrice)',
     '2{mJL]3#lgq\'PC': '(subpotsCount = add_uint256(subpotsCount, 1))',
     'i4k`AYkFV4iq>C^UpLX`Le`e#VWP}': 'mul_uint256((>@"I{a}S)Vz=), blocksPerRound)',
     '3jj:<$*U(F>5@mZ}#aSdgL;,94|iiUeZQhq?pUhFp*zmLT"K':
      ' function cash(uint roundIndex, uint subpotIndex) nonReentrant_ ',
     'ZFVm~,C\':{^K^N;-_k|H/.O6^[ys&\\X`pC':
      '(rounds[roundIndex].buyers.length = add_uint256(rounds[roundIndex].buyers.length, 1))',
     'Vy30W-Xhn8mjtzE/wZ=z#^R<=k#7N\'M@g$8%2_<ny~W': 'add_uint256((i4k`AYkFV4iq>C^UpLX`Le`e#VWP}), subpotIndex)',
     'M(Rc.TA\\X0C)0[!8c;C7U=8{h!cs&zQ$h': 'sub_uint256(msg.value, (msg.value%ticketPrice))',
     'W#>Bo(gM;V$THmIa}LB_j9d/hZY\'kwOdNu<^IExO<;x+Osq9hY0rm"iS1I':
      'ticketIndex = add_uint256(ticketIndex, rounds[roundIndex].ticketsCountByBuyer[buyer])' },
  source:
   '/*\n * @source: https://github.com/etherpot/contract/blob/master/app/contracts/lotto.sol\n * @author: -\n * @vulnerable_at_lines: 109,141\n */\n\n//added pragma version\n\n |V|}AepoEd7j(rN{\n\n     uint constant public blocksPerRound = 6800;\n     // there are an infinite number of rounds (just like a real lottery that takes place every week). `blocksPerRound` decides how many blocks each round will last. 6800 is around a day.\n\n     uint constant public ticketPrice = 100000000000000000;\n     // the cost of each ticket is .1 ether.\n\n     uint constant public blockReward = 5000000000000000000;\n\n     function getBlocksPerRound() constant returns(uint){ return blocksPerRound; }\n     function getTicketPrice() constant returns(uint){ return ticketPrice; }\n     //accessors for constants\n\n     struct Round {\n         address[] buyers;\n         uint pot;\n         uint ticketsCount;\n         mapping(uint=>bool) isCashed;\n         mapping(address=>uint) ticketsCountByBuyer;\n     }\n     mapping(uint => Round) rounds;\n     //the contract maintains a mapping of rounds. Each round maintains a list of tickets, the total amount of the pot, and whether or not the round was "cashed". "Cashing" is the act of paying out the pot to the winner.\n\n     function getRoundIndex() constant returns (uint){\n         //The round index tells us which round we\'re on. For example if we\'re on block 24, we\'re on round 2. Division in Solidity automatically rounds down, so we don\'t need to worry about decimals.\n\n         return F-+bCxCQ,5K`8Na.S<mBZ|ol.C(;\n     }\n\n     function getIsCashed(uint roundIndex,uint subpotIndex) constant returns (bool){\n         //Determine if a given.\n\n         return rounds[roundIndex].isCashed[subpotIndex];\n     }\n\n\n     function calculateWinner(uint roundIndex, uint subpotIndex) constant returns(address){\n         //note this function only calculates the winners. It does not do any state changes and therefore does not include various validitiy checks\n\n         var decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex);\n\n         if(decisionBlockNumber>block.number)\n             return;\n         //We can\'t decided the winner if the round isn\'t over yet\n\n         var decisionBlockHash = getHashOfBlock(decisionBlockNumber);\n         var winningTicketIndex = decisionBlockHash%rounds[roundIndex].ticketsCount;\n         //We perform a modulus of the blockhash to determine the winner\n\n         var ticketIndex = uint256(0);\n\n         for(var buyerIndex = 0; buyerIndex<rounds[roundIndex].buyers.length; buyerIndex++){\n             var buyer = rounds[roundIndex].buyers[buyerIndex];\n             W#>Bo(gM;V$THmIa}LB_j9d/hZY\'kwOdNu<^IExO<;x+Osq9hY0rm"iS1I;\n\n             if(ticketIndex>winningTicketIndex){\n                 return buyer;\n             }\n         }\n     }\n\n     function getDecisionBlockNumber(uint roundIndex,uint subpotIndex) constant returns (uint){\n         return Vy30W-Xhn8mjtzE/wZ=z#^R<=k#7N\'M@g$8%2_<ny~W;\n     }\n\n     function getSubpotsCount(uint roundIndex) constant returns(uint){\n         var subpotsCount = (G00XhS03fz7V4<^WAd(]iz&%E;,Xl8~my;\n\n         if(rounds[roundIndex].pot%blockReward>0)\n             2{mJL]3#lgq\'PC;\n\n         return subpotsCount;\n     }\n\n     function getSubpot(uint roundIndex) constant returns(uint){\n         return sU,wIO:F=h~T2c[j<L*{=vqJ-aYDXp:6G6m5W-*q?cGY9c%$9X;\n     }\n\n     3jj:<$*U(F>5@mZ}#aSdgL;,94|iiUeZQhq?pUhFp*zmLT"K{\n\n         var subpotsCount = getSubpotsCount(roundIndex);\n\n         if(subpotIndex>=subpotsCount)\n             return;\n\n         var decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex);\n\n         if(decisionBlockNumber>block.number)\n             return;\n\n         if(rounds[roundIndex].isCashed[subpotIndex])\n             return;\n         //Subpots can only be cashed once. This is to prevent double payouts\n\n         var winner = calculateWinner(roundIndex,subpotIndex);\n         var subpot = getSubpot(roundIndex);\n\n         // <yes> <report> UNCHECKED_LL_CALLS\n         winner.send(subpot);\n\n         rounds[roundIndex].isCashed[subpotIndex] = true;\n         //Mark the round as cashed\n     }\n\n     function getHashOfBlock(uint blockIndex) constant returns(uint){\n         return uint(block.blockhash(blockIndex));\n     }\n\n     function getBuyers(uint roundIndex,address buyer) constant returns (address[]){\n         return rounds[roundIndex].buyers;\n     }\n\n     function getTicketsCountByBuyer(uint roundIndex,address buyer) constant returns (uint){\n         return rounds[roundIndex].ticketsCountByBuyer[buyer];\n     }\n\n     function getPot(uint roundIndex) constant returns(uint){\n         return rounds[roundIndex].pot;\n     }\n\n     function() {\n         //this is the function that gets called when people send money to the contract.\n\n         var roundIndex = getRoundIndex();\n         var value = M(Rc.TA\\X0C)0[!8c;C7U=8{h!cs&zQ$h;\n\n         if(value==0) return;\n\n         if(value<msg.value){\n             // <yes> <report> UNCHECKED_LL_CALLS\n             msg.sender.send(lO[F[kr=>(yiM,\');\n         }\n         //no partial tickets, send a partial refund\n\n         var ticketsCount = !puD}.Jlt<i/g*e/N;\n         #|f??J0\\-a|wA,!5U<<f&Hq~z(p9#|gqbv;;+@=o-UE:P;\n\n         if(rounds[roundIndex].ticketsCountByBuyer[msg.sender]==0){\n             var buyersLength = ZFVm~,C\':{^K^N;-_k|H/.O6^[ys&\\X`pC;\n             rounds[roundIndex].buyers[buyersLength] = msg.sender;\n         }\n\n         L-2l#X^ziO`L(+q?o)xUi>,G":%+cZ4d[v"gOb/<>Mt_tWws(\\\\]\\C)ra|rAo=9%;\n         YnK1t@clui#EOV."5opZ3`_Ye/G1.:3<}^bzq"}YH`B<d;\n         //keep track of the total tickets\n\n         x.W8*E[($D3|<f6?Vw>fxJy:P)l5?;\n         //keep track of the total pot\n\n     }\n\n }\n',
  wrappers:
   Set {
     'add_uint256',
     'sub_uint256',
     'div_uint256',
     'mul_uint256',
     'nonReentrant_' } }
