--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/unchecked_low_level_calls/etherpot_lotto.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/sGuard/unchecked_low_level_calls/etherpot_lotto/etherpot_lotto.sol
@@ -1,3 +1,40 @@
+contract sGuard{

+  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+    uint256 c = a + b;

+    assert(c >= a);

+    return c;

+  }

+  

+  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+    assert(b <= a);

+    return a - b;

+  }

+  

+  function div_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+    uint256 c = a / b;

+    return c;

+  }

+  

+  function mul_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+    if (a == 0) {

+      return 0;

+    }

+    uint256 c = a * b;

+    assert(c / a == b);

+    return c;

+  }

+  

+  bool internal locked_;

+  constructor() internal {

+    locked_ = false;

+  }

+  modifier nonReentrant_() {

+    require(!locked_);

+    locked_ = true;

+    _;

+    locked_ = false;

+  }

+}

 /*

  * @source: https://github.com/etherpot/contract/blob/master/app/contracts/lotto.sol

  * @author: -

@@ -5,9 +42,8 @@
  */

 

 //added pragma version

-pragma solidity ^0.4.0;

 

- contract Lotto {

+ contract Lotto  is sGuard {

 

      uint constant public blocksPerRound = 6800;

      // there are an infinite number of rounds (just like a real lottery that takes place every week). `blocksPerRound` decides how many blocks each round will last. 6800 is around a day.

@@ -34,7 +70,7 @@
      function getRoundIndex() constant returns (uint){

          //The round index tells us which round we're on. For example if we're on block 24, we're on round 2. Division in Solidity automatically rounds down, so we don't need to worry about decimals.

 

-         return block.number/blocksPerRound;

+         return div_uint256(block.number, blocksPerRound);

      }

 

      function getIsCashed(uint roundIndex,uint subpotIndex) constant returns (bool){

@@ -61,7 +97,7 @@
 

          for(var buyerIndex = 0; buyerIndex<rounds[roundIndex].buyers.length; buyerIndex++){

              var buyer = rounds[roundIndex].buyers[buyerIndex];

-             ticketIndex+=rounds[roundIndex].ticketsCountByBuyer[buyer];

+             ticketIndex = add_uint256(ticketIndex, rounds[roundIndex].ticketsCountByBuyer[buyer]);

 

              if(ticketIndex>winningTicketIndex){

                  return buyer;

@@ -70,23 +106,23 @@
      }

 

      function getDecisionBlockNumber(uint roundIndex,uint subpotIndex) constant returns (uint){

-         return ((roundIndex+1)*blocksPerRound)+subpotIndex;

+         return add_uint256((mul_uint256((add_uint256(roundIndex, 1)), blocksPerRound)), subpotIndex);

      }

 

      function getSubpotsCount(uint roundIndex) constant returns(uint){

-         var subpotsCount = rounds[roundIndex].pot/blockReward;

+         var subpotsCount = div_uint256(rounds[roundIndex].pot, blockReward);

 

          if(rounds[roundIndex].pot%blockReward>0)

-             subpotsCount++;

+             (subpotsCount = add_uint256(subpotsCount, 1));

 

          return subpotsCount;

      }

 

      function getSubpot(uint roundIndex) constant returns(uint){

-         return rounds[roundIndex].pot/getSubpotsCount(roundIndex);

+         return div_uint256(rounds[roundIndex].pot, getSubpotsCount(roundIndex));

      }

 

-     function cash(uint roundIndex, uint subpotIndex){

+      function cash(uint roundIndex, uint subpotIndex) nonReentrant_ {

 

          var subpotsCount = getSubpotsCount(roundIndex);

 

@@ -132,29 +168,29 @@
          //this is the function that gets called when people send money to the contract.

 

          var roundIndex = getRoundIndex();

-         var value = msg.value-(msg.value%ticketPrice);

+         var value = sub_uint256(msg.value, (msg.value%ticketPrice));

 

          if(value==0) return;

 

          if(value<msg.value){

              // <yes> <report> UNCHECKED_LL_CALLS

-             msg.sender.send(msg.value-value);

+             msg.sender.send(sub_uint256(msg.value, value));

          }

          //no partial tickets, send a partial refund

 

-         var ticketsCount = value/ticketPrice;

-         rounds[roundIndex].ticketsCount+=ticketsCount;

+         var ticketsCount = div_uint256(value, ticketPrice);

+         rounds[roundIndex].ticketsCount = add_uint256(rounds[roundIndex].ticketsCount, ticketsCount);

 

          if(rounds[roundIndex].ticketsCountByBuyer[msg.sender]==0){

-             var buyersLength = rounds[roundIndex].buyers.length++;

+             var buyersLength = (rounds[roundIndex].buyers.length = add_uint256(rounds[roundIndex].buyers.length, 1));

              rounds[roundIndex].buyers[buyersLength] = msg.sender;

          }

 

-         rounds[roundIndex].ticketsCountByBuyer[msg.sender]+=ticketsCount;

-         rounds[roundIndex].ticketsCount+=ticketsCount;

+         rounds[roundIndex].ticketsCountByBuyer[msg.sender] = add_uint256(rounds[roundIndex].ticketsCountByBuyer[msg.sender], ticketsCount);

+         rounds[roundIndex].ticketsCount = add_uint256(rounds[roundIndex].ticketsCount, ticketsCount);

          //keep track of the total tickets

 

-         rounds[roundIndex].pot+=value;

+         rounds[roundIndex].pot = add_uint256(rounds[roundIndex].pot, value);

          //keep track of the total pot

 

      }
