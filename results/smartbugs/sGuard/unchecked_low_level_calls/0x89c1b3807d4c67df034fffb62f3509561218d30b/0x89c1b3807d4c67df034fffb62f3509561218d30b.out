
> symEvm@1.0.0 dev /sGuard
> node src/index.js "smartbugs/dataset/unchecked_low_level_calls/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol" "results/unchecked_low_level_calls/0x89c1b3807d4c67df034fffb62f3509561218d30b" "TownCrier"

smartbugs/dataset/unchecked_low_level_calls/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol
{ bugFixes:
   { 'lGUZ:0e8?!$el&c>qe-~@_': 'sub_uint256(fee, CANCELLATION_FEE)',
     'O|)/sa]w-V4V8i': 'sub_uint256(msg.gas, 5000)',
     'Z(A6_S&)r)[)W': 'sub_uint256(fee, MIN_FEE)',
     '`o!+C`[hkNn.x5me': '(unrespondedCnt = sub_uint64(unrespondedCnt, 1))',
     '9(Ll9oNwU"OK': '(requestCnt = add_uint64(requestCnt, 1))',
     'Qvm`HDeHyjrG_>': 'mul_uint256(price, minGas)',
     'Y$V^|iLID~\'pE=$T95': ' function restart() nonReentrant_ ',
     '$SP6*o9eJ!X+)#*rO2ZC?^Hm(c3h\'n?m+,ii1?xrpX5].8GYVN6_E`,%mb!^pb%L_a%-ZGkA8i\\gC#/]tR@2t&':
      ' function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respData) nonReentrant_ ',
     '}LKF=EH&fb*bE}%uL~)J&n_p/F=0)YWvdr3;C>.UE8PyV_$Z,D**_3u*KyaPyrPrh\\):/1?sW8bN:Q5vO.wx\'Ms\'P2;9us%btT!_8o4y1p}p;suSAuo+':
      ' function request(uint8 requestType, address callbackAddr, bytes4 callbackFID, uint timestamp, bytes32[] requestData) nonReentrant_ ',
     'F2Pb~iLQG8D(t>;UXl$': 'contract TownCrier  is sGuard ',
     '_M032!?Kr6&K`w': 'sub_uint256(msg.gas, 5000)',
     'O_1XC<\\)%68hsrz`': '(unrespondedCnt = sub_uint64(unrespondedCnt, 1))',
     'k[NFq%}QwKf\'tiEA\\))~UI{': 'mul_uint256(price, cancellationGas)',
     '-$.3^,W9QcgSJ~_J"PYwXhI_05g>I)jTH,Wv=&~&G:-n4gC\'zlaJdw8~6{&[7':
      ' function reset(uint price, uint minGas, uint cancellationGas) nonReentrant_ ',
     'Be`3B$eO*.@|mS===B': ' function suspend() nonReentrant_ ',
     'rm$P`],A6|vkn&?Th;b="E\'oCVR-3': 'div_uint256((Z(A6_S&)r)[)W), tx.gasprice)',
     'zlOV^:yG[\\]A"o\\"Zya^s7%R*3@epL/@Q': ' function upgrade(address newAddr) nonReentrant_ ',
     'sXaat\'^;wu*v:K-N': '(unrespondedCnt = add_uint64(unrespondedCnt, 1))',
     'Ff44`CYsE|1lQ8cz>S_$43&U~dS^U3:eD': ' function cancel(uint64 requestId) nonReentrant_ ' },
  source:
   '/*\n * @source: etherscan.io \n * @author: -\n * @vulnerable_at_lines: 162,175,180,192\n */\n\n\nF2Pb~iLQG8D(t>;UXl${\n    struct Request { // the data structure for each request\n        address requester; // the address of the requester\n        uint fee; // the amount of wei the requester pays for the request\n        address callbackAddr; // the address of the contract to call for delivering response\n        bytes4 callbackFID; // the specification of the callback function\n        bytes32 paramsHash; // the hash of the request parameters\n    }\n   \n    event Upgrade(address newAddr);\n    event Reset(uint gas_price, uint min_fee, uint cancellation_fee); \n    event RequestInfo(uint64 id, uint8 requestType, address requester, uint fee, address callbackAddr, bytes32 paramsHash, uint timestamp, bytes32[] requestData); // log of requests, the Town Crier server watches this event and processes requests\n    event DeliverInfo(uint64 requestId, uint fee, uint gasPrice, uint gasLeft, uint callbackGas, bytes32 paramsHash, uint64 error, bytes32 respData); // log of responses\n    event Cancel(uint64 requestId, address canceller, address requester, uint fee, int flag); // log of cancellations\n\n    address public constant SGX_ADDRESS = 0x18513702cCd928F2A3eb63d900aDf03c9cc81593;// address of the SGX account\n\n    uint public GAS_PRICE = 5 * 10**10;\n    uint public MIN_FEE = 30000 * GAS_PRICE; // minimum fee required for the requester to pay such that SGX could call deliver() to send a response\n    uint public CANCELLATION_FEE = 25000 * GAS_PRICE; // charged when the requester cancels a request that is not responded\n\n    uint public constant CANCELLED_FEE_FLAG = 1;\n    uint public constant DELIVERED_FEE_FLAG = 0;\n    int public constant FAIL_FLAG = -2 ** 250;\n    int public constant SUCCESS_FLAG = 1;\n\n    bool public killswitch;\n\n    bool public externalCallFlag;\n\n    uint64 public requestCnt;\n    uint64 public unrespondedCnt;\n    Request[2**64] public requests;\n\n    int public newVersion = 0;\n\n    // Contracts that receive Ether but do not define a fallback function throw\n    // an exception, sending back the Ether (this was different before Solidity\n    // v0.4.0). So if you want your contract to receive Ether, you have to\n    // implement a fallback function.\n    function () {}\n\n    function TownCrier() public {\n        // Start request IDs at 1 for two reasons:\n        //   1. We can use 0 to denote an invalid request (ids are unsigned)\n        //   2. Storage is more expensive when changing something from zero to non-zero,\n        //      so this means the first request isn\'t randomly more expensive.\n        requestCnt = 1;\n        requests[0].requester = msg.sender;\n        killswitch = false;\n        unrespondedCnt = 0;\n        externalCallFlag = false;\n    }\n\n    zlOV^:yG[\\]A"o\\"Zya^s7%R*3@epL/@Q {\n        if (msg.sender == requests[0].requester && unrespondedCnt == 0) {\n            newVersion = -int(newAddr);\n            killswitch = true;\n            Upgrade(newAddr);\n        }\n    }\n\n    -$.3^,W9QcgSJ~_J"PYwXhI_05g>I)jTH,Wv=&~&G:-n4gC\'zlaJdw8~6{&[7 public {\n        if (msg.sender == requests[0].requester && unrespondedCnt == 0) {\n            GAS_PRICE = price;\n            MIN_FEE = Qvm`HDeHyjrG_>;\n            CANCELLATION_FEE = k[NFq%}QwKf\'tiEA\\))~UI{;\n            Reset(GAS_PRICE, MIN_FEE, CANCELLATION_FEE);\n        }\n    }\n\n    Be`3B$eO*.@|mS===B public {\n        if (msg.sender == requests[0].requester) {\n            killswitch = true;\n        }\n    }\n\n    Y$V^|iLID~\'pE=$T95 public {\n        if (msg.sender == requests[0].requester && newVersion == 0) {\n            killswitch = false;\n        }\n    }\n\n    function withdraw() public {\n        if (msg.sender == requests[0].requester && unrespondedCnt == 0) {\n            if (!requests[0].requester.call.value(this.balance)()) {\n                throw;\n            }\n        }\n    }\n\n    }LKF=EH&fb*bE}%uL~)J&n_p/F=0)YWvdr3;C>.UE8PyV_$Z,D**_3u*KyaPyrPrh\\):/1?sW8bN:Q5vO.wx\'Ms\'P2;9us%btT!_8o4y1p}p;suSAuo+ public payable returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n\n        if (killswitch) {\n            externalCallFlag = true;\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return newVersion;\n        }\n\n        if (msg.value < MIN_FEE) {\n            externalCallFlag = true;\n            // If the amount of ether sent by the requester is too little or \n            // too much, refund the requester and discard the request.\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return FAIL_FLAG;\n        } else {\n            // Record the request.\n            uint64 requestId = requestCnt;\n            9(Ll9oNwU"OK;\n            sXaat\'^;wu*v:K-N;\n\n            bytes32 paramsHash = sha3(requestType, requestData);\n            requests[requestId].requester = msg.sender;\n            requests[requestId].fee = msg.value;\n            requests[requestId].callbackAddr = callbackAddr;\n            requests[requestId].callbackFID = callbackFID;\n            requests[requestId].paramsHash = paramsHash;\n\n            // Log the request for the Town Crier server to process.\n            RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\n            return requestId;\n        }\n    }\n\n    $SP6*o9eJ!X+)#*rO2ZC?^Hm(c3h\'n?m+,ii1?xrpX5].8GYVN6_E`,%mb!^pb%L_a%-ZGkA8i\\gC#/]tR@2t& public {\n        if (msg.sender != SGX_ADDRESS ||\n                requestId <= 0 ||\n                requests[requestId].requester == 0 ||\n                requests[requestId].fee == DELIVERED_FEE_FLAG) {\n            // If the response is not delivered by the SGX account or the \n            // request has already been responded to, discard the response.\n            return;\n        }\n\n        uint fee = requests[requestId].fee;\n        if (requests[requestId].paramsHash != paramsHash) {\n            // If the hash of request parameters in the response is not \n            // correct, discard the response for security concern.\n            return;\n        } else if (fee == CANCELLED_FEE_FLAG) {\n            // If the request is cancelled by the requester, cancellation \n            // fee goes to the SGX account and set the request as having\n            // been responded to.\n            // <yes> <report> UNCHECKED_LL_CALLS\n            SGX_ADDRESS.send(CANCELLATION_FEE);\n            requests[requestId].fee = DELIVERED_FEE_FLAG;\n            `o!+C`[hkNn.x5me;\n            return;\n        }\n\n        requests[requestId].fee = DELIVERED_FEE_FLAG;\n        O_1XC<\\)%68hsrz`;\n\n        if (error < 2) {\n            // Either no error occurs, or the requester sent an invalid query.\n            // Send the fee to the SGX account for its delivering.\n            // <yes> <report> UNCHECKED_LL_CALLS\n            SGX_ADDRESS.send(fee);         \n        } else {\n            // Error in TC, refund the requester.\n            externalCallFlag = true;\n            // <yes> <report> UNCHECKED_LL_CALLS\n            requests[requestId].requester.call.gas(2300).value(fee)();\n            externalCallFlag = false;\n        }\n\n        uint callbackGas = rm$P`],A6|vkn&?Th;b="E\'oCVR-3; // gas left for the callback function\n        DeliverInfo(requestId, fee, tx.gasprice, msg.gas, callbackGas, paramsHash, error, respData); // log the response information\n        if (callbackGas > O|)/sa]w-V4V8i) {\n            callbackGas = _M032!?Kr6&K`w;\n        }\n        \n        externalCallFlag = true;\n        // <yes> <report> UNCHECKED_LL_CALLS\n        requests[requestId].callbackAddr.call.gas(callbackGas)(requests[requestId].callbackFID, requestId, error, respData); // call the callback function in the application contract\n        externalCallFlag = false;\n    }\n\n    Ff44`CYsE|1lQ8cz>S_$43&U~dS^U3:eD public returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n\n        if (killswitch) {\n            return 0;\n        }\n\n        uint fee = requests[requestId].fee;\n        if (requests[requestId].requester == msg.sender && fee >= CANCELLATION_FEE) {\n            // If the request was sent by this user and has money left on it,\n            // then cancel it.\n            requests[requestId].fee = CANCELLED_FEE_FLAG;\n            externalCallFlag = true;\n            if (!msg.sender.call.value(lGUZ:0e8?!$el&c>qe-~@_)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            Cancel(requestId, msg.sender, requests[requestId].requester, requests[requestId].fee, 1);\n            return SUCCESS_FLAG;\n        } else {\n            Cancel(requestId, msg.sender, requests[requestId].requester, fee, -1);\n            return FAIL_FLAG;\n        }\n    }\n}',
  wrappers:
   Set {
     'sub_uint256',
     'sub_uint64',
     'add_uint64',
     'mul_uint256',
     'nonReentrant_',
     'div_uint256' } }
