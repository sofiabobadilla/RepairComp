--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/unchecked_low_level_calls/0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/sGuard/unchecked_low_level_calls/0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7/0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol
@@ -1,10 +1,27 @@
+contract sGuard{

+  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {

+    uint256 c = a + b;

+    assert(c >= a);

+    return c;

+  }

+  

+  bool internal locked_;

+  constructor() internal {

+    locked_ = false;

+  }

+  modifier nonReentrant_() {

+    require(!locked_);

+    locked_ = true;

+    _;

+    locked_ = false;

+  }

+}

 /*

  * @source: etherscan.io 

  * @author: -

  * @vulnerable_at_lines: 25

  */

 

-pragma solidity ^0.4.23;

 

 /*

 !!! THIS CONTRACT IS EXPLOITABLE AND FOR EDUCATIONAL PURPOSES ONLY !!!

@@ -13,14 +30,14 @@
 in this smart contract and withdraw them at any later point in time

 */

 

-contract keepMyEther {

+contract keepMyEther  is sGuard {

     mapping(address => uint256) public balances;

     

     function () payable public {

-        balances[msg.sender] += msg.value;

+        balances[msg.sender] = add_uint256(balances[msg.sender], msg.value);

     }

     

-    function withdraw() public {

+     function withdraw() nonReentrant_  public {

         // <yes> <report> UNCHECKED_LL_CALLS

         msg.sender.call.value(balances[msg.sender])();

         balances[msg.sender] = 0;
