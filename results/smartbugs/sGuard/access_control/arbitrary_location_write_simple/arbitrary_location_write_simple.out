
> symEvm@1.0.0 dev /sGuard
> node src/index.js "smartbugs/dataset/access_control/arbitrary_location_write_simple.sol" "results/access_control/arbitrary_location_write_simple" "Wallet"

smartbugs/dataset/access_control/arbitrary_location_write_simple.sol
{ bugFixes: {},
  source:
   '/*\n * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-124#arbitrary-location-write-simplesol\n * @author: Suhabe Bugrara\n * @vulnerable_at_lines: 27\n */\n\n\n contract Wallet {\n     uint[] private bonusCodes;\n     address private owner;\n\n     constructor() public {\n         bonusCodes = new uint[](0);\n         owner = msg.sender;\n     }\n\n     function () public payable {\n     }\n\n     function PushBonusCode(uint c) public {\n         bonusCodes.push(c);\n     }\n\n     function PopBonusCode() public {\n         // <yes> <report> ACCESS_CONTROL\n         require(0 <= bonusCodes.length); // this condition is always true since array lengths are unsigned\n         bonusCodes.length--; // an underflow can be caused here\n     }\n\n     function UpdateBonusCodeAt(uint idx, uint c) public {\n         require(idx < bonusCodes.length);\n         bonusCodes[idx] = c; // write to any index less than bonusCodes.length\n     }\n\n     function Destroy() public {\n         require(msg.sender == owner);\n         selfdestruct(msg.sender);\n     }\n }\n',
  wrappers: Set {} }
