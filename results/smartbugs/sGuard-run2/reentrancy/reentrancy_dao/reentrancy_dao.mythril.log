==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ReentrancyDAO
Function name: withdrawAll()
PC address: 301
Estimated Gas Usage: 25384 - 141035
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ../results/smartbugs/sGuard/reentrancy/reentrancy_dao/reentrancy_dao.sol:35

msg.sender.call.value(oCredit)()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x1
Caller: [ATTACKER], function: withdrawAll(), txdata: 0x853828b6, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: ReentrancyDAO
Function name: withdrawAll()
PC address: 301
Estimated Gas Usage: 25384 - 141035
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ../results/smartbugs/sGuard/reentrancy/reentrancy_dao/reentrancy_dao.sol:35

msg.sender.call.value(oCredit)()

--------------------
Initial State:

Account: [CREATOR], balance: 0x500004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x1
Caller: [ATTACKER], function: withdrawAll(), txdata: 0x853828b6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ReentrancyDAO
Function name: withdrawAll()
PC address: 387
Estimated Gas Usage: 25384 - 141035
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ../results/smartbugs/sGuard/reentrancy/reentrancy_dao/reentrancy_dao.sol:37

credit[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0xa0000040002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x1
Caller: [ATTACKER], function: withdrawAll(), txdata: 0x853828b6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ReentrancyDAO
Function name: withdrawAll()
PC address: 400
Estimated Gas Usage: 25384 - 141035
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ../results/smartbugs/sGuard/reentrancy/reentrancy_dao/reentrancy_dao.sol:16

locked_ = false

--------------------
Initial State:

Account: [CREATOR], balance: 0xa0000040002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x1
Caller: [ATTACKER], function: withdrawAll(), txdata: 0x853828b6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ReentrancyDAO
Function name: withdrawAll()
PC address: 414
Estimated Gas Usage: 25384 - 141035
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ../results/smartbugs/sGuard/reentrancy/reentrancy_dao/reentrancy_dao.sol:16

locked_ = false

--------------------
Initial State:

Account: [CREATOR], balance: 0xa0000040002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x1
Caller: [ATTACKER], function: withdrawAll(), txdata: 0x853828b6, value: 0x0


