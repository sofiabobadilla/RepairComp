
> symEvm@1.0.0 dev /sGuard
> node src/index.js "patches/reentrancy/0xf015c35649c82f5467c9c74b7f28ee67665aad68/0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol" "report_run/reentrancy/0xf015c35649c82f5467c9c74b7f28ee67665aad68" "MY_BANK"

patches/reentrancy/0xf015c35649c82f5467c9c74b7f28ee67665aad68/0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol
{ bugFixes:
   { '-N!VF': 'add_uint256(a, b)',
     '$,9C(u1|CF@{?][_6X]-R(\\}*1': ' function Collect(uint _am) nonReentrant_ ',
     '0*+<hQcOPS1;|T:p%=gYCt%~>': 'contract Log \n is sGuard  is sGuard ',
     '^1wN#VVgAyr6C]e': 'contract sGuard is sGuard ',
     mSuPB: 'sub_uint256(a, b)',
     'wYiP+V+s;#XE2Plcq~31)-[oe~p\'': 'contract MY_BANK\n is sGuard  is sGuard ',
     'u5W0s%xd23opg?lI\'R<gNVVeNWxIso': ' function Put(uint _unlockTime) nonReentrant_ ' },
  source:
   '^1wN#VVgAyr6C]e{\n  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return mSuPB;\n  }\n  \n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n  \n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = -N!VF;\n    assert(c >= a);\n    return c;\n  }\n}\n/*\n * @source: etherscan.io \n * @author: -\n * @vulnerable_at_lines: 29\n */\n\n\nwYiP+V+s;#XE2Plcq~31)-[oe~p\'{\n     u5W0s%xd23opg?lI\'R<gNVVeNWxIso nonReentrant_ \n    public\n    payable\n    {\n        var acc = Acc[msg.sender];\n        acc.balance = add_uint256(acc.balance, msg.value);\n        acc.unlockTime = _unlockTime>now?_unlockTime:now;\n        LogFile.AddMessage(msg.sender,msg.value,"Put");\n    }\n\n     $,9C(u1|CF@{?][_6X]-R(\\}*1 nonReentrant_ \n    public\n    payable\n    {\n        var acc = Acc[msg.sender];\n        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)\n        {\n            // <yes> <report> REENTRANCY\n            if(msg.sender.call.value(_am)())\n            {\n                acc.balance = sub_uint256(acc.balance, _am);\n                LogFile.AddMessage(msg.sender,_am,"Collect");\n            }\n        }\n    }\n\n    function() \n    public \n    payable\n    {\n        Put(0);\n    }\n\n    struct Holder   \n    {\n        uint unlockTime;\n        uint balance;\n    }\n\n    mapping (address => Holder) public Acc;\n\n    Log LogFile;\n\n    uint public MinSum = 1 ether;    \n\n    function MY_BANK(address log) public{\n        LogFile = Log(log);\n    }\n}\n\n\n0*+<hQcOPS1;|T:p%=gYCt%~>{\n    struct Message\n    {\n        address Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }\n\n    Message[] public History;\n\n    Message LastMsg;\n\n    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}',
  wrappers: Set { 'add_uint256', 'nonReentrant_', 'sub_uint256' } }
