
> symEvm@1.0.0 dev /sGuard
> node src/index.js "patches/reentrancy/0x941d225236464a25eb18076df7da6a91d0f95e9e/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol" "report_run/reentrancy/0x941d225236464a25eb18076df7da6a91d0f95e9e" "ETH_FUND"

patches/reentrancy/0x941d225236464a25eb18076df7da6a91d0f95e9e/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol
{ bugFixes:
   { 'pX/Q&': 'add_uint256(a, b)',
     '@W,`gn1R\\>jKIcyhg]uw:_8-Ws': ' function CashOut(uint _am) nonReentrant_ ',
     'P>xO,dWO1)1g.OVa8>qOyLw0R': 'contract Log \n is sGuard  is sGuard ',
     'ya@O(AA?g|/\'j+O': 'contract sGuard is sGuard ',
     'Vy@9d': 'sub_uint256(a, b)',
     'GkO;hYfA]=^|Yj(2vANUA_t^JG=N;': 'contract ETH_FUND\n is sGuard  is sGuard ',
     'o{Ir]t9Ik|[!"kOnL{': ' function Deposit() nonReentrant_ ' },
  source:
   'ya@O(AA?g|/\'j+O{\n  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return Vy@9d;\n  }\n  \n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n  \n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = pX/Q&;\n    assert(c >= a);\n    return c;\n  }\n}\n/*\n * @source: etherscan.io \n * @author: -\n * @vulnerable_at_lines: 44\n */\n\n\nGkO;hYfA]=^|Yj(2vANUA_t^JG=N;{\n    mapping (address => uint) public balances;\n    \n    uint public MinDeposit = 1 ether;\n    \n    Log TransferLog;\n    \n    uint lastBlock;\n    \n    function ETH_FUND(address _log)\n    public \n    {\n        TransferLog = Log(_log);\n    }\n    \n     o{Ir]t9Ik|[!"kOnL{ nonReentrant_ \n    public\n    payable\n    {\n        if(msg.value > MinDeposit)\n        {\n            balances[msg.sender] = add_uint256(balances[msg.sender], msg.value);\n            TransferLog.AddMessage(msg.sender,msg.value,"Deposit");\n            lastBlock = block.number;\n        }\n    }\n    \n     @W,`gn1R\\>jKIcyhg]uw:_8-Ws nonReentrant_ \n    public\n    payable\n    {\n        if(_am<=balances[msg.sender]&&block.number>lastBlock)\n        {\n            // <yes> <report> REENTRANCY\n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender] = sub_uint256(balances[msg.sender], _am);\n                TransferLog.AddMessage(msg.sender,_am,"CashOut");\n            }\n        }\n    }\n    \n    function() public payable{}    \n    \n}\n\nP>xO,dWO1)1g.OVa8>qOyLw0R{\n   \n    struct Message\n    {\n        address Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }\n    \n    Message[] public History;\n    \n    Message LastMsg;\n    \n    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}',
  wrappers: Set { 'add_uint256', 'nonReentrant_', 'sub_uint256' } }
