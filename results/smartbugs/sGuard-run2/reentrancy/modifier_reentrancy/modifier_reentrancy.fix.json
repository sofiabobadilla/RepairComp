{"bugFixes":{"\"Yj|V":"add_uint256(a, b)","\"T2Vz~~_\\;`ZBiK?3e":"contract attack is sGuard, ","~/_|f64r]5+<pU[=A}rRf<U3M?%1vKW:PQw*X":"contract ModifierEntrancy  is sGuard  is sGuard ","w1\"lk<8YUZp0!1V\\u(":" function airDrop() nonReentrant_ ","1qwY1h;pIc@V&{,":"contract sGuard is sGuard ","LVI>sB(3MTyqCvK~":"contract Bank is sGuard, "},"source":"1qwY1h;pIc@V&{,{\n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = \"Yj|V;\n    assert(c >= a);\n    return c;\n  }\n  \n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n}\n/*\n * @source: https://github.com/SmartContractSecurity/SWC-registry/blob/master/test_cases/reentracy/modifier_reentrancy.sol\n * @author: - \n * @vulnerable_at_lines: 15\n */\n\n\n~/_|f64r]5+<pU[=A}rRf<U3M?%1vKW:PQw*X{\n  mapping (address => uint) public tokenBalance;\n  string constant name = \"Nu Token\";\n\n  //If a contract has a zero balance and supports the token give them some token\n  // <yes> <report> REENTRANCY\n   w1\"lk<8YUZp0!1V\\u( nonReentrant_  hasNoBalance supportsToken  public{\n    tokenBalance[msg.sender] = add_uint256(tokenBalance[msg.sender], 20);\n  }\n\n  //Checks that the contract responds the way we want\n  modifier supportsToken() {\n    require(keccak256(abi.encodePacked(\"Nu Token\")) == Bank(msg.sender).supportsToken());\n    _;\n  }\n  //Checks that the caller has a zero balance\n  modifier hasNoBalance {\n      require(tokenBalance[msg.sender] == 0);\n      _;\n  }\n}\n\nLVI>sB(3MTyqCvK~ sGuard {\n    function supportsToken() external pure returns(bytes32){\n        return(keccak256(abi.encodePacked(\"Nu Token\")));\n    }\n}\n\n\"T2Vz~~_\\;`ZBiK?3e sGuard { //An example of a contract that breaks the contract above.\n    bool hasBeenCalled;\n    function supportsToken() external returns(bytes32){\n        if(!hasBeenCalled){\n            hasBeenCalled = true;\n            ModifierEntrancy(msg.sender).airDrop();\n        }\n        return(keccak256(abi.encodePacked(\"Nu Token\")));\n    }\n    function call(address token) public{\n        ModifierEntrancy(token).airDrop();\n    }\n}\n","wrappers":{}}