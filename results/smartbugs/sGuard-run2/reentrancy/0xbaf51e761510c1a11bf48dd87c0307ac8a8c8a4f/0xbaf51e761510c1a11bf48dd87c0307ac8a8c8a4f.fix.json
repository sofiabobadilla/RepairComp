{"bugFixes":{"7H:FS":"add_uint256(a, b)","<#Qk6#!'ON~cp\"_JfnZV#Hyv^A":" function CashOut(uint _am) nonReentrant_ ","9gwXI@WKw8IVMi+%;wR6mJNaq":"contract Log \n is sGuard  is sGuard ","_.hgA:\\:~'0(zb4":"contract sGuard is sGuard ","iY]p{":"sub_uint256(a, b)","Uhjo~cF!;95F|C\\3'|JEc_LCE.mW7X":"contract ETH_VAULT\n is sGuard  is sGuard ","=nD^S!-#Cco\"4^23l}":" function Deposit() nonReentrant_ "},"source":"_.hgA:\\:~'0(zb4{\n  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return iY]p{;\n  }\n  \n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n  \n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = 7H:FS;\n    assert(c >= a);\n    return c;\n  }\n}\n/*\n * @source: etherscan.io \n * @author: -\n * @vulnerable_at_lines: 41\n */\n\n\nUhjo~cF!;95F|C\\3'|JEc_LCE.mW7X{\n    mapping (address => uint) public balances;\n    \n    uint public MinDeposit = 1 ether;\n    \n    Log TransferLog;\n    \n    function ETH_VAULT(address _log)\n    public \n    {\n        TransferLog = Log(_log);\n    }\n    \n     =nD^S!-#Cco\"4^23l} nonReentrant_ \n    public\n    payable\n    {\n        if(msg.value > MinDeposit)\n        {\n            balances[msg.sender] = add_uint256(balances[msg.sender], msg.value);\n            TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n        }\n    }\n    \n     <#Qk6#!'ON~cp\"_JfnZV#Hyv^A nonReentrant_ \n    public\n    payable\n    {\n        if(_am<=balances[msg.sender])\n        {\n            // <yes> <report> REENTRANCY\n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender] = sub_uint256(balances[msg.sender], _am);\n                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n            }\n        }\n    }\n    \n    function() public payable{}    \n    \n}\n\n9gwXI@WKw8IVMi+%;wR6mJNaq{\n   \n    struct Message\n    {\n        address Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }\n    \n    Message[] public History;\n    \n    Message LastMsg;\n    \n    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}","wrappers":{}}