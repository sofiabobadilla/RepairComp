
> symEvm@1.0.0 dev /sGuard
> node src/index.js "patches/reentrancy/0x8c7777c45481dba411450c228cb692ac3d550344/0x8c7777c45481dba411450c228cb692ac3d550344.sol" "report_run/reentrancy/0x8c7777c45481dba411450c228cb692ac3d550344" "ETH_VAULT"

patches/reentrancy/0x8c7777c45481dba411450c228cb692ac3d550344/0x8c7777c45481dba411450c228cb692ac3d550344.sol
{ bugFixes:
   { '9V8S]': 'add_uint256(a, b)',
     '#B"YB0|OMX8HuV~Y91y{sk^i?P': ' function CashOut(uint _am) nonReentrant_ ',
     'Arv>g6b<}^%DjbStBE!{0q0zU': 'contract Log \n is sGuard  is sGuard ',
     '-V/Jr_$~zndAep&': 'contract sGuard is sGuard ',
     '.sg\\8': 'sub_uint256(a, b)',
     '6|,cYo9~2bFl&IMS,xJc"a2RD48u;;': 'contract ETH_VAULT\n is sGuard  is sGuard ',
     '^fuq2\\qJnGMMv1^&T/': ' function Deposit() nonReentrant_ ' },
  source:
   '-V/Jr_$~zndAep&{\n  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return .sg\\8;\n  }\n  \n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n  \n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = 9V8S];\n    assert(c >= a);\n    return c;\n  }\n}\n/*\n * @source: etherscan.io \n * @author: -\n * @vulnerable_at_lines: 41\n */\n \n\n6|,cYo9~2bFl&IMS,xJc"a2RD48u;;{\n    mapping (address => uint) public balances;\n    \n    Log TransferLog;\n    \n    uint public MinDeposit = 1 ether;\n    \n    function ETH_VAULT(address _log)\n    public \n    {\n        TransferLog = Log(_log);\n    }\n    \n     ^fuq2\\qJnGMMv1^&T/ nonReentrant_ \n    public\n    payable\n    {\n        if(msg.value > MinDeposit)\n        {\n            balances[msg.sender] = add_uint256(balances[msg.sender], msg.value);\n            TransferLog.AddMessage(msg.sender,msg.value,"Deposit");\n        }\n    }\n    \n     #B"YB0|OMX8HuV~Y91y{sk^i?P nonReentrant_ \n    public\n    payable\n    {\n        if(_am<=balances[msg.sender])\n        {\n            // <yes> <report> REENTRANCY\n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender] = sub_uint256(balances[msg.sender], _am);\n                TransferLog.AddMessage(msg.sender,_am,"CashOut");\n            }\n        }\n    }\n    \n    function() public payable{}    \n    \n}\n\nArv>g6b<}^%DjbStBE!{0q0zU{\n   \n    struct Message\n    {\n        address Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }\n    \n    Message[] public History;\n    \n    Message LastMsg;\n    \n    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}',
  wrappers: Set { 'add_uint256', 'nonReentrant_', 'sub_uint256' } }
