{"bugFixes":{"\"3G2y":"add_uint256(a, b)","5`#C|\"Y's=rpRb[-Y&GK\\W,6c5":" function CashOut(uint _am) nonReentrant_ ","}e=z1}/*J.vIq2S&-`T~EgIb?":"contract Log \n is sGuard  is sGuard ","%OZGWPC;m?;u}SM":"contract sGuard is sGuard ","9y-|\"":"sub_uint256(a, b)","r\"ZgGDeiCCV**?\\ktqwYG5S\\xS'6jCD+":"contract PrivateBank\n is sGuard  is sGuard ","y#,X|/0.y*l1juwUp2":" function Deposit() nonReentrant_ "},"source":"%OZGWPC;m?;u}SM{\n  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return 9y-|\";\n  }\n  \n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n  \n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = \"3G2y;\n    assert(c >= a);\n    return c;\n  }\n}\n/*\n * @source: etherscan.io \n * @author: -\n * @vulnerable_at_lines: 38\n */\n\n\nr\"ZgGDeiCCV**?\\ktqwYG5S\\xS'6jCD+{\n    mapping (address => uint) public balances;\n        \n    uint public MinDeposit = 1 ether;\n    \n    Log TransferLog;\n    \n    function PrivateBank(address _lib)\n    {\n        TransferLog = Log(_lib);\n    }\n    \n     y#,X|/0.y*l1juwUp2 nonReentrant_ \n    public\n    payable\n    {\n        if(msg.value >= MinDeposit)\n        {\n            balances[msg.sender] = add_uint256(balances[msg.sender], msg.value);\n            TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n        }\n    }\n    \n     5`#C|\"Y's=rpRb[-Y&GK\\W,6c5 nonReentrant_ \n    {\n        if(_am<=balances[msg.sender])\n        {            \n            // <yes> <report> REENTRANCY\n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender] = sub_uint256(balances[msg.sender], _am);\n                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n            }\n        }\n    }\n    \n    function() public payable{}    \n    \n}\n\n}e=z1}/*J.vIq2S&-`T~EgIb?{\n   \n    struct Message\n    {\n        address Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }\n    \n    Message[] public History;\n    \n    Message LastMsg;\n    \n    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}","wrappers":{}}