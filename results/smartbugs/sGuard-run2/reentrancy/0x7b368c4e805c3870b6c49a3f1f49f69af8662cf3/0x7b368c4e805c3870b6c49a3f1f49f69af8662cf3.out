
> symEvm@1.0.0 dev /sGuard
> node src/index.js "patches/reentrancy/0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3/0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol" "report_run/reentrancy/0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3" "W_WALLET"

patches/reentrancy/0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3/0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol
{ bugFixes:
   { s5dpj: 'add_uint256(a, b)',
     '(rBR!]NKs+x=[vgh!O:vfX_h+]': ' function Collect(uint _am) nonReentrant_ ',
     '{YA,\'Pw8Bnj:(-o,:?yYGGwN%': 'contract Log \n is sGuard  is sGuard ',
     'sRK40&cRgz*~@&L': 'contract sGuard is sGuard ',
     'uR=8Z': 'sub_uint256(a, b)',
     'wD)j\\KjG%?myWi]9ay%=du;EddD+!': 'contract W_WALLET\n is sGuard  is sGuard ',
     'o?3)5bE3^(%%:Wny7K9|pz)YU]^4Dw': ' function Put(uint _unlockTime) nonReentrant_ ' },
  source:
   'sRK40&cRgz*~@&L{\n  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return uR=8Z;\n  }\n  \n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n  \n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = s5dpj;\n    assert(c >= a);\n    return c;\n  }\n}\n/*\n * @source: etherscan.io \n * @author: -\n * @vulnerable_at_lines: 29\n */\n\n\nwD)j\\KjG%?myWi]9ay%=du;EddD+!{\n     o?3)5bE3^(%%:Wny7K9|pz)YU]^4Dw nonReentrant_ \n    public\n    payable\n    {\n        var acc = Acc[msg.sender];\n        acc.balance = add_uint256(acc.balance, msg.value);\n        acc.unlockTime = _unlockTime>now?_unlockTime:now;\n        LogFile.AddMessage(msg.sender,msg.value,"Put");\n    }\n\n     (rBR!]NKs+x=[vgh!O:vfX_h+] nonReentrant_ \n    public\n    payable\n    {\n        var acc = Acc[msg.sender];\n        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)\n        {\n            // <yes> <report> REENTRANCY\n            if(msg.sender.call.value(_am)())\n            {\n                acc.balance = sub_uint256(acc.balance, _am);\n                LogFile.AddMessage(msg.sender,_am,"Collect");\n            }\n        }\n    }\n\n    function() \n    public \n    payable\n    {\n        Put(0);\n    }\n\n    struct Holder   \n    {\n        uint unlockTime;\n        uint balance;\n    }\n\n    mapping (address => Holder) public Acc;\n\n    Log LogFile;\n\n    uint public MinSum = 1 ether;    \n\n    function W_WALLET(address log) public{\n        LogFile = Log(log);\n    }\n}\n\n\n{YA,\'Pw8Bnj:(-o,:?yYGGwN%{\n    struct Message\n    {\n        address Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }\n\n    Message[] public History;\n\n    Message LastMsg;\n\n    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}',
  wrappers: Set { 'add_uint256', 'nonReentrant_', 'sub_uint256' } }
