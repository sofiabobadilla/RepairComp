
> symEvm@1.0.0 dev /sGuard
> node src/index.js "patches/reentrancy/etherstore/etherstore.sol" "report_run/reentrancy/etherstore" "EtherStore"

patches/reentrancy/etherstore/etherstore.sol
{ bugFixes:
   { '~(0e.': 'add_uint256(a, b)',
     'GCpU-XiR=V\'G_I!&M2Aw2~aM`V&v_a,V6o}@-fs~YMK5z.[':
      ' function withdrawFunds (uint256 _weiToWithdraw) nonReentrant_ ',
     '8WIanQ>b2*\'y~IE]+,;{>69LoJy)1o<': 'contract EtherStore  is sGuard  is sGuard ',
     'JAo*P': 'sub_uint256(a, b)',
     'Y(3q?dOp<T1ztSb': 'contract sGuard is sGuard ',
     '=l)_k!9v;[ne?+AZqf/l60m': ' function depositFunds() nonReentrant_ ' },
  source:
   'Y(3q?dOp<T1ztSb{\n  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return JAo*P;\n  }\n  \n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = ~(0e.;\n    assert(c >= a);\n    return c;\n  }\n  \n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n}\n/*\n * @source: https://github.com/sigp/solidity-security-blog\n * @author: Suhabe Bugrara\n * @vulnerable_at_lines: 27\n */\n\n//added pragma version\n\n8WIanQ>b2*\'y~IE]+,;{>69LoJy)1o<{\n\n    uint256 public withdrawalLimit = 1 ether;\n    mapping(address => uint256) public lastWithdrawTime;\n    mapping(address => uint256) public balances;\n\n     =l)_k!9v;[ne?+AZqf/l60m nonReentrant_  public payable {\n        balances[msg.sender] = add_uint256(balances[msg.sender], msg.value);\n    }\n\n     GCpU-XiR=V\'G_I!&M2Aw2~aM`V&v_a,V6o}@-fs~YMK5z.[ nonReentrant_  public {\n        require(balances[msg.sender] >= _weiToWithdraw);\n        // limit the withdrawal\n        require(_weiToWithdraw <= withdrawalLimit);\n        // limit the time allowed to withdraw\n        require(now >= add_uint256(lastWithdrawTime[msg.sender], 1 weeks));\n        // <yes> <report> REENTRANCY\n        require(msg.sender.call.value(_weiToWithdraw)());\n        balances[msg.sender] = sub_uint256(balances[msg.sender], _weiToWithdraw);\n        lastWithdrawTime[msg.sender] = now;\n    }\n }\n',
  wrappers: Set { 'add_uint256', 'nonReentrant_', 'sub_uint256' } }
