{"bugFixes":{"P;wg*":"add_uint256(a, b)","zCtkDf(hce_*r?tgc[Tuj>1:U,:[^":" function SetMinSum(uint _val) nonReentrant_ ","d\\MYuhS'8J\\Iu-[DF|":" function Deposit() nonReentrant_ ","^yVKApv7>>_}]48,^5[d%x":" function Initialized() nonReentrant_ ","(E}-dfRqBd>$93jBktsqXehO||bLx,c@$fPc":"contract ACCURAL_DEPOSIT\n is sGuard  is sGuard ","Alnb)":"sub_uint256(a, b)","s8Bn&Zrr}8QuL;Y}}%wpb*h,1`&98{=tq":" function SetLogFile(address _log) nonReentrant_ ","/r&Y_;KJI<R\\G(`":"contract sGuard is sGuard ","qdwD>drV:>gL@zo}'pD#3mH[\"e":" function Collect(uint _am) nonReentrant_ ","<[NDm,+R9V`Xm@#=%BhUE|+2yiO3":"contract LogFile\n is sGuard  is sGuard "},"source":"/r&Y_;KJI<R\\G(`{\n  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return Alnb);\n  }\n  \n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n  \n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = P;wg*;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/*\n * @source: etherscan.io \n * @author: -\n * @vulnerable_at_lines: 55\n */\n\n\n(E}-dfRqBd>$93jBktsqXehO||bLx,c@$fPc{\n    mapping (address=>uint256) public balances;   \n   \n    uint public MinSum = 1 ether;\n    \n    LogFile Log = LogFile(0x0486cF65A2F2F3A392CBEa398AFB7F5f0B72FF46);\n    \n    bool intitalized;\n    \n     zCtkDf(hce_*r?tgc[Tuj>1:U,:[^ nonReentrant_ \n    public\n    {\n        if(intitalized)revert();\n        MinSum = _val;\n    }\n    \n     s8Bn&Zrr}8QuL;Y}}%wpb*h,1`&98{=tq nonReentrant_ \n    public\n    {\n        if(intitalized)revert();\n        Log = LogFile(_log);\n    }\n    \n     ^yVKApv7>>_}]48,^5[d%x nonReentrant_ \n    public\n    {\n        intitalized = true;\n    }\n    \n     d\\MYuhS'8J\\Iu-[DF| nonReentrant_ \n    public\n    payable\n    {\n        balances[msg.sender] = add_uint256(balances[msg.sender], msg.value);\n        Log.AddMessage(msg.sender,msg.value,\"Put\");\n    }\n    \n     qdwD>drV:>gL@zo}'pD#3mH[\"e nonReentrant_ \n    public\n    payable\n    {\n        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)\n        {\n            // <yes> <report> REENTRANCY\n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender] = sub_uint256(balances[msg.sender], _am);\n                Log.AddMessage(msg.sender,_am,\"Collect\");\n            }\n        }\n    }\n    \n    function() \n    public \n    payable\n    {\n        Deposit();\n    }\n    \n}\n\n\n\n<[NDm,+R9V`Xm@#=%BhUE|+2yiO3{\n    struct Message\n    {\n        address Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }\n    \n    Message[] public History;\n    \n    Message LastMsg;\n    \n    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}","wrappers":{}}