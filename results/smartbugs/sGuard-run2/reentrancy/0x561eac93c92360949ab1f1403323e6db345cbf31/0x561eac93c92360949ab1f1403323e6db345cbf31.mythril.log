==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BANK_SAFE
Function name: fallback
PC address: 898
Estimated Gas Usage: 21261 - 117812
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ../results/smartbugs/sGuard/reentrancy/0x561eac93c92360949ab1f1403323e6db345cbf31/0x561eac93c92360949ab1f1403323e6db345cbf31.sol:66

Log.AddMessage(msg.sender,msg.value,"Put")

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: SetLogFile(address), txdata: 0x303b9379000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BANK_SAFE
Function name: fallback
PC address: 930
Estimated Gas Usage: 21261 - 117812
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ../results/smartbugs/sGuard/reentrancy/0x561eac93c92360949ab1f1403323e6db345cbf31/0x561eac93c92360949ab1f1403323e6db345cbf31.sol:15

locked_ = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000020000001009, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BANK_SAFE
Function name: fallback
PC address: 944
Estimated Gas Usage: 21261 - 117812
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ../results/smartbugs/sGuard/reentrancy/0x561eac93c92360949ab1f1403323e6db345cbf31/0x561eac93c92360949ab1f1403323e6db345cbf31.sol:15

locked_ = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000020000001009, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BANK_SAFE
Function name: Collect(uint256)
PC address: 1386
Estimated Gas Usage: 24810 - 155927
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ../results/smartbugs/sGuard/reentrancy/0x561eac93c92360949ab1f1403323e6db345cbf31/0x561eac93c92360949ab1f1403323e6db345cbf31.sol:76

msg.sender.call.value(_am)()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BANK_SAFE
Function name: Collect(uint256)
PC address: 1462
Estimated Gas Usage: 24810 - 155927
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ../results/smartbugs/sGuard/reentrancy/0x561eac93c92360949ab1f1403323e6db345cbf31/0x561eac93c92360949ab1f1403323e6db345cbf31.sol:78

balances[msg.sender]

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BANK_SAFE
Function name: Collect(uint256)
PC address: 1534
Estimated Gas Usage: 24810 - 155927
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ../results/smartbugs/sGuard/reentrancy/0x561eac93c92360949ab1f1403323e6db345cbf31/0x561eac93c92360949ab1f1403323e6db345cbf31.sol:78

balances[msg.sender] = sub_uint256(balances[msg.sender], _am)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BANK_SAFE
Function name: Collect(uint256)
PC address: 1541
Estimated Gas Usage: 24810 - 155927
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ../results/smartbugs/sGuard/reentrancy/0x561eac93c92360949ab1f1403323e6db345cbf31/0x561eac93c92360949ab1f1403323e6db345cbf31.sol:79

Log

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BANK_SAFE
Function name: Collect(uint256)
PC address: 1792
Estimated Gas Usage: 24810 - 155927
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ../results/smartbugs/sGuard/reentrancy/0x561eac93c92360949ab1f1403323e6db345cbf31/0x561eac93c92360949ab1f1403323e6db345cbf31.sol:79

Log.AddMessage(msg.sender,_am,"Collect")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BANK_SAFE
Function name: Collect(uint256)
PC address: 1792
Estimated Gas Usage: 24810 - 155927
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ../results/smartbugs/sGuard/reentrancy/0x561eac93c92360949ab1f1403323e6db345cbf31/0x561eac93c92360949ab1f1403323e6db345cbf31.sol:79

Log.AddMessage(msg.sender,_am,"Collect")

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BANK_SAFE
Function name: Collect(uint256)
PC address: 1826
Estimated Gas Usage: 24810 - 155927
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ../results/smartbugs/sGuard/reentrancy/0x561eac93c92360949ab1f1403323e6db345cbf31/0x561eac93c92360949ab1f1403323e6db345cbf31.sol:15

locked_ = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BANK_SAFE
Function name: Collect(uint256)
PC address: 1840
Estimated Gas Usage: 24810 - 155927
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ../results/smartbugs/sGuard/reentrancy/0x561eac93c92360949ab1f1403323e6db345cbf31/0x561eac93c92360949ab1f1403323e6db345cbf31.sol:15

locked_ = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: Collect(uint256), txdata: 0x3fe43822, value: 0x0


