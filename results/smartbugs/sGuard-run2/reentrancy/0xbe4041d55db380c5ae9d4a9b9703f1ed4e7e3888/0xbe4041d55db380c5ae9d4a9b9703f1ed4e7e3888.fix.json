{"bugFixes":{"IZYH&":"add_uint256(a, b)","D#>`gY9DHK`0c1W|tj>]lO(h`y":" function Collect(uint _am) nonReentrant_ ","rsqZRP~jX_kD'rjyw3,7BBh(y'U'":" function Put(uint _lockTime) nonReentrant_ ","~t9EiHGTy6pa%[0B},mbCi":" function Initialized() nonReentrant_ ","}M/e\\7WPJe|H*%umTAfo6%&RJ%c[V7gGx":"contract MONEY_BOX   \n is sGuard  is sGuard ","=ddu>":"sub_uint256(a, b)","KoreZ;)QI@w{|&c'`S3BZqMAN6AP)J41G":" function SetLogFile(address _log) nonReentrant_ ","E7@(d>HN}V?^>(:":"contract sGuard is sGuard ","i/Eu'*=[9Q0?L(YH(YU;Mx\\s='Zb{":" function SetMinSum(uint _val) nonReentrant_ ","HBj/Mg{HtD8Y;ixMqna*8hN`T":"contract Log \n is sGuard  is sGuard "},"source":"E7@(d>HN}V?^>(:{\n  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return =ddu>;\n  }\n  \n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = IZYH&;\n    assert(c >= a);\n    return c;\n  }\n  \n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n}\n/*\n * @source: etherscan.io \n * @author: -\n * @vulnerable_at_lines: 63\n */\n\n\n}M/e\\7WPJe|H*%umTAfo6%&RJ%c[V7gGx{\n    struct Holder   \n    {\n        uint unlockTime;\n        uint balance;\n    }\n    \n    mapping (address => Holder) public Acc;\n    \n    uint public MinSum;\n    \n    Log LogFile;\n    \n    bool intitalized;\n    \n     i/Eu'*=[9Q0?L(YH(YU;Mx\\s='Zb{ nonReentrant_ \n    public\n    {\n        if(intitalized)throw;\n        MinSum = _val;\n    }\n    \n     KoreZ;)QI@w{|&c'`S3BZqMAN6AP)J41G nonReentrant_ \n    public\n    {\n        if(intitalized)throw;\n        LogFile = Log(_log);\n    }\n    \n     ~t9EiHGTy6pa%[0B},mbCi nonReentrant_ \n    public\n    {\n        intitalized = true;\n    }\n    \n     rsqZRP~jX_kD'rjyw3,7BBh(y'U' nonReentrant_ \n    public\n    payable\n    {\n        var acc = Acc[msg.sender];\n        acc.balance = add_uint256(acc.balance, msg.value);\n        if(add_uint256(now, _lockTime)>acc.unlockTime)acc.unlockTime=add_uint256(now, _lockTime);\n        LogFile.AddMessage(msg.sender,msg.value,\"Put\");\n    }\n    \n     D#>`gY9DHK`0c1W|tj>]lO(h`y nonReentrant_ \n    public\n    payable\n    {\n        var acc = Acc[msg.sender];\n        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)\n        {\n            // <yes> <report> REENTRANCY\n            if(msg.sender.call.value(_am)())\n            {\n                acc.balance = sub_uint256(acc.balance, _am);\n                LogFile.AddMessage(msg.sender,_am,\"Collect\");\n            }\n        }\n    }\n    \n    function() \n    public \n    payable\n    {\n        Put(0);\n    }\n    \n}\n\n\nHBj/Mg{HtD8Y;ixMqna*8hN`T{\n    struct Message\n    {\n        address Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }\n    \n    Message[] public History;\n    \n    Message LastMsg;\n    \n    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}","wrappers":{}}