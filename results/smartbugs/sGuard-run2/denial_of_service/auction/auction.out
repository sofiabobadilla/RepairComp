
> symEvm@1.0.0 dev /sGuard
> node src/index.js "patches/denial_of_service/auction/auction.sol" "report_run/denial_of_service/auction" "DosAuction"

patches/denial_of_service/auction/auction.sol
{ bugFixes:
   { '<j},,Eky8;O9Rc': ' function bid() nonReentrant_ ',
     'dKjI\'o=cJ.??}B<': 'contract sGuard is sGuard ',
     'DEn15~|9_O(qbjUiAgem7FOU%pZ5d-s': 'contract DosAuction  is sGuard  is sGuard ' },
  source:
   'dKjI\'o=cJ.??}B<{\n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n}\n/*\n * @source: https://github.com/trailofbits/not-so-smart-contracts/blob/master/denial_of_service/auction.sol\n * @author: -\n * @vulnerable_at_lines: 23\n */\n\n\n//Auction susceptible to DoS attack\nDEn15~|9_O(qbjUiAgem7FOU%pZ5d-s{\n  address currentFrontrunner;\n  uint currentBid;\n\n  //Takes in bid, refunding the frontrunner if they are outbid\n   <j},,Eky8;O9Rc nonReentrant_  payable {\n    require(msg.value > currentBid);\n\n    //If the refund fails, the entire transaction reverts.\n    //Therefore a frontrunner who always fails will win\n    if (currentFrontrunner != 0) {\n      //E.g. if recipients fallback function is just revert()\n      // <yes> <report> DENIAL_OF_SERVICE\n      require(currentFrontrunner.send(currentBid));\n    }\n\n    currentFrontrunner = msg.sender;\n    currentBid         = msg.value;\n  }\n}\n',
  wrappers: Set { 'nonReentrant_' } }
