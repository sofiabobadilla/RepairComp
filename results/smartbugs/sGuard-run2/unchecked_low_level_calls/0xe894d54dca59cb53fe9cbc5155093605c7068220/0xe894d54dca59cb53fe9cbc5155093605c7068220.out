
> symEvm@1.0.0 dev /sGuard
> node src/index.js "patches/unchecked_low_level_calls/0xe894d54dca59cb53fe9cbc5155093605c7068220/0xe894d54dca59cb53fe9cbc5155093605c7068220.sol" "report_run/unchecked_low_level_calls/0xe894d54dca59cb53fe9cbc5155093605c7068220" "airDrop"

patches/unchecked_low_level_calls/0xe894d54dca59cb53fe9cbc5155093605c7068220/0xe894d54dca59cb53fe9cbc5155093605c7068220.sol
{ bugFixes:
   { 'Y7qV+': 'div_uint256(c, a)',
     'a=1<JL': 'pow_uint256(a, b)',
     '##scJ4]$0_gx{Aj': 'contract sGuard is sGuard ',
     'L\'v4~': 'mul_uint256(a, b)',
     'UWV5*{(0gy@jd;OH307': 'contract airDrop is sGuard, ' },
  source:
   '##scJ4]$0_gx{Aj{\n  function pow_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    // TODO\n    return a=1<JL;\n  }\n  \n  function mul_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = L\'v4~;\n    assert(Y7qV+ == b);\n    return c;\n  }\n}\n/*\n * @source: etherscan.io \n * @author: -\n * @vulnerable_at_lines: 17\n */\n\n \nUWV5*{(0gy@jd;OH307 sGuard {\n    \n    function transfer(address from,address caddress,address[] _tos,uint v, uint _decimals)public returns (bool){\n        require(_tos.length > 0);\n        bytes4 id=bytes4(keccak256("transferFrom(address,address,uint256)"));\n        uint _value = mul_uint256(v, pow_uint256(10, _decimals));\n        for(uint i=0;i<_tos.length;i++){\n            // <yes> <report> UNCHECKED_LL_CALLS\n            caddress.call(id,from,_tos[i],_value);\n        }\n        return true;\n    }\n}',
  wrappers: Set { 'div_uint256', 'pow_uint256', 'mul_uint256' } }
