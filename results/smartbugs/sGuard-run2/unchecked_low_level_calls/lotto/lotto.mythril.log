==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: Lotto
Function name: withdrawLeftOver()
PC address: 435
Estimated Gas Usage: 2480 - 37091
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ../results/smartbugs/sGuard/unchecked_low_level_calls/lotto/lotto.sol:38

msg.sender.send(this.balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: sendToWinner(), txdata: 0x8f1c0585, value: 0x0
Caller: [ATTACKER], function: withdrawLeftOver(), txdata: 0x1846f51a, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: Lotto
Function name: withdrawLeftOver()
PC address: 435
Estimated Gas Usage: 2480 - 37091
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: ../results/smartbugs/sGuard/unchecked_low_level_calls/lotto/lotto.sol:38

msg.sender.send(this.balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: sendToWinner(), txdata: 0x8f1c0585, value: 0x0
Caller: [SOMEGUY], function: withdrawLeftOver(), txdata: 0x1846f51a, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: Lotto
Function name: withdrawLeftOver()
PC address: 435
Estimated Gas Usage: 2480 - 37091
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ../results/smartbugs/sGuard/unchecked_low_level_calls/lotto/lotto.sol:38

msg.sender.send(this.balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: sendToWinner(), txdata: 0x8f1c0585, value: 0x0
Caller: [ATTACKER], function: withdrawLeftOver(), txdata: 0x1846f51a, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: Lotto
Function name: sendToWinner()
PC address: 608
Estimated Gas Usage: 21900 - 118161
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ../results/smartbugs/sGuard/unchecked_low_level_calls/lotto/lotto.sol:31

winner.send(winAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: sendToWinner(), txdata: 0x8f1c0585, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: Lotto
Function name: sendToWinner()
PC address: 608
Estimated Gas Usage: 21900 - 118161
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: ../results/smartbugs/sGuard/unchecked_low_level_calls/lotto/lotto.sol:31

winner.send(winAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: sendToWinner(), txdata: 0x8f1c0585, value: 0x0


