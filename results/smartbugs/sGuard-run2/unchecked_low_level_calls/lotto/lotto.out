
> symEvm@1.0.0 dev /sGuard
> node src/index.js "patches/unchecked_low_level_calls/lotto/lotto.sol" "report_run/unchecked_low_level_calls/lotto" "Lotto"

patches/unchecked_low_level_calls/lotto/lotto.sol
{ bugFixes:
   { '8DfIe9}MxH`H?gui.mo>`wm': ' function sendToWinner() nonReentrant_ ',
     'XHvyXQevXW*x3[j': 'contract sGuard is sGuard ',
     '5b.*;FTF*w+E#ASy_s:of>WMuJ': 'contract Lotto  is sGuard  is sGuard ' },
  source:
   'XHvyXQevXW*x3[j{\n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n}\n/*\n * @source: https://github.com/sigp/solidity-security-blog\n * @author: Suhabe Bugrara\n * @vulnerable_at_lines: 20,27\n */\n\n \n 5b.*;FTF*w+E#ASy_s:of>WMuJ{\n\n     bool public payedOut = false;\n     address public winner;\n     uint public winAmount;\n\n     // ... extra functionality here\n\n      8DfIe9}MxH`H?gui.mo>`wm nonReentrant_  public {\n         require(!payedOut);\n         // <yes> <report> UNCHECKED_LL_CALLS\n         winner.send(winAmount);\n         payedOut = true;\n     }\n\n     function withdrawLeftOver() public {\n         require(payedOut);\n         // <yes> <report> UNCHECKED_LL_CALLS\n         msg.sender.send(this.balance);\n     }\n }\n',
  wrappers: Set { 'nonReentrant_' } }
