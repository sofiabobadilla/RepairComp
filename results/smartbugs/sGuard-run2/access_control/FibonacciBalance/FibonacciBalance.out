
> symEvm@1.0.0 dev /sGuard
> node src/index.js "patches/access_control/FibonacciBalance/FibonacciBalance.sol" "report_run/access_control/FibonacciBalance" "FibonacciBalance"

patches/access_control/FibonacciBalance/FibonacciBalance.sol
{ bugFixes:
   { _ag3Q: 'add_uint256(a, b)',
     f4v9C: 'mul_uint256(a, b)',
     'gM1hgA0Dh["K_o[69{?9OEXLi?^+@Lc`u%>S]': 'contract FibonacciBalance  is sGuard  is sGuard ',
     '.rt|s': 'div_uint256(c, a)',
     'FdA3V?BS3re0I/a': 'contract sGuard is sGuard ',
     'O6^cf%^S]4;wqV*PPCaV{b>Vdzgh+\':[{': 'contract FibonacciLib  is sGuard  is sGuard ' },
  source:
   'FdA3V?BS3re0I/a{\n  function mul_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = f4v9C;\n    assert(.rt|s == b);\n    return c;\n  }\n  \n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = _ag3Q;\n    assert(c >= a);\n    return c;\n  }\n}\n/*\n * @source: https://github.com/sigp/solidity-security-blog\n * @author: Suhabe Bugrara\n * @vulnerable_at_lines: 31,38\n */\n\n//added pragma version\n\ngM1hgA0Dh["K_o[69{?9OEXLi?^+@Lc`u%>S]{\n\n    address public fibonacciLibrary;\n    // the current fibonacci number to withdraw\n    uint public calculatedFibNumber;\n    // the starting fibonacci sequence number\n    uint public start = 3;\n    uint public withdrawalCounter;\n    // the fibonancci function selector\n    bytes4 constant fibSig = bytes4(sha3("setFibonacci(uint256)"));\n\n    // constructor - loads the contract with ether\n    constructor(address _fibonacciLibrary) public payable {\n        fibonacciLibrary = _fibonacciLibrary;\n    }\n\n    function withdraw() {\n        withdrawalCounter = add_uint256(withdrawalCounter, 1);\n        // calculate the fibonacci number for the current withdrawal user\n        // this sets calculatedFibNumber\n        // <yes> <report> ACCESS_CONTROL\n        require(fibonacciLibrary.delegatecall(fibSig, withdrawalCounter));\n        msg.sender.transfer(mul_uint256(calculatedFibNumber, 1 ether));\n    }\n\n    // allow users to call fibonacci library functions\n    function() public {\n        // <yes> <report> ACCESS_CONTROL\n        require(fibonacciLibrary.delegatecall(msg.data));\n    }\n}\n\n// library contract - calculates fibonacci-like numbers;\nO6^cf%^S]4;wqV*PPCaV{b>Vdzgh+\':[{{\n    // initializing the standard fibonacci sequence;\n    uint public start;\n    uint public calculatedFibNumber;\n\n    // modify the zeroth number in the sequence\n    function setStart(uint _start) public {\n        start = _start;\n    }\n\n    function setFibonacci(uint n) public {\n        calculatedFibNumber = fibonacci(n);\n    }\n\n    function fibonacci(uint n) internal returns (uint) {\n        if (n == 0) return start;\n        else if (n == 1) return start + 1;\n        else return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}\n',
  wrappers: Set { 'add_uint256', 'mul_uint256', 'div_uint256' } }
