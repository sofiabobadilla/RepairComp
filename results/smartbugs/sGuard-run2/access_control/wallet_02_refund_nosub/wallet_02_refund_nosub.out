
> symEvm@1.0.0 dev /sGuard
> node src/index.js "patches/access_control/wallet_02_refund_nosub/wallet_02_refund_nosub.sol" "report_run/access_control/wallet_02_refund_nosub" "Wallet"

patches/access_control/wallet_02_refund_nosub/wallet_02_refund_nosub.sol
{ bugFixes:
   { '.~!gw': 'add_uint256(a, b)',
     '8BbVc5;\\P%f]`mAeTQ': ' function deposit() nonReentrant_ ',
     'RZ)}H9!5;vo%3\')^ms"~4dZ/9pR': 'contract Wallet  is sGuard  is sGuard ',
     'qF^hU': 'sub_uint256(a, b)',
     'm}kv>aTk,MTl?cB': 'contract sGuard is sGuard ',
     'T"qlFwOgbki`\']/98dqbVa++Z0}C7>fV8': ' function withdraw(uint256 amount) nonReentrant_ ' },
  source:
   'm}kv>aTk,MTl?cB{\n  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return qF^hU;\n  }\n  \n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = .~!gw;\n    assert(c >= a);\n    return c;\n  }\n  \n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n}\n/*\n * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-105#wallet-02-refund-nosubsol\n * @author: -\n * @vulnerable_at_lines: 36\n */\n\n\n /* User can add pay in and withdraw Ether.\n    Unfortunately the developer forgot set the user\'s balance to 0 when refund() is called.\n    An attacker can pay in a small amount of Ether and call refund() repeatedly to empty the contract.\n */\n\n RZ)}H9!5;vo%3\')^ms"~4dZ/9pR{\n     address creator;\n\n     mapping(address => uint256) balances;\n\n     constructor() public {\n         creator = msg.sender;\n     }\n\n      8BbVc5;\\P%f]`mAeTQ nonReentrant_  public payable {\n         assert(add_uint256(balances[msg.sender], msg.value) > balances[msg.sender]);\n         balances[msg.sender] = add_uint256(balances[msg.sender], msg.value);\n     }\n\n      T"qlFwOgbki`\']/98dqbVa++Z0}C7>fV8 nonReentrant_  public {\n         require(amount <= balances[msg.sender]);\n         msg.sender.transfer(amount);\n         balances[msg.sender] = sub_uint256(balances[msg.sender], amount);\n     }\n\n     function refund() public {\n         // <yes> <report> ACCESS_CONTROL\n         msg.sender.transfer(balances[msg.sender]);\n     }\n\n     // In an emergency the owner can migrate  allfunds to a different address.\n\n     function migrateTo(address to) public {\n         require(creator == msg.sender);\n         to.transfer(this.balance);\n     }\n\n }\n',
  wrappers: Set { 'add_uint256', 'nonReentrant_', 'sub_uint256' } }
