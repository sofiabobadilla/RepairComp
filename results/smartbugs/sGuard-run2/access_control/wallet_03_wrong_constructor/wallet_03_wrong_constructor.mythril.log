==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: Wallet
Function name: migrateTo(address)
PC address: 849
Estimated Gas Usage: 2629 - 37240
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ../results/smartbugs/sGuard/access_control/wallet_03_wrong_constructor/wallet_03_wrong_constructor.sol:60

to.transfer(this.balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initWallet(), txdata: 0x3e326048, value: 0x0
Caller: [ATTACKER], function: migrateTo(address), txdata: 0x4ddaf8f2, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: Wallet
Function name: migrateTo(address)
PC address: 849
Estimated Gas Usage: 2629 - 37240
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ../results/smartbugs/sGuard/access_control/wallet_03_wrong_constructor/wallet_03_wrong_constructor.sol:60

to.transfer(this.balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1344630900000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x38800400, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initWallet(), txdata: 0x3e326048, value: 0x0
Caller: [ATTACKER], function: migrateTo(address), txdata: 0x4ddaf8f2484848484848484848484848deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Wallet
Function name: deposit()
PC address: 1073
Estimated Gas Usage: 8799 - 29934
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ../results/smartbugs/sGuard/access_control/wallet_03_wrong_constructor/wallet_03_wrong_constructor.sol:7

function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0002082493, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x0


