
> symEvm@1.0.0 dev /sGuard
> node src/index.js "patches/access_control/wallet_03_wrong_constructor/wallet_03_wrong_constructor.sol" "report_run/access_control/wallet_03_wrong_constructor" "Wallet"

patches/access_control/wallet_03_wrong_constructor/wallet_03_wrong_constructor.sol
{ bugFixes:
   { '21\'n:': 'add_uint256(a, b)',
     '8p&ys#QE_"WkwHRyL:': ' function deposit() nonReentrant_ ',
     'qxbOD)%Fenc:H}70SUKp,': ' function initWallet() nonReentrant_ ',
     'b*9/2\'fG,fzu%Yf': 'contract sGuard is sGuard ',
     '-7H4s': 'sub_uint256(a, b)',
     'eZC!2m+h_AW!8gH,3u8cJwUR<uV': 'contract Wallet  is sGuard  is sGuard ',
     'bPB`9#|=ml#*29OZ}H2*|ruUblYw4j:pn': ' function withdraw(uint256 amount) nonReentrant_ ' },
  source:
   'b*9/2\'fG,fzu%Yf{\n  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return -7H4s;\n  }\n  \n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = 21\'n:;\n    assert(c >= a);\n    return c;\n  }\n  \n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n}\n/*\n * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-105#wallet-03-wrong-constructorsol\n * @author: -\n * @vulnerable_at_lines: 19,20\n */\n\n\n /* User can add pay in and withdraw Ether.\n    The constructor is wrongly named, so anyone can become \'creator\' and withdraw all funds.\n */\n\n eZC!2m+h_AW!8gH,3u8cJwUR<uV{\n     address creator;\n\n     mapping(address => uint256) balances;\n     \n     // <yes> <report> ACCESS_CONTROL\n     qxbOD)%Fenc:H}70SUKp, public {\n         creator = msg.sender;\n     }\n\n      8p&ys#QE_"WkwHRyL: nonReentrant_  public payable {\n         assert(add_uint256(balances[msg.sender], msg.value) > balances[msg.sender]);\n         balances[msg.sender] = add_uint256(balances[msg.sender], msg.value);\n     }\n\n      bPB`9#|=ml#*29OZ}H2*|ruUblYw4j:pn nonReentrant_  public {\n         require(amount <= balances[msg.sender]);\n         msg.sender.transfer(amount);\n         balances[msg.sender] = sub_uint256(balances[msg.sender], amount);\n     }\n\n     // In an emergency the owner can migrate  allfunds to a different address.\n\n     function migrateTo(address to) public {\n         require(creator == msg.sender);\n         to.transfer(this.balance);\n     }\n\n }\n',
  wrappers: Set { 'add_uint256', 'nonReentrant_', 'sub_uint256' } }
