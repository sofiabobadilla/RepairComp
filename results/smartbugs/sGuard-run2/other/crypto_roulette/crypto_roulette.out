
> symEvm@1.0.0 dev /sGuard
> node src/index.js "patches/other/crypto_roulette/crypto_roulette.sol" "report_run/other/crypto_roulette" "CryptoRoulette"

patches/other/crypto_roulette/crypto_roulette.sol
{ bugFixes:
   { '~Y~#w': 'add_uint8(a, b)',
     'uV/[3sAXrALu?G^$0;g<;:OabHElE': ' function play(uint256 number) nonReentrant_ ',
     'JG/7ln*mCRLTVNC': 'contract sGuard is sGuard ',
     jltcY: 'add_uint256(a, b)',
     '%8CJm"`BV>2U8Qu4N(?BCF3H%&E?<szn]RW': 'contract CryptoRoulette  is sGuard  is sGuard ' },
  source:
   'JG/7ln*mCRLTVNC{\n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = jltcY;\n    assert(c >= a);\n    return c;\n  }\n  \n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n  \n  function add_uint8(uint8 a, uint8 b) internal pure returns (uint8) {\n    uint8 c = ~Y~#w;\n    assert(c >= a);\n    return c;\n  }\n}\n/*\n * @source: https://github.com/thec00n/smart-contract-honeypots/blob/master/CryptoRoulette.sol\n * @vulnerable_at_lines: 40,41,42\n */\n\n// CryptoRoulette\n//\n// Guess the number secretly stored in the blockchain and win the whole contract balance!\n// A new number is randomly chosen after each try.\n// https://www.reddit.com/r/ethdev/comments/7wp363/how_does_this_honeypot_work_it_seems_like_a/\n// To play, call the play() method with the guessed number (1-20).  Bet price: 0.1 ether\n\n%8CJm"`BV>2U8Qu4N(?BCF3H%&E?<szn]RW{\n\n    uint256 private secretNumber;\n    uint256 public lastPlayed;\n    uint256 public betPrice = 0.1 ether;\n    address public ownerAddr;\n\n    struct Game {\n        address player;\n        uint256 number;\n    }\n    Game[] public gamesPlayed;\n\n    function CryptoRoulette() public {\n        ownerAddr = msg.sender;\n        shuffle();\n    }\n\n    function shuffle() internal {\n        // randomly set secretNumber with a value between 1 and 20\n        secretNumber = add_uint8(uint8(sha3(now, block.blockhash(block.number-1))) % 20, 1);\n    }\n\n     uV/[3sAXrALu?G^$0;g<;:OabHElE nonReentrant_  payable public {\n        require(msg.value >= betPrice && number <= 10);\n        // <yes> <report> OTHER - uninitialized storage\n        Game game; //Uninitialized storage pointer\n        game.player = msg.sender;\n        game.number = number;\n        gamesPlayed.push(game);\n\n        if (number == secretNumber) {\n            // win!\n            msg.sender.transfer(this.balance);\n        }\n\n        shuffle();\n        lastPlayed = now;\n    }\n\n    function kill() public {\n        if (msg.sender == ownerAddr && now > add_uint256(lastPlayed, 1 days)) {\n            suicide(msg.sender);\n        }\n    }\n\n    function() public payable { }\n}\n',
  wrappers: Set { 'add_uint8', 'nonReentrant_', 'add_uint256' } }
