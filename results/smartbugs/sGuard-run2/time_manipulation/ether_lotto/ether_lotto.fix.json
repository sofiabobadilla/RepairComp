{"bugFixes":{"zo\"2^":"add_uint256(a, b)","K(N@?f9tr{fsZX)":" function play() nonReentrant_ ","5@r9egZO|662]Ej":"contract sGuard is sGuard ","A`rwD":"sub_uint256(a, b)","$>:o&q#w[)rUps\\{\",1z*V^7(*!q%][":"contract EtherLotto  is sGuard  is sGuard "},"source":"5@r9egZO|662]Ej{\n  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return A`rwD;\n  }\n  \n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n  \n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = zo\"2^;\n    assert(c >= a);\n    return c;\n  }\n}\n/*\n * @article: https://blog.positive.com/predicting-random-numbers-in-ethereum-smart-contracts-e5358c6b8620\n * @source: https://etherscan.io/address/0xa11e4ed59dc94e69612f3111942626ed513cb172#code\n * @vulnerable_at_lines: 43\n * @author: -\n */\n\n\n/// @title Ethereum Lottery Game.\n\n$>:o&q#w[)rUps\\{\",1z*V^7(*!q%][{\n\n    // Amount of ether needed for participating in the lottery.\n    uint constant TICKET_AMOUNT = 10;\n\n    // Fixed amount fee for each lottery game.\n    uint constant FEE_AMOUNT = 1;\n\n    // Address where fee is sent.\n    address public bank;\n\n    // Public jackpot that each participant can win (minus fee).\n    uint public pot;\n\n    // Lottery constructor sets bank account from the smart-contract owner.\n    function EtherLotto() {\n        bank = msg.sender;\n    }\n\n    // Public function for playing lottery. Each time this function\n    // is invoked, the sender has an oportunity for winning pot.\n     K(N@?f9tr{fsZX) nonReentrant_  payable {\n\n        // Participants must spend some fixed ether before playing lottery.\n        assert(msg.value == TICKET_AMOUNT);\n\n        // Increase pot for each participant.\n        pot = add_uint256(pot, msg.value);\n\n        // Compute some *almost random* value for selecting winner from current transaction.\n        // <yes> <report> TIME_MANIPULATION\n        var random = uint(sha3(block.timestamp)) % 2;\n\n        // Distribution: 50% of participants will be winners.\n        if (random == 0) {\n\n            // Send fee to bank account.\n            bank.transfer(FEE_AMOUNT);\n\n            // Send jackpot to winner.\n            msg.sender.transfer(sub_uint256(pot, FEE_AMOUNT));\n\n            // Restart jackpot.\n            pot = 0;\n        }\n    }\n\n}\n","wrappers":{}}