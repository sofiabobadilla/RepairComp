{"bugFixes":{"Ujk9:":"add_uint256(a, b)","ETcyJ":"sub_uint256(a, b)",":;ah,~U@r*ttq2\"/h":" function invest() nonReentrant_ ","_VFo|)l%'<|G8QzM[xQ|bNUanmS^Z?s1F":"contract Governmental  is sGuard  is sGuard ","wA)-R":"div_uint256(a, b)","B6dr*/<DM{\"Q9h%?oCUa9N<~%.T\"=":"contract Attacker  is sGuard  is sGuard ","pTUms@7$|xG:(BR@HpUMo){fcA":" function resetInvestment() nonReentrant_ ","5EA$L2[2&(E8${8":"contract sGuard is sGuard "},"source":"5EA$L2[2&(E8${8{\n  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return ETcyJ;\n  }\n  \n  function div_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = wA)-R;\n    return c;\n  }\n  \n  bool internal locked_;\n  constructor() internal {\n    locked_ = false;\n  }\n  modifier nonReentrant_() {\n    require(!locked_);\n    locked_ = true;\n    _;\n    locked_ = false;\n  }\n  \n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = Ujk9:;\n    assert(c >= a);\n    return c;\n  }\n}\n/*\n * @source: http://blockchain.unica.it/projects/ethereum-survey/attacks.html#governmental\n * @author: -\n * @vulnerable_at_lines: 27\n */\n\n//added pragma version\n\n_VFo|)l%'<|G8QzM[xQ|bNUanmS^Z?s1F{\n  address public owner;\n  address public lastInvestor;\n  uint public jackpot = 1 ether;\n  uint public lastInvestmentTimestamp;\n  uint public ONE_MINUTE = 1 minutes;\n\n  function Governmental() {\n    owner = msg.sender;\n    if (msg.value<1 ether) throw;\n  }\n\n   :;ah,~U@r*ttq2\"/h nonReentrant_  {\n    if (msg.value<div_uint256(jackpot, 2)) throw;\n    lastInvestor = msg.sender;\n    jackpot = add_uint256(jackpot, div_uint256(msg.value, 2));\n    // <yes> <report> TIME_MANIPULATION\n    lastInvestmentTimestamp = block.timestamp;\n  }\n\n   pTUms@7$|xG:(BR@HpUMo){fcA nonReentrant_  {\n    if (block.timestamp < add_uint256(lastInvestmentTimestamp, ONE_MINUTE))\n      throw;\n\n    lastInvestor.send(jackpot);\n    owner.send(sub_uint256(this.balance, 1 ether));\n\n    lastInvestor = 0;\n    jackpot = 1 ether;\n    lastInvestmentTimestamp = 0;\n  }\n}\n\nB6dr*/<DM{\"Q9h%?oCUa9N<~%.T\"={\n\n  function attack(address target, uint count) {\n    if (0<=count && count<1023) {\n      this.attack.gas(msg.gas-2000)(target, count+1);\n    }\n    else {\n      Governmental(target).resetInvestment();\n    }\n  }\n}\n","wrappers":{}}