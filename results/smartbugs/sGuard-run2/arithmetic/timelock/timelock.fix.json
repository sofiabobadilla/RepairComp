{"bugFixes":{"%|\\=N":"add_uint256(a, b)","_GVQ)_^%|,M$)O9":"contract sGuard is sGuard ","\\0.PmxxY|\"hn.?ktk-pcJN$rWc2A@":"contract TimeLock  is sGuard  is sGuard "},"source":"_GVQ)_^%|,M$)O9{\n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = %|\\=N;\n    assert(c >= a);\n    return c;\n  }\n}\n/*\n * @source: https://github.com/sigp/solidity-security-blog\n * @author: -\n * @vulnerable_at_lines: 22\n */\n\n//added pragma version\n \n \\0.PmxxY|\"hn.?ktk-pcJN$rWc2A@{\n\n     mapping(address => uint) public balances;\n     mapping(address => uint) public lockTime;\n\n     function deposit() public payable {\n         balances[msg.sender] = add_uint256(balances[msg.sender], msg.value);\n         lockTime[msg.sender] = add_uint256(now, 1 weeks);\n     }\n\n     function increaseLockTime(uint _secondsToIncrease) public {\n         // <yes> <report> ARITHMETIC\n         lockTime[msg.sender] = add_uint256(lockTime[msg.sender], _secondsToIncrease);\n     }\n\n     function withdraw() public {\n         require(balances[msg.sender] > 0);\n         require(now > lockTime[msg.sender]);\n         uint transferValue = balances[msg.sender];\n         balances[msg.sender] = 0;\n         msg.sender.transfer(transferValue);\n     }\n }\n","wrappers":{}}