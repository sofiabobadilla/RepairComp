==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TimeLock
Function name: withdraw()
PC address: 540
Estimated Gas Usage: 1973 - 2448
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ../results/smartbugs/sGuard/arithmetic/timelock/timelock.sol:33

require(now > lockTime[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: deposit(), txdata: 0xd0e30db0, value: 0x1
Caller: [SOMEGUY], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: TimeLock
Function name: withdraw()
PC address: 726
Estimated Gas Usage: 8801 - 63842
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ../results/smartbugs/sGuard/arithmetic/timelock/timelock.sol:36

msg.sender.transfer(transferValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x50000000000000001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x1
Caller: [ATTACKER], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TimeLock
Function name: deposit()
PC address: 1157
Estimated Gas Usage: 6339 - 26814
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ../results/smartbugs/sGuard/arithmetic/timelock/timelock.sol:4

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: deposit(), txdata: 0xd0e30db0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TimeLock
Function name: deposit()
PC address: 1158
Estimated Gas Usage: 6349 - 26824
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ../results/smartbugs/sGuard/arithmetic/timelock/timelock.sol:23

add_uint256(now, 1 weeks)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: deposit(), txdata: 0xd0e30db0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TimeLock
Function name: increaseLockTime(uint256)
PC address: 1158
Estimated Gas Usage: 1185 - 1470
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ../results/smartbugs/sGuard/arithmetic/timelock/timelock.sol:28

add_uint256(lockTime[msg.sender], _secondsToIncrease)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: increaseLockTime(uint256), txdata: 0x79af55e402, decoded_data: (904625697166532776746648320380374280103671755200316906558262375061821325312,), value: 0x0
Caller: [SOMEGUY], function: increaseLockTime(uint256), txdata: 0x79af55e4ff, decoded_data: (115339776388732929035197660848497720713218148788040405586178452820382218977280,), value: 0x0


