{"bugFixes":{"elq=!":"sub_uint256(a, b)","r)8PN":"div_uint256(c, a)","AC3['|TquQ;oi]3W2W/K#SL({4tF(_1w3^5vv)Z":"contract TokenSaleChallenge  is sGuard  is sGuard ","AT,m~":"add_uint256(a, b)","C\\}S\\VW(R#sxqX'":"contract sGuard is sGuard ","oe4ff":"mul_uint256(a, b)"},"source":"C\\}S\\VW(R#sxqX'{\n  function mul_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = oe4ff;\n    assert(r)8PN == b);\n    return c;\n  }\n  \n  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = AT,m~;\n    assert(c >= a);\n    return c;\n  }\n  \n  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return elq=!;\n  }\n}\n/*\n * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-101 // https://capturetheether.com/challenges/math/token-sale/\n * @author: Steve Marx\n * @vulnerable_at_lines: 23,25,33\n */\n\n\nAC3['|TquQ;oi]3W2W/K#SL({4tF(_1w3^5vv)Z{\n    mapping(address => uint256) public balanceOf;\n    uint256 constant PRICE_PER_TOKEN = 1 ether;\n\n    function TokenSaleChallenge(address _player) public payable {\n        require(msg.value == 1 ether);\n    }\n\n    function isComplete() public view returns (bool) {\n        return address(this).balance < 1 ether;\n    }\n\n    function buy(uint256 numTokens) public payable {\n        // <yes> <report> ARITHMETIC\n        require(msg.value == mul_uint256(numTokens, PRICE_PER_TOKEN));\n        // <yes> <report> ARITHMETIC\n        balanceOf[msg.sender] = add_uint256(balanceOf[msg.sender], numTokens);\n    }\n\n    function sell(uint256 numTokens) public {\n        require(balanceOf[msg.sender] >= numTokens);\n\n        balanceOf[msg.sender] = sub_uint256(balanceOf[msg.sender], numTokens);\n        // <yes> <report> ARITHMETIC\n        msg.sender.transfer(mul_uint256(numTokens, PRICE_PER_TOKEN));\n    }\n}\n","wrappers":{}}