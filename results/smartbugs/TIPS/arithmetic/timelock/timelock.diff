--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/arithmetic/timelock.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/TIPS/arithmetic/timelock/timelock.sol
@@ -1,32 +1,19 @@
-/*

- * @source: https://github.com/sigp/solidity-security-blog

- * @author: -

- * @vulnerable_at_lines: 22

- */

-

-//added pragma version

- pragma solidity ^0.4.10;

- 

- contract TimeLock {

-

-     mapping(address => uint) public balances;

-     mapping(address => uint) public lockTime;

-

-     function deposit() public payable {

-         balances[msg.sender] += msg.value;

-         lockTime[msg.sender] = now + 1 weeks;

-     }

-

-     function increaseLockTime(uint _secondsToIncrease) public {

-         // <yes> <report> ARITHMETIC

-         lockTime[msg.sender] += _secondsToIncrease;

-     }

-

-     function withdraw() public {

-         require(balances[msg.sender] > 0);

-         require(now > lockTime[msg.sender]);

-         uint transferValue = balances[msg.sender];

-         balances[msg.sender] = 0;

-         msg.sender.transfer(transferValue);

-     }

- }

+contract TimeLock {

+	mapping(address => uint) public balances;

+	mapping(address => uint) public lockTime;

+	function deposit() payable public {

+	balances[msg.sender] += msg.value;

+	lockTime[msg.sender] = now + 1 weeks;

+	}

+	function increaseLockTime(uint _secondsToIncrease) public {

+	lockTime[msg.sender] += _secondsToIncrease;

+	}

+	function withdraw() public {

+	require(balances[msg.sender] > 0);

+	require(now > lockTime[msg.sender]);

+	uint transferValue = balances[msg.sender];

+	balances[msg.sender] = 0;

+	msg.sender.transfer(transferValue);

+	}

+	

+}