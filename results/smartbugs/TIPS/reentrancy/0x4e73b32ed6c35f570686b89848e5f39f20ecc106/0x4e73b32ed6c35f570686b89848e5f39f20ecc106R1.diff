--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/TIPS/reentrancy/0x4e73b32ed6c35f570686b89848e5f39f20ecc106/0x4e73b32ed6c35f570686b89848e5f39f20ecc106R1.sol
@@ -1,96 +1,52 @@
-/*

- * @source: etherscan.io 

- * @author: -

- * @vulnerable_at_lines: 54

- */

-

-pragma solidity ^0.4.19;

-

-contract PRIVATE_ETH_CELL

-{

-    mapping (address=>uint256) public balances;   

-   

-    uint public MinSum;

-    

-    LogFile Log;

-    

-    bool intitalized;

-    

-    function SetMinSum(uint _val)

-    public

-    {

-        require(!intitalized);

-        MinSum = _val;

-    }

-    

-    function SetLogFile(address _log)

-    public

-    {

-        require(!intitalized);

-        Log = LogFile(_log);

-    }

-    

-    function Initialized()

-    public

-    {

-        intitalized = true;

-    }

-    

-    function Deposit()

-    public

-    payable

-    {

-        balances[msg.sender]+= msg.value;

-        Log.AddMessage(msg.sender,msg.value,"Put");

-    }

-    

-    function Collect(uint _am)

-    public

-    payable

-    {

-        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)

-        {

-            // <yes> <report> REENTRANCY

-            if(msg.sender.call.value(_am)())

-            {

-                balances[msg.sender]-=_am;

-                Log.AddMessage(msg.sender,_am,"Collect");

-            }

-        }

-    }

-    

-    function() 

-    public 

-    payable

-    {

-        Deposit();

-    }

-    

-}

-

-

-

-contract LogFile

-{

-    struct Message

-    {

-        address Sender;

-        string  Data;

-        uint Val;

-        uint  Time;

-    }

-    

-    Message[] public History;

-    

-    Message LastMsg;

-    

-    function AddMessage(address _adr,uint _val,string _data)

-    public

-    {

-        LastMsg.Sender = _adr;

-        LastMsg.Time = now;

-        LastMsg.Val = _val;

-        LastMsg.Data = _data;

-        History.push(LastMsg);

-    }

+contract PRIVATE_ETH_CELL {

+	mapping(address => uint256) public balances;

+	uint public MinSum;

+	LogFile Log;

+	bool intitalized;

+	function SetMinSum(uint _val) public {

+	require(! intitalized);

+	MinSum = _val;

+	}

+	function SetLogFile(address _log) public {

+	require(! intitalized);

+	Log = LogFile(_log);

+	}

+	function Initialized() public {

+	intitalized = true;

+	}

+	function Deposit() payable public {

+	balances[msg.sender] += msg.value;

+	Log.AddMessage(msg.sender, msg.value, "Put");

+	}

+	function Collect(uint _am) payable public {

+	if(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am){

+	if(msg.sender.send(_am)){

+	balances[msg.sender] -= _am;

+	Log.AddMessage(msg.sender, _am, "Collect");

+	}

+	else{

+	throw;}

+	}

+	}

+	function () payable public {

+	Deposit();

+	}

+	

+}contract LogFile {

+	struct Message{

+	address Sender;

+	string Data;

+	uint Val;

+	uint Time;

+	}

+	Message[] public History;

+	Message LastMsg;

+	function AddMessage(address _adr, uint _val, string _data) public {

+	LastMsg.Sender = _adr;

+	LastMsg.Time = now;

+	LastMsg.Val = _val;

+	LastMsg.Data = _data;

+	History.push(LastMsg);

+	}

+	

 }