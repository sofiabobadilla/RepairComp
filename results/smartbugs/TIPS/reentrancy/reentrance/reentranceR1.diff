--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/reentrance.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/TIPS/reentrancy/reentrance/reentranceR1.sol
@@ -1,32 +1,22 @@
-/*

- * @source: https://ethernaut.zeppelin.solutions/level/0xf70706db003e94cfe4b5e27ffd891d5c81b39488

- * @author: Alejandro Santander

- * @vulnerable_at_lines: 24

- */

-

-pragma solidity ^0.4.18;

-

 contract Reentrance {

-

-  mapping(address => uint) public balances;

-

-  function donate(address _to) public payable {

-    balances[_to] += msg.value;

-  }

-

-  function balanceOf(address _who) public view returns (uint balance) {

-    return balances[_who];

-  }

-

-  function withdraw(uint _amount) public {

-    if(balances[msg.sender] >= _amount) {

-      // <yes> <report> REENTRANCY

-      if(msg.sender.call.value(_amount)()) {

-        _amount;

-      }

-      balances[msg.sender] -= _amount;

-    }

-  }

-

-  function() public payable {}

-}

+	mapping(address => uint) public balances;

+	function donate(address _to) payable public {

+	balances[_to] += msg.value;

+	}

+	function balanceOf(address _who) view public returns(uint balance){

+	return balances[_who];

+	}

+	function withdraw(uint _amount) public {

+	if(balances[msg.sender] >= _amount){

+	if(msg.sender.send(_amount)){

+	_amount;

+	}

+	else{

+	throw;}

+	balances[msg.sender] -= _amount;

+	}

+	}

+	function () payable public {

+	}

+	

+}