--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/reentrancy_insecure.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/TIPS/reentrancy/reentrancy_insecure/reentrancy_insecureR1.sol
@@ -1,21 +1,10 @@
-/*

- * @source: https://consensys.github.io/smart-contract-best-practices/known_attacks/

- * @author: consensys

- * @vulnerable_at_lines: 17

- */

-

-pragma solidity ^0.5.0;

-

 contract Reentrancy_insecure {

-

-    // INSECURE

-    mapping (address => uint) private userBalances;

-

-    function withdrawBalance() public {

-        uint amountToWithdraw = userBalances[msg.sender];

-        // <yes> <report> REENTRANCY

-        (bool success, ) = msg.sender.call.value(amountToWithdraw)(""); // At this point, the caller's code is executed, and can call withdrawBalance again

-        require(success);

-        userBalances[msg.sender] = 0;

-    }

-}

+	mapping(address => uint) private userBalances;

+	function withdrawBalance() public {

+	uint amountToWithdraw = userBalances[msg.sender];

+	bool success = msg.sender.send(amountToWithdraw);

+	require(success);

+	userBalances[msg.sender] = 0;

+	}

+	

+}