--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/TIPS/reentrancy/0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3/0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3R2.sol
@@ -1,85 +1,48 @@
-/*

- * @source: etherscan.io 

- * @author: -

- * @vulnerable_at_lines: 29

- */

-

-pragma solidity ^0.4.25;

-

-contract W_WALLET

-{

-    function Put(uint _unlockTime)

-    public

-    payable

-    {

-        var acc = Acc[msg.sender];

-        acc.balance += msg.value;

-        acc.unlockTime = _unlockTime>now?_unlockTime:now;

-        LogFile.AddMessage(msg.sender,msg.value,"Put");

-    }

-

-    function Collect(uint _am)

-    public

-    payable

-    {

-        var acc = Acc[msg.sender];

-        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)

-        {

-            // <yes> <report> REENTRANCY

-            if(msg.sender.call.value(_am)())

-            {

-                acc.balance-=_am;

-                LogFile.AddMessage(msg.sender,_am,"Collect");

-            }

-        }

-    }

-

-    function() 

-    public 

-    payable

-    {

-        Put(0);

-    }

-

-    struct Holder   

-    {

-        uint unlockTime;

-        uint balance;

-    }

-

-    mapping (address => Holder) public Acc;

-

-    Log LogFile;

-

-    uint public MinSum = 1 ether;    

-

-    function W_WALLET(address log) public{

-        LogFile = Log(log);

-    }

-}

-

-

-contract Log 

-{

-    struct Message

-    {

-        address Sender;

-        string  Data;

-        uint Val;

-        uint  Time;

-    }

-

-    Message[] public History;

-

-    Message LastMsg;

-

-    function AddMessage(address _adr,uint _val,string _data)

-    public

-    {

-        LastMsg.Sender = _adr;

-        LastMsg.Time = now;

-        LastMsg.Val = _val;

-        LastMsg.Data = _data;

-        History.push(LastMsg);

-    }

+contract W_WALLET {

+	function Put(uint _unlockTime) payable public {

+	var acc = Acc[msg.sender];

+	acc.balance += msg.value;

+	acc.unlockTime = _unlockTime > now?_unlockTime:now;

+	LogFile.AddMessage(msg.sender, msg.value, "Put");

+	}

+	function Collect(uint _am) payable public {

+	var acc = Acc[msg.sender];

+	if(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime){

+	if(msg.sender.call.value(_am)()){

+	acc.balance -= _am;

+	LogFile.AddMessage(msg.sender, _am, "Collect");

+	}

+	}

+	}

+	function () payable public {

+	Put(0);

+	}

+	struct Holder{

+	uint unlockTime;

+	uint balance;

+	}

+	mapping(address => Holder) public Acc;

+	Log LogFile;

+	uint public MinSum = 1 ether;

+	constructor(address log) public {

+	LogFile = Log(log);

+	}

+	

+}contract Log {

+	struct Message{

+	address Sender;

+	string Data;

+	uint Val;

+	uint Time;

+	}

+	Message[] public History;

+	Message LastMsg;

+	function AddMessage(address _adr, uint _val, string _data) public {

+	LastMsg.Sender = _adr;

+	LastMsg.Time = now;

+	LastMsg.Val = _val;

+	LastMsg.Data = _data;

+	History.push(LastMsg);

+	}

+	

 }