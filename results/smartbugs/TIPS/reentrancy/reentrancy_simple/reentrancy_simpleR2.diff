--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/reentrancy_simple.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/TIPS/reentrancy/reentrancy_simple/reentrancy_simpleR2.sol
@@ -1,29 +1,15 @@
-/*

- * @source: https://github.com/trailofbits/not-so-smart-contracts/blob/master/reentrancy/Reentrancy.sol

- * @author: -

- * @vulnerable_at_lines: 24

- */

-

- pragma solidity ^0.4.15;

-

- contract Reentrance {

-     mapping (address => uint) userBalance;

-

-     function getBalance(address u) constant returns(uint){

-         return userBalance[u];

-     }

-

-     function addToBalance() payable{

-         userBalance[msg.sender] += msg.value;

-     }

-

-     function withdrawBalance(){

-         // send userBalance[msg.sender] ethers to msg.sender

-         // if mgs.sender is a contract, it will call its fallback function

-         // <yes> <report> REENTRANCY

-         if( ! (msg.sender.call.value(userBalance[msg.sender])() ) ){

-             throw;

-         }

-         userBalance[msg.sender] = 0;

-     }

- }

+contract Reentrance {

+	mapping(address => uint) userBalance;

+	function getBalance(address u) view public returns(uint ){

+	return userBalance[u];

+	}

+	function addToBalance() payable public {

+	userBalance[msg.sender] += msg.value;

+	}

+	function withdrawBalance() public {

+	userBalance[msg.sender] = 0;

+	if(! (msg.sender.call.value(userBalance[msg.sender])())){

+	throw;}

+	}

+	

+}