--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/etherstore.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/TIPS/reentrancy/etherstore/etherstoreR2.sol
@@ -1,31 +1,17 @@
-/*

- * @source: https://github.com/sigp/solidity-security-blog

- * @author: Suhabe Bugrara

- * @vulnerable_at_lines: 27

- */

-

-//added pragma version

-pragma solidity ^0.4.10;

-

 contract EtherStore {

-

-    uint256 public withdrawalLimit = 1 ether;

-    mapping(address => uint256) public lastWithdrawTime;

-    mapping(address => uint256) public balances;

-

-    function depositFunds() public payable {

-        balances[msg.sender] += msg.value;

-    }

-

-    function withdrawFunds (uint256 _weiToWithdraw) public {

-        require(balances[msg.sender] >= _weiToWithdraw);

-        // limit the withdrawal

-        require(_weiToWithdraw <= withdrawalLimit);

-        // limit the time allowed to withdraw

-        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);

-        // <yes> <report> REENTRANCY

-        require(msg.sender.call.value(_weiToWithdraw)());

-        balances[msg.sender] -= _weiToWithdraw;

-        lastWithdrawTime[msg.sender] = now;

-    }

- }

+	uint256 public withdrawalLimit = 1 ether;

+	mapping(address => uint256) public lastWithdrawTime;

+	mapping(address => uint256) public balances;

+	function depositFunds() payable public {

+	balances[msg.sender] += msg.value;

+	}

+	function withdrawFunds(uint256 _weiToWithdraw) public {

+	require(balances[msg.sender] >= _weiToWithdraw);

+	require(_weiToWithdraw <= withdrawalLimit);

+	require(now >= lastWithdrawTime[msg.sender] + 1 weeks);

+	balances[msg.sender] -= _weiToWithdraw;

+	lastWithdrawTime[msg.sender] = now;

+	require(msg.sender.call.value(_weiToWithdraw)());

+	}

+	

+}