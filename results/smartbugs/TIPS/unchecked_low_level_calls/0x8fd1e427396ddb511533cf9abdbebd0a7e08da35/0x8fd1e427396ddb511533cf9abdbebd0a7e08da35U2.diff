--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/unchecked_low_level_calls/0x8fd1e427396ddb511533cf9abdbebd0a7e08da35.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/TIPS/unchecked_low_level_calls/0x8fd1e427396ddb511533cf9abdbebd0a7e08da35/0x8fd1e427396ddb511533cf9abdbebd0a7e08da35U2.sol
@@ -1,104 +1,56 @@
-/*

- * @source: etherscan.io 

- * @author: -

- * @vulnerable_at_lines: 44,97

- */

-

-pragma solidity ^0.4.18;

-

-contract Ownable

-{

-    address newOwner;

-    address owner = msg.sender;

-    

-    function changeOwner(address addr)

-    public

-    onlyOwner

-    {

-        newOwner = addr;

-    }

-    

-    function confirmOwner() 

-    public

-    {

-        if(msg.sender==newOwner)

-        {

-            owner=newOwner;

-        }

-    }

-    

-    modifier onlyOwner

-    {

-        if(owner == msg.sender)_;

-    }

-}

-

-contract Token is Ownable

-{

-    address owner = msg.sender;

-    function WithdrawToken(address token, uint256 amount,address to)

-    public 

-    onlyOwner

-    {

-        // <yes> <report> UNCHECKED_LL_CALLS

-        token.call(bytes4(sha3("transfer(address,uint256)")),to,amount); 

-    }

-}

-

-contract TokenBank is Token

-{

-    uint public MinDeposit;

-    mapping (address => uint) public Holders;

-    

-     ///Constructor

-    function initTokenBank()

-    public

-    {

-        owner = msg.sender;

-        MinDeposit = 1 ether;

-    }

-    

-    function()

-    payable

-    {

-        Deposit();

-    }

-   

-    function Deposit() 

-    payable

-    {

-        if(msg.value>=MinDeposit)

-        {

-            Holders[msg.sender]+=msg.value;

-        }

-    }

-    

-    function WitdrawTokenToHolder(address _to,address _token,uint _amount)

-    public

-    onlyOwner

-    {

-        if(Holders[_to]>0)

-        {

-            Holders[_to]=0;

-            WithdrawToken(_token,_amount,_to);     

-        }

-    }

-   

-    function WithdrawToHolder(address _addr, uint _wei) 

-    public

-    onlyOwner

-    payable

-    {

-        if(Holders[msg.sender]>0)

-        {

-            if(Holders[_addr]>=_wei)

-            {

-                // <yes> <report> UNCHECKED_LL_CALLS

-                _addr.call.value(_wei);

-                Holders[_addr]-=_wei;

-            }

-        }

-    }

-    

-    function Bal() public constant returns(uint){return this.balance;}

+contract Ownable {

+	address newOwner;

+	address owner = msg.sender;

+	function changeOwner(address addr) onlyOwner public {

+	newOwner = addr;

+	}

+	function confirmOwner() public {

+	if(msg.sender == newOwner){

+	owner = newOwner;

+	}

+	}

+	modifier onlyOwner(){

+	if(owner == msg.sender){

+	_;}

+	}

+	

+}contract Token is Ownable {

+	address owner = msg.sender;

+	function WithdrawToken(address token, uint256 amount, address to) onlyOwner public {

+	token.call(bytes4(sha3("transfer(address,uint256)")), to, amount);

+	}

+	

+}contract TokenBank is Token {

+	uint public MinDeposit;

+	mapping(address => uint) public Holders;

+	function initTokenBank() public {

+	owner = msg.sender;

+	MinDeposit = 1 ether;

+	}

+	function () payable public {

+	Deposit();

+	}

+	function Deposit() payable public {

+	if(msg.value >= MinDeposit){

+	Holders[msg.sender] += msg.value;

+	}

+	}

+	function WitdrawTokenToHolder(address _to, address _token, uint _amount) onlyOwner public {

+	if(Holders[_to] > 0){

+	Holders[_to] = 0;

+	WithdrawToken(_token, _amount, _to);

+	}

+	}

+	function WithdrawToHolder(address _addr, uint _wei) onlyOwner payable public {

+	if(Holders[msg.sender] > 0){

+	if(Holders[_addr] >= _wei){

+	_addr.call.value(_wei);

+	Holders[_addr] -= _wei;

+	}

+	}

+	}

+	function Bal() view public returns(uint ){

+	return this.balance;

+	}

+	

 }