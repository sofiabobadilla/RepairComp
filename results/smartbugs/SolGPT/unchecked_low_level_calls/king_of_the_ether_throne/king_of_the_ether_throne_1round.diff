--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/unchecked_low_level_calls/king_of_the_ether_throne.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SolGPT/unchecked_low_level_calls/king_of_the_ether_throne/king_of_the_ether_throne_1round.sol
@@ -1,75 +1,33 @@
-/*

- * @source: https://github.com/kieranelby/KingOfTheEtherThrone/blob/v0.4.0/contracts/KingOfTheEtherThrone.sol

- * @author: -

- * @vulnerable_at_lines: 110,118,132,174

- */

-

-// A chain-game contract that maintains a 'throne' which agents may pay to rule.

-// See www.kingoftheether.com & https://github.com/kieranelby/KingOfTheEtherThrone .

-// (c) Kieran Elby 2016. All rights reserved.

-// v0.4.0.

-// Inspired by ethereumpyramid.com and the (now-gone?) "magnificent bitcoin gem".

-

-// This contract lives on the blockchain at 0xb336a86e2feb1e87a328fcb7dd4d04de3df254d0

-// and was compiled (using optimization) with:

-// Solidity version: 0.2.1-fad2d4df/.-Emscripten/clang/int linked to libethereum

-

-// For future versions it would be nice to ...

-// TODO - enforce time-limit on reign (can contracts do that without external action)?

-// TODO - add a random reset?

-// TODO - add bitcoin bridge so agents can pay in bitcoin?

-// TODO - maybe allow different return payment address?

-

-//added pragma version

 pragma solidity ^0.4.0;

 

 contract KingOfTheEtherThrone {

 

     struct Monarch {

-        // Address to which their compensation will be sent.

         address etherAddress;

-        // A name by which they wish to be known.

-        // NB: Unfortunately "string" seems to expose some bugs in web3.

         string name;

-        // How much did they pay to become monarch?

         uint claimPrice;

-        // When did their rule start (based on block.timestamp)?

         uint coronationTimestamp;

     }

 

-    // The wizard is the hidden power behind the throne; they

-    // occupy the throne during gaps in succession and collect fees.

     address wizardAddress;

 

-    // Used to ensure only the wizard can do some things.

-    modifier onlywizard { if (msg.sender == wizardAddress) _; }

+    modifier onlywizard { 

+        require(msg.sender == wizardAddress);

+        _; 

+    }

 

-    // How much must the first monarch pay?

     uint constant startingClaimPrice = 100 finney;

 

-    // The next claimPrice is calculated from the previous claimFee

-    // by multiplying by claimFeeAdjustNum and dividing by claimFeeAdjustDen -

-    // for example, num=3 and den=2 would cause a 50% increase.

     uint constant claimPriceAdjustNum = 3;

     uint constant claimPriceAdjustDen = 2;

 

-    // How much of each claimFee goes to the wizard (expressed as a fraction)?

-    // e.g. num=1 and den=100 would deduct 1% for the wizard, leaving 99% as

-    // the compensation fee for the usurped monarch.

     uint constant wizardCommissionFractionNum = 1;

     uint constant wizardCommissionFractionDen = 100;

 

-    // How much must an agent pay now to become the monarch?

     uint public currentClaimPrice;

-

-    // The King (or Queen) of the Ether.

     Monarch public currentMonarch;

-

-    // Earliest-first list of previous throne holders.

     Monarch[] public pastMonarchs;

 

-    // Create a new throne, with the creator as wizard and first ruler.

-    // Sets up some hopefully sensible defaults.

     function KingOfTheEtherThrone() {

         wizardAddress = msg.sender;

         currentClaimPrice = startingClaimPrice;

@@ -81,60 +39,39 @@
         );

     }

 

-    function numberOfMonarchs() constant returns (uint n) {

+    function numberOfMonarchs() public view returns (uint) {

         return pastMonarchs.length;

     }

 

-    // Fired when the throne is claimed.

-    // In theory can be used to help build a front-end.

     event ThroneClaimed(

         address usurperEtherAddress,

         string usurperName,

         uint newClaimPrice

     );

 

-    // Fallback function - simple transactions trigger this.

-    // Assume the message data is their desired name.

-    function() {

+    function() public {

         claimThrone(string(msg.data));

     }

 

-    // Claim the throne for the given name by paying the currentClaimFee.

-    function claimThrone(string name) {

+    function claimThrone(string name) public payable {

 

         uint valuePaid = msg.value;

 

-        // If they paid too little, reject claim and refund their money.

-        if (valuePaid < currentClaimPrice) {

-            // <yes> <report> UNCHECKED_LL_CALLS

-            msg.sender.send(valuePaid);

-            return;

+        require(valuePaid >= currentClaimPrice);

+

+        if (valuePaid > currentClaimPrice) {

+            uint excessPaid = valuePaid - currentClaimPrice;

+            msg.sender.transfer(excessPaid);

+            valuePaid = currentClaimPrice;

         }

 

-        // If they paid too much, continue with claim but refund the excess.

-        if (valuePaid > currentClaimPrice) {

-            uint excessPaid = valuePaid - currentClaimPrice;

-            // <yes> <report> UNCHECKED_LL_CALLS

-            msg.sender.send(excessPaid);

-            valuePaid = valuePaid - excessPaid;

-        }

-

-        // The claim price payment goes to the current monarch as compensation

-        // (with a commission held back for the wizard). We let the wizard's

-        // payments accumulate to avoid wasting gas sending small fees.

-

         uint wizardCommission = (valuePaid * wizardCommissionFractionNum) / wizardCommissionFractionDen;

-

         uint compensation = valuePaid - wizardCommission;

 

         if (currentMonarch.etherAddress != wizardAddress) {

-            // <yes> <report> UNCHECKED_LL_CALLS

-            currentMonarch.etherAddress.send(compensation);

-        } else {

-            // When the throne is vacant, the fee accumulates for the wizard.

+            currentMonarch.etherAddress.transfer(compensation);

         }

 

-        // Usurp the current monarch, replacing them with the new one.

         pastMonarchs.push(currentMonarch);

         currentMonarch = Monarch(

             msg.sender,

@@ -143,8 +80,6 @@
             block.timestamp

         );

 

-        // Increase the claim fee for next time.

-        // Stop number of trailing decimals getting silly - we round it a bit.

         uint rawNewClaimPrice = currentClaimPrice * claimPriceAdjustNum / claimPriceAdjustDen;

         if (rawNewClaimPrice < 10 finney) {

             currentClaimPrice = rawNewClaimPrice;

@@ -164,19 +99,14 @@
             currentClaimPrice = rawNewClaimPrice;

         }

 

-        // Hail the new monarch!

         ThroneClaimed(currentMonarch.etherAddress, currentMonarch.name, currentClaimPrice);

     }

 

-    // Used only by the wizard to collect his commission.

-    function sweepCommission(uint amount) onlywizard {

-        // <yes> <report> UNCHECKED_LL_CALLS

-        wizardAddress.send(amount);

+    function sweepCommission(uint amount) public onlywizard {

+        wizardAddress.transfer(amount);

     }

 

-    // Used only by the wizard to collect his commission.

-    function transferOwnership(address newOwner) onlywizard {

+    function transferOwnership(address newOwner) public onlywizard {

         wizardAddress = newOwner;

     }

-

-}

+}