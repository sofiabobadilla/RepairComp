--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/unchecked_low_level_calls/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SolGPT/unchecked_low_level_calls/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984_4round.sol
@@ -1,30 +1,29 @@
-/*

- * @source: etherscan.io 

- * @author: -

- * @vulnerable_at_lines: 27

- */

+pragma solidity ^0.4.19;

 

-pragma solidity ^0.4.19;

 contract Token {

-    function transfer(address _to, uint _value) returns (bool success);

-    function balanceOf(address _owner) constant returns (uint balance);

+    function transfer(address _to, uint _value) public returns (bool success);

+    function balanceOf(address _owner) public view returns (uint balance);

 }

+

 contract EtherGet {

     address owner;

-    function EtherGet() {

+

+    function EtherGet() public {

         owner = msg.sender;

     }

+

     function withdrawTokens(address tokenContract) public {

         Token tc = Token(tokenContract);

-        tc.transfer(owner, tc.balanceOf(this));

+        require(tc.transfer(owner, tc.balanceOf(this)));

     }

+

     function withdrawEther() public {

-        owner.transfer(this.balance);

+        require(owner.send(this.balance));

     }

+

     function getTokens(uint num, address addr) public {

         for(uint i = 0; i < num; i++){

-            // <yes> <report> UNCHECKED_LL_CALLS

-            addr.call.value(0 wei)();

+            require(addr.call.value(0 wei)());

         }

     }

 }