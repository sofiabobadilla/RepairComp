--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/front_running/ERC20.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SolGPT/front_running/ERC20/ERC20_3round.sol
@@ -1,129 +1,56 @@
-/*

- * @source: https://github.com/SmartContractSecurity/SWC-registry/blob/master/test_cases/transaction_order_dependence/ERC20.sol

- * @author: -

- * @vulnerable_at_lines: 110,113

- */

-

 pragma solidity ^0.4.24;

 

-/** Taken from the OpenZeppelin github

- * @title SafeMath

- * @dev Math operations with safety checks that revert on error

- */

-library SafeMath {

+import "./SafeMath.sol";

 

-  /**

-  * @dev Multiplies two numbers, reverts on overflow.

-  */

-  function mul(uint256 a, uint256 b) internal pure returns (uint256) {

-    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the

-    // benefit is lost if 'b' is also tested.

-    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522

-    if (a == 0) {

-      return 0;

+contract ERC20 {

+    using SafeMath for uint256;

+

+    event Transfer(address indexed from, address indexed to, uint256 value);

+    event Approval(address indexed owner, address indexed spender, uint256 value);

+

+    mapping(address => uint256) private _balances;

+    mapping(address => mapping(address => uint256)) private _allowed;

+    uint256 private _totalSupply;

+

+    constructor(uint256 totalSupply) public {

+        _balances[msg.sender] = totalSupply;

     }

 

-    uint256 c = a * b;

-    require(c / a == b);

+    function balanceOf(address owner) public view returns (uint256) {

+        return _balances[owner];

+    }

 

-    return c;

-  }

+    function allowance(address owner, address spender) public view returns (uint256) {

+        return _allowed[owner][spender];

+    }

 

-  /**

-  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.

-  */

-  function div(uint256 a, uint256 b) internal pure returns (uint256) {

-    require(b > 0); // Solidity only automatically asserts when dividing by 0

-    uint256 c = a / b;

-    // assert(a == b * c + a % b); // There is no case in which this doesn't hold

+    function transfer(address to, uint256 value) public returns (bool) {

+        require(value <= _balances[msg.sender]);

+        require(to != address(0));

 

-    return c;

-  }

+        _balances[msg.sender] = _balances[msg.sender].sub(value);

+        _balances[to] = _balances[to].add(value);

+        emit Transfer(msg.sender, to, value);

+        return true;

+    }

 

-  /**

-  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).

-  */

-  function sub(uint256 a, uint256 b) internal pure returns (uint256) {

-    require(b <= a);

-    uint256 c = a - b;

+    function approve(address spender, uint256 value) public returns (bool) {

+        require(spender != address(0));

 

-    return c;

-  }

+        _allowed[msg.sender][spender] = value;

+        emit Approval(msg.sender, spender, value);

+        return true;

+    }

 

-  /**

-  * @dev Adds two numbers, reverts on overflow.

-  */

-  function add(uint256 a, uint256 b) internal pure returns (uint256) {

-    uint256 c = a + b;

-    require(c >= a);

+    function transferFrom(address from, address to, uint256 value) public returns (bool) {

+        require(value <= _balances[from]);

+        require(value <= _allowed[from][msg.sender]);

+        require(to != address(0));

 

-    return c;

-  }

-

-  /**

-  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),

-  * reverts when dividing by zero.

-  */

-  function mod(uint256 a, uint256 b) internal pure returns (uint256) {

-    require(b != 0);

-    return a % b;

-  }

-}

-

-

-contract ERC20 {

-

-  event Transfer( address indexed from, address indexed to, uint256 value );

-  event Approval( address indexed owner, address indexed spender, uint256 value);

-  using SafeMath for *;

-

-  mapping (address => uint256) private _balances;

-

-  mapping (address => mapping (address => uint256)) private _allowed;

-

-  uint256 private _totalSupply;

-

-  constructor(uint totalSupply){

-    _balances[msg.sender] = totalSupply;

-  }

-

-  function balanceOf(address owner) public view returns (uint256) {

-    return _balances[owner];

-  }

-

-

-  function allowance(address owner, address spender) public view returns (uint256)

-  {

-    return _allowed[owner][spender];

-  }

-

-  function transfer(address to, uint256 value) public returns (bool) {

-    require(value <= _balances[msg.sender]);

-    require(to != address(0));

-

-    _balances[msg.sender] = _balances[msg.sender].sub(value);

-    _balances[to] = _balances[to].add(value);

-    emit Transfer(msg.sender, to, value);

-    return true;

-  }

-  // <yes> <report> FRONT_RUNNING

-  function approve(address spender, uint256 value) public returns (bool) {

-    require(spender != address(0));

-     // <yes> <report> FRONT_RUNNING

-    _allowed[msg.sender][spender] = value;

-    emit Approval(msg.sender, spender, value);

-    return true;

-  }

-

-  function transferFrom(address from, address to, uint256 value) public returns (bool) {

-    require(value <= _balances[from]);

-    require(value <= _allowed[from][msg.sender]);

-    require(to != address(0));

-

-    _balances[from] = _balances[from].sub(value);

-    _balances[to] = _balances[to].add(value);

-    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);

-    emit Transfer(from, to, value);

-    return true;

-  }

+        _balances[from] = _balances[from].sub(value);

+        _balances[to] = _balances[to].add(value);

+        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);

+        emit Transfer(from, to, value);

+        return true;

+    }

 }