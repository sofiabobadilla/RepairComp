2024-07-04 18:35:44,468 - root - INFO - 
Reading file 'insecure_transfer.sol' 

2024-07-04 18:35:44,469 - root - INFO - 
Pragma: 0.4.11 

2024-07-04 18:35:44,469 - root - INFO - 
Processing /home/mokita/sc_study/smartbugs-curated/dataset/arithmetic/insecure_transfer.sol 

2024-07-04 18:35:44,469 - root - INFO - 
try 1/4: /home/mokita/sc_study/smartbugs-curated/dataset/arithmetic/insecure_transfer_1round.sol  

2024-07-04 18:35:44,477 - root - INFO - 

        Docker container name: slither
        Docker image name: trailofbits/eth-security-toolbox
        Docker shared folder: /home/mokita/sc_study/smartbugs-curated/dataset:/home/ethsec/shared
        Docker command: None
         

2024-07-04 18:35:44,480 - root - INFO - 
Running command: solc-select use --always-install 0.4.11 

2024-07-04 18:35:44,653 - root - INFO - 
Running command: slither shared/arithmetic/insecure_transfer.sol --json - 

2024-07-04 18:35:45,391 - root - INFO - 
b'{"success": true, "error": null, "results": {"detectors": [{"elements": [{"type": "contract", "name": "IntegerOverflowAdd", "source_mapping": {"start": 219, "length": 365, "filename_relative": "shared/arithmetic/insecure_transfer.sol", "filename_absolute": "/home/ethsec/shared/arithmetic/insecure_transfer.sol", "filename_short": "shared/arithmetic/insecure_transfer.sol", "is_dependency": false, "lines": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "starting_column": 1, "ending_column": 2}}, {"type": "function", "name": "transfer", "source_mapping": {"start": 321, "length": 260, "filename_relative": "shared/arithmetic/insecure_transfer.sol", "filename_absolute": "/home/ethsec/shared/arithmetic/insecure_transfer.sol", "filename_short": "shared/arithmetic/insecure_transfer.sol", "is_dependency": false, "lines": [13, 14, 15, 16, 17, 18, 19], "starting_column": 5, "ending_column": 2}, "type_specific_fields": {"parent": {"type": "contract", "name": "IntegerOverflowAdd", "source_mapping": {"start": 219, "length": 365, "filename_relative": "shared/arithmetic/insecure_transfer.sol", "filename_absolute": "/home/ethsec/shared/arithmetic/insecure_transfer.sol", "filename_short": "shared/arithmetic/insecure_transfer.sol", "is_dependency": false, "lines": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "starting_column": 1, "ending_column": 2}}, "signature": "transfer(address,uint256)"}}], "description": "IntegerOverflowAdd (shared/arithmetic/insecure_transfer.sol#9-21) has incorrect ERC20 function interface:IntegerOverflowAdd.transfer(address,uint256) (shared/arithmetic/insecure_transfer.sol#13-19)\\n", "markdown": "[IntegerOverflowAdd](shared/arithmetic/insecure_transfer.sol#L9-L21) has incorrect ERC20 function interface:[IntegerOverflowAdd.transfer(address,uint256)](shared/arithmetic/insecure_transfer.sol#L13-L19)\\n", "first_markdown_element": "shared/arithmetic/insecure_transfer.sol#L9-L21", "id": "ef9f3fbf38b040664a34d4ec12234af6d9afba661a17707f65b009785f00dbc0", "check": "erc20-interface", "impact": "Medium", "confidence": "High"}, {"elements": [], "description": "solc-0.4.11 is not recommended for deployment\\n", "markdown": "solc-0.4.11 is not recommended for deployment\\n", "first_markdown_element": "", "id": "ae83d48790cd633ba7c2546237b2b7b315df466f7ac70ed9b19932c059aba74b", "check": "solc-version", "impact": "Informational", "confidence": "High"}, {"elements": [{"type": "pragma", "name": "^0.4.10", "source_mapping": {"start": 193, "length": 24, "filename_relative": "shared/arithmetic/insecure_transfer.sol", "filename_absolute": "/home/ethsec/shared/arithmetic/insecure_transfer.sol", "filename_short": "shared/arithmetic/insecure_transfer.sol", "is_dependency": false, "lines": [7], "starting_column": 1, "ending_column": 25}, "type_specific_fields": {"directive": ["solidity", "^", "0.4", ".10"]}}], "description": "Pragma version^0.4.10 (shared/arithmetic/insecure_transfer.sol#7) allows old versions\\n", "markdown": "Pragma version[^0.4.10](shared/arithmetic/insecure_transfer.sol#L7) allows old versions\\n", "first_markdown_element": "shared/arithmetic/insecure_transfer.sol#L7", "id": "f1eb65ea62ee037a7d4d5ad551982a957fc8cb9999335551d7f434fae194aeed", "check": "solc-version", "impact": "Informational", "confidence": "High"}, {"elements": [{"type": "variable", "name": "_value", "source_mapping": {"start": 352, "length": 14, "filename_relative": "shared/arithmetic/insecure_transfer.sol", "filename_absolute": "/home/ethsec/shared/arithmetic/insecure_transfer.sol", "filename_short": "shared/arithmetic/insecure_transfer.sol", "is_dependency": false, "lines": [13], "starting_column": 36, "ending_column": 50}, "type_specific_fields": {"parent": {"type": "function", "name": "transfer", "source_mapping": {"start": 321, "length": 260, "filename_relative": "shared/arithmetic/insecure_transfer.sol", "filename_absolute": "/home/ethsec/shared/arithmetic/insecure_transfer.sol", "filename_short": "shared/arithmetic/insecure_transfer.sol", "is_dependency": false, "lines": [13, 14, 15, 16, 17, 18, 19], "starting_column": 5, "ending_column": 2}, "type_specific_fields": {"parent": {"type": "contract", "name": "IntegerOverflowAdd", "source_mapping": {"start": 219, "length": 365, "filename_relative": "shared/arithmetic/insecure_transfer.sol", "filename_absolute": "/home/ethsec/shared/arithmetic/insecure_transfer.sol", "filename_short": "shared/arithmetic/insecure_transfer.sol", "is_dependency": false, "lines": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "starting_column": 1, "ending_column": 2}}, "signature": "transfer(address,uint256)"}}}, "additional_fields": {"target": "parameter", "convention": "mixedCase"}}], "description": "Parameter IntegerOverflowAdd.transfer(address,uint256)._value (shared/arithmetic/insecure_transfer.sol#13) is not in mixedCase\\n", "markdown": "Parameter [IntegerOverflowAdd.transfer(address,uint256)._value](shared/arithmetic/insecure_transfer.sol#L13) is not in mixedCase\\n", "first_markdown_element": "shared/arithmetic/insecure_transfer.sol#L13", "id": "92a384a5bf423a1a6331d78f50973385002c37468330431c1bfa5ef1a69c3c69", "check": "naming-convention", "impact": "Informational", "confidence": "High"}, {"elements": [{"type": "variable", "name": "_to", "source_mapping": {"start": 339, "length": 11, "filename_relative": "shared/arithmetic/insecure_transfer.sol", "filename_absolute": "/home/ethsec/shared/arithmetic/insecure_transfer.sol", "filename_short": "shared/arithmetic/insecure_transfer.sol", "is_dependency": false, "lines": [13], "starting_column": 23, "ending_column": 34}, "type_specific_fields": {"parent": {"type": "function", "name": "transfer", "source_mapping": {"start": 321, "length": 260, "filename_relative": "shared/arithmetic/insecure_transfer.sol", "filename_absolute": "/home/ethsec/shared/arithmetic/insecure_transfer.sol", "filename_short": "shared/arithmetic/insecure_transfer.sol", "is_dependency": false, "lines": [13, 14, 15, 16, 17, 18, 19], "starting_column": 5, "ending_column": 2}, "type_specific_fields": {"parent": {"type": "contract", "name": "IntegerOverflowAdd", "source_mapping": {"start": 219, "length": 365, "filename_relative": "shared/arithmetic/insecure_transfer.sol", "filename_absolute": "/home/ethsec/shared/arithmetic/insecure_transfer.sol", "filename_short": "shared/arithmetic/insecure_transfer.sol", "is_dependency": false, "lines": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "starting_column": 1, "ending_column": 2}}, "signature": "transfer(address,uint256)"}}}, "additional_fields": {"target": "parameter", "convention": "mixedCase"}}], "description": "Parameter IntegerOverflowAdd.transfer(address,uint256)._to (shared/arithmetic/insecure_transfer.sol#13) is not in mixedCase\\n", "markdown": "Parameter [IntegerOverflowAdd.transfer(address,uint256)._to](shared/arithmetic/insecure_transfer.sol#L13) is not in mixedCase\\n", "first_markdown_element": "shared/arithmetic/insecure_transfer.sol#L13", "id": "93fafa891c9ce3005d05cc404c308089dd6ece5735e0bed2259f0105cba298d6", "check": "naming-convention", "impact": "Informational", "confidence": "High"}]}}\n' 

2024-07-04 18:35:45,392 - root - INFO - 
Found 1 vulnerabilities of severity Medium 

2024-07-04 18:35:47,250 - root - INFO - 
NEW CODE: pragma solidity ^0.4.10;

contract IntegerOverflowAdd {
    mapping (address => uint256) public balanceOf;

    function transfer(address _to, uint256 _value) public {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        require(balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflow
        balanceOf[_to] += _value;
    }
} 

2024-07-04 18:35:47,250 - root - INFO - 
try 2/4: /home/mokita/sc_study/smartbugs-curated/dataset/arithmetic/insecure_transfer_2round.sol  

2024-07-04 18:35:47,251 - root - INFO - 
Found 1 vulnerabilities of severity Medium 

2024-07-04 18:35:49,091 - root - INFO - 
NEW CODE: pragma solidity ^0.4.10;

contract IntegerOverflowAdd {
    mapping (address => uint256) public balanceOf;

    function transfer(address _to, uint256 _value) public {
        require(balanceOf[msg.sender] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflow
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
    }
} 

2024-07-04 18:35:49,092 - root - INFO - 
try 3/4: /home/mokita/sc_study/smartbugs-curated/dataset/arithmetic/insecure_transfer_3round.sol  

2024-07-04 18:35:49,092 - root - INFO - 
Found 1 vulnerabilities of severity Medium 

2024-07-04 18:35:51,035 - root - INFO - 
NEW CODE: pragma solidity ^0.4.10;

contract IntegerOverflowAdd {
    mapping (address => uint256) public balanceOf;

    function transfer(address _to, uint256 _value) public {
        require(balanceOf[msg.sender] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflow
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
    }
} 

2024-07-04 18:35:51,036 - root - INFO - 
try 4/4: /home/mokita/sc_study/smartbugs-curated/dataset/arithmetic/insecure_transfer_4round.sol  

2024-07-04 18:35:51,036 - root - INFO - 
Found 1 vulnerabilities of severity Medium 

2024-07-04 18:35:53,289 - root - INFO - 
NEW CODE: pragma solidity ^0.4.10;

contract IntegerOverflowAdd {
    mapping (address => uint256) public balanceOf;

    function transfer(address _to, uint256 _value) public {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        
        // Check for integer overflow before adding the value
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        
        balanceOf[_to] += _value;
    }
} 

