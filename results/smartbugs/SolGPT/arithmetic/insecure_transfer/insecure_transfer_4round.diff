--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/arithmetic/insecure_transfer.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SolGPT/arithmetic/insecure_transfer/insecure_transfer_4round.sol
@@ -1,21 +1,15 @@
-/*

- * @source: https://consensys.github.io/smart-contract-best-practices/known_attacks/#front-running-aka-transaction-ordering-dependence

- * @author: consensys

- * @vulnerable_at_lines: 18

- */

-

 pragma solidity ^0.4.10;

 

 contract IntegerOverflowAdd {

     mapping (address => uint256) public balanceOf;

 

-    // INSECURE

-    function transfer(address _to, uint256 _value) public{

-        /* Check if sender has balance */

+    function transfer(address _to, uint256 _value) public {

         require(balanceOf[msg.sender] >= _value);

         balanceOf[msg.sender] -= _value;

-        // <yes> <report> ARITHMETIC

+        

+        // Check for integer overflow before adding the value

+        require(balanceOf[_to] + _value >= balanceOf[_to]);

+        

         balanceOf[_to] += _value;

-}

-

-}

+    }

+}