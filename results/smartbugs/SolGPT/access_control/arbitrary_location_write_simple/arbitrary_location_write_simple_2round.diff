--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/access_control/arbitrary_location_write_simple.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SolGPT/access_control/arbitrary_location_write_simple/arbitrary_location_write_simple_2round.sol
@@ -1,40 +1,33 @@
-/*

- * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-124#arbitrary-location-write-simplesol

- * @author: Suhabe Bugrara

- * @vulnerable_at_lines: 27

- */

+pragma solidity ^0.4.25;

 

- pragma solidity ^0.4.25;

+contract Wallet {

+    uint[] private bonusCodes;

+    address private owner;

 

- contract Wallet {

-     uint[] private bonusCodes;

-     address private owner;

+    constructor() public {

+        bonusCodes = new uint[](0);

+        owner = msg.sender;

+    }

 

-     constructor() public {

-         bonusCodes = new uint[](0);

-         owner = msg.sender;

-     }

+    function () public payable {

+    }

 

-     function () public payable {

-     }

+    function PushBonusCode(uint c) public {

+        bonusCodes.push(c);

+    }

 

-     function PushBonusCode(uint c) public {

-         bonusCodes.push(c);

-     }

+    function PopBonusCode() public {

+        require(bonusCodes.length > 0); 

+        bonusCodes.length--; 

+    }

 

-     function PopBonusCode() public {

-         // <yes> <report> ACCESS_CONTROL

-         require(0 <= bonusCodes.length); // this condition is always true since array lengths are unsigned

-         bonusCodes.length--; // an underflow can be caused here

-     }

+    function UpdateBonusCodeAt(uint idx, uint c) public {

+        require(idx < bonusCodes.length);

+        bonusCodes[idx] = c; 

+    }

 

-     function UpdateBonusCodeAt(uint idx, uint c) public {

-         require(idx < bonusCodes.length);

-         bonusCodes[idx] = c; // write to any index less than bonusCodes.length

-     }

-

-     function Destroy() public {

-         require(msg.sender == owner);

-         selfdestruct(msg.sender);

-     }

- }

+    function Destroy() public {

+        require(msg.sender == owner);

+        selfdestruct(msg.sender);

+    }

+}