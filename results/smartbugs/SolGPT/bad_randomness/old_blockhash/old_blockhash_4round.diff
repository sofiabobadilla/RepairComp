--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/bad_randomness/old_blockhash.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SolGPT/bad_randomness/old_blockhash/old_blockhash_4round.sol
@@ -1,18 +1,10 @@
-/*

- * @source: https://github.com/SmartContractSecurity/SWC-registry/blob/master/test_cases/weak_randomness/old_blockhash.sol

- * @author: -

- * @vulnerable_at_lines: 35

- */

-

 pragma solidity ^0.4.24;

 

-//Based on the the Capture the Ether challange at https://capturetheether.com/challenges/lotteries/predict-the-block-hash/

-//Note that while it seems to have a 1/2^256 chance you guess the right hash, actually blockhash returns zero for blocks numbers that are more than 256 blocks ago so you can guess zero and wait.

 contract PredictTheBlockHashChallenge {

 

-    struct guess{

-      uint block;

-      bytes32 guess;

+    struct guess {

+        uint block;

+        bytes32 guess;

     }

 

     mapping(address => guess) guesses;

@@ -24,14 +16,15 @@
     function lockInGuess(bytes32 hash) public payable {

         require(guesses[msg.sender].block == 0);

         require(msg.value == 1 ether);

+        require(block.number + 1 <= guesses[msg.sender].block + 256);

 

         guesses[msg.sender].guess = hash;

-        guesses[msg.sender].block  = block.number + 1;

+        guesses[msg.sender].block = block.number + 1;

     }

 

     function settle() public {

         require(block.number > guesses[msg.sender].block);

-        // <yes> <report> BAD_RANDOMNESS

+

         bytes32 answer = blockhash(guesses[msg.sender].block);

 

         guesses[msg.sender].block = 0;

@@ -39,4 +32,4 @@
             msg.sender.transfer(2 ether);

         }

     }

-}

+}