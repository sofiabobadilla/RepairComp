--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SolGPT/reentrancy/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b_1round.sol
@@ -1,100 +1,66 @@
-/*

- * @source: etherscan.io 

- * @author: -

- * @vulnerable_at_lines: 63

- */

-

 pragma solidity ^0.4.19;

 

-contract PENNY_BY_PENNY  

-{

-    struct Holder   

-    {

+contract PENNY_BY_PENNY {

+    struct Holder {

         uint unlockTime;

         uint balance;

     }

-    

+

     mapping (address => Holder) public Acc;

-    

     uint public MinSum;

-    

     LogFile Log;

-    

-    bool intitalized;

-    

-    function SetMinSum(uint _val)

-    public

-    {

-        if(intitalized)throw;

+    bool initialized;

+

+    function SetMinSum(uint _val) public {

+        require(!initialized);

         MinSum = _val;

     }

-    

-    function SetLogFile(address _log)

-    public

-    {

-        if(intitalized)throw;

+

+    function SetLogFile(address _log) public {

+        require(!initialized);

         Log = LogFile(_log);

     }

-    

-    function Initialized()

-    public

-    {

-        intitalized = true;

+

+    function Initialized() public {

+        initialized = true;

     }

-    

-    function Put(uint _lockTime)

-    public

-    payable

-    {

-        var acc = Acc[msg.sender];

+

+    function Put(uint _lockTime) public payable {

+        Holder storage acc = Acc[msg.sender];

         acc.balance += msg.value;

-        if(now+_lockTime>acc.unlockTime)acc.unlockTime=now+_lockTime;

-        Log.AddMessage(msg.sender,msg.value,"Put");

+        if (now + _lockTime > acc.unlockTime) {

+            acc.unlockTime = now + _lockTime;

+        }

+        Log.AddMessage(msg.sender, msg.value, "Put");

     }

-    

-    function Collect(uint _am)

-    public

-    payable

-    {

-        var acc = Acc[msg.sender];

-        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)

-        {

-            // <yes> <report> REENTRANCY

-            if(msg.sender.call.value(_am)())

-            {

-                acc.balance-=_am;

-                Log.AddMessage(msg.sender,_am,"Collect");

-            }

-        }

+

+    function Collect(uint _am) public {

+        Holder storage acc = Acc[msg.sender];

+        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);

+

+        acc.balance -= _am;

+        Log.AddMessage(msg.sender, _am, "Collect");

+

+        require(msg.sender.call.value(_am)());

     }

-    

-    function() 

-    public 

-    payable

-    {

+

+    function() public payable {

         Put(0);

     }

-    

 }

 

+contract LogFile {

+    struct Message {

+        address Sender;

+        string Data;

+        uint Val;

+        uint Time;

+    }

 

-contract LogFile

-{

-    struct Message

-    {

-        address Sender;

-        string  Data;

-        uint Val;

-        uint  Time;

-    }

-    

     Message[] public History;

-    

     Message LastMsg;

-    

-    function AddMessage(address _adr,uint _val,string _data)

-    public

-    {

+

+    function AddMessage(address _adr, uint _val, string _data) public {

         LastMsg.Sender = _adr;

         LastMsg.Time = now;

         LastMsg.Val = _val;
