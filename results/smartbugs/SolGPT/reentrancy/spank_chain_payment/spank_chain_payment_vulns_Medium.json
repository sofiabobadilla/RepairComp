[
    {
        "description": "LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546) sends eth to arbitrary user\n\tDangerous calls:\n\t- Channels[_lcID].partyAddresses[0].transfer(_balances[0]) (shared/reentrancy/spank_chain_payment.sol#534)\n\t- Channels[_lcID].partyAddresses[1].transfer(_balances[1]) (shared/reentrancy/spank_chain_payment.sol#535)\n",
        "check": "arbitrary-send-eth",
        "impact": "High",
        "confidence": "Medium",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L495-L546"
    },
    {
        "description": "Reentrancy in LedgerChannel.LCOpenTimeout(bytes32) (shared/reentrancy/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (shared/reentrancy/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (shared/reentrancy/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- delete Channels[_lcID] (shared/reentrancy/spank_chain_payment.sol#436)\n\tLedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378) can be used in cross function reentrancies:\n\t- LedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378)\n\t- LedgerChannel.LCOpenTimeout(bytes32) (shared/reentrancy/spank_chain_payment.sol#420-437)\n\t- LedgerChannel.byzantineCloseChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#756-817)\n\t- LedgerChannel.closeVirtualChannel(bytes32,bytes32) (shared/reentrancy/spank_chain_payment.sol#725-752)\n\t- LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546)\n\t- LedgerChannel.createChannel(bytes32,address,uint256,address,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#380-418)\n\t- LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492)\n\t- LedgerChannel.getChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#837-866)\n\t- LedgerChannel.initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#615-657)\n\t- LedgerChannel.joinChannel(bytes32,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#439-460)\n\t- LedgerChannel.settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#662-723)\n\t- LedgerChannel.updateLCstate(bytes32,uint256[6],bytes32,string,string) (shared/reentrancy/spank_chain_payment.sol#550-612)\n",
        "check": "reentrancy-eth",
        "impact": "High",
        "confidence": "Medium",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L420-L437"
    },
    {
        "description": "Reentrancy in LedgerChannel.byzantineCloseChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (shared/reentrancy/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (shared/reentrancy/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (shared/reentrancy/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (shared/reentrancy/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- channel.isOpen = false (shared/reentrancy/spank_chain_payment.sol#813)\n\tLedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378) can be used in cross function reentrancies:\n\t- LedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378)\n\t- LedgerChannel.LCOpenTimeout(bytes32) (shared/reentrancy/spank_chain_payment.sol#420-437)\n\t- LedgerChannel.byzantineCloseChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#756-817)\n\t- LedgerChannel.closeVirtualChannel(bytes32,bytes32) (shared/reentrancy/spank_chain_payment.sol#725-752)\n\t- LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546)\n\t- LedgerChannel.createChannel(bytes32,address,uint256,address,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#380-418)\n\t- LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492)\n\t- LedgerChannel.getChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#837-866)\n\t- LedgerChannel.initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#615-657)\n\t- LedgerChannel.joinChannel(bytes32,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#439-460)\n\t- LedgerChannel.settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#662-723)\n\t- LedgerChannel.updateLCstate(bytes32,uint256[6],bytes32,string,string) (shared/reentrancy/spank_chain_payment.sol#550-612)\n",
        "check": "reentrancy-eth",
        "impact": "High",
        "confidence": "Medium",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L756-L817"
    },
    {
        "description": "LedgerChannel._isContained(bytes32,bytes,bytes32) (shared/reentrancy/spank_chain_payment.sol#819-834) is declared view but contains assembly code\n",
        "check": "constant-function-asm",
        "impact": "Medium",
        "confidence": "Medium",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L819-L834"
    },
    {
        "description": "ECTools.recoverSigner(bytes32,string) (shared/reentrancy/spank_chain_payment.sol#62-88) is declared view but contains assembly code\n",
        "check": "constant-function-asm",
        "impact": "Medium",
        "confidence": "Medium",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L62-L88"
    },
    {
        "description": "ECTools.uintToBytes32(uint256) (shared/reentrancy/spank_chain_payment.sol#132-135) is declared view but contains assembly code\n",
        "check": "constant-function-asm",
        "impact": "Medium",
        "confidence": "Medium",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L132-L135"
    },
    {
        "description": "LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492) uses a dangerous strict equality:\n\t- require(bool,string)(Channels[_lcID].isOpen == true,Tried adding funds to a closed channel) (shared/reentrancy/spank_chain_payment.sol#466)\n",
        "check": "incorrect-equality",
        "impact": "Medium",
        "confidence": "High",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L465-L492"
    },
    {
        "description": "LedgerChannel._isContained(bytes32,bytes,bytes32) (shared/reentrancy/spank_chain_payment.sol#819-834) uses a dangerous strict equality:\n\t- cursor == _root (shared/reentrancy/spank_chain_payment.sol#833)\n",
        "check": "incorrect-equality",
        "impact": "Medium",
        "confidence": "High",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L819-L834"
    },
    {
        "description": "LedgerChannel.initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#615-657) uses a dangerous strict equality:\n\t- require(bool)(_isContained(_initState,_proof,Channels[_lcID].VCrootHash) == true) (shared/reentrancy/spank_chain_payment.sol#643)\n",
        "check": "incorrect-equality",
        "impact": "Medium",
        "confidence": "High",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L615-L657"
    },
    {
        "description": "LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546) uses a dangerous strict equality:\n\t- require(bool)(totalTokenDeposit == _balances[2] + _balances[3]) (shared/reentrancy/spank_chain_payment.sol#510)\n",
        "check": "incorrect-equality",
        "impact": "Medium",
        "confidence": "High",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L495-L546"
    },
    {
        "description": "LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546) uses a dangerous strict equality:\n\t- require(bool)(totalEthDeposit == _balances[0] + _balances[1]) (shared/reentrancy/spank_chain_payment.sol#509)\n",
        "check": "incorrect-equality",
        "impact": "Medium",
        "confidence": "High",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L495-L546"
    },
    {
        "description": "LedgerChannel.joinChannel(bytes32,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#439-460) uses a dangerous strict equality:\n\t- require(bool)(Channels[_lcID].isOpen == false) (shared/reentrancy/spank_chain_payment.sol#441)\n",
        "check": "incorrect-equality",
        "impact": "Medium",
        "confidence": "High",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L439-L460"
    },
    {
        "description": "LedgerChannel.LCOpenTimeout(bytes32) (shared/reentrancy/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false) (shared/reentrancy/spank_chain_payment.sol#421)\n",
        "check": "incorrect-equality",
        "impact": "Medium",
        "confidence": "High",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L420-L437"
    },
    {
        "description": "LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546) uses a dangerous strict equality:\n\t- require(bool)(Channels[_lcID].isOpen == true) (shared/reentrancy/spank_chain_payment.sol#506)\n",
        "check": "incorrect-equality",
        "impact": "Medium",
        "confidence": "High",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L495-L546"
    },
    {
        "description": "Reentrancy in LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balance),deposit: token transfer failure) (shared/reentrancy/spank_chain_payment.sol#473)\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balance),deposit: token transfer failure) (shared/reentrancy/spank_chain_payment.sol#483)\n\tState variables written after the call(s):\n\t- Channels[_lcID].erc20Balances[3] += _balance (shared/reentrancy/spank_chain_payment.sol#484)\n\tLedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378) can be used in cross function reentrancies:\n\t- LedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378)\n\t- LedgerChannel.LCOpenTimeout(bytes32) (shared/reentrancy/spank_chain_payment.sol#420-437)\n\t- LedgerChannel.byzantineCloseChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#756-817)\n\t- LedgerChannel.closeVirtualChannel(bytes32,bytes32) (shared/reentrancy/spank_chain_payment.sol#725-752)\n\t- LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546)\n\t- LedgerChannel.createChannel(bytes32,address,uint256,address,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#380-418)\n\t- LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492)\n\t- LedgerChannel.getChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#837-866)\n\t- LedgerChannel.initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#615-657)\n\t- LedgerChannel.joinChannel(bytes32,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#439-460)\n\t- LedgerChannel.settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#662-723)\n\t- LedgerChannel.updateLCstate(bytes32,uint256[6],bytes32,string,string) (shared/reentrancy/spank_chain_payment.sol#550-612)\n",
        "check": "reentrancy-no-eth",
        "impact": "Medium",
        "confidence": "Medium",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L465-L492"
    },
    {
        "description": "Reentrancy in LedgerChannel.createChannel(bytes32,address,uint256,address,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (shared/reentrancy/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels[_lcID].erc20Balances[0] = _balances[1] (shared/reentrancy/spank_chain_payment.sol#407)\n\tLedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378) can be used in cross function reentrancies:\n\t- LedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378)\n\t- LedgerChannel.LCOpenTimeout(bytes32) (shared/reentrancy/spank_chain_payment.sol#420-437)\n\t- LedgerChannel.byzantineCloseChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#756-817)\n\t- LedgerChannel.closeVirtualChannel(bytes32,bytes32) (shared/reentrancy/spank_chain_payment.sol#725-752)\n\t- LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546)\n\t- LedgerChannel.createChannel(bytes32,address,uint256,address,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#380-418)\n\t- LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492)\n\t- LedgerChannel.getChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#837-866)\n\t- LedgerChannel.initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#615-657)\n\t- LedgerChannel.joinChannel(bytes32,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#439-460)\n\t- LedgerChannel.settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#662-723)\n\t- LedgerChannel.updateLCstate(bytes32,uint256[6],bytes32,string,string) (shared/reentrancy/spank_chain_payment.sol#550-612)\n\t- Channels[_lcID].sequence = 0 (shared/reentrancy/spank_chain_payment.sol#410)\n\tLedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378) can be used in cross function reentrancies:\n\t- LedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378)\n\t- LedgerChannel.LCOpenTimeout(bytes32) (shared/reentrancy/spank_chain_payment.sol#420-437)\n\t- LedgerChannel.byzantineCloseChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#756-817)\n\t- LedgerChannel.closeVirtualChannel(bytes32,bytes32) (shared/reentrancy/spank_chain_payment.sol#725-752)\n\t- LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546)\n\t- LedgerChannel.createChannel(bytes32,address,uint256,address,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#380-418)\n\t- LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492)\n\t- LedgerChannel.getChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#837-866)\n\t- LedgerChannel.initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#615-657)\n\t- LedgerChannel.joinChannel(bytes32,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#439-460)\n\t- LedgerChannel.settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#662-723)\n\t- LedgerChannel.updateLCstate(bytes32,uint256[6],bytes32,string,string) (shared/reentrancy/spank_chain_payment.sol#550-612)\n\t- Channels[_lcID].confirmTime = _confirmTime (shared/reentrancy/spank_chain_payment.sol#411)\n\tLedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378) can be used in cross function reentrancies:\n\t- LedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378)\n\t- LedgerChannel.LCOpenTimeout(bytes32) (shared/reentrancy/spank_chain_payment.sol#420-437)\n\t- LedgerChannel.byzantineCloseChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#756-817)\n\t- LedgerChannel.closeVirtualChannel(bytes32,bytes32) (shared/reentrancy/spank_chain_payment.sol#725-752)\n\t- LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546)\n\t- LedgerChannel.createChannel(bytes32,address,uint256,address,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#380-418)\n\t- LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492)\n\t- LedgerChannel.getChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#837-866)\n\t- LedgerChannel.initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#615-657)\n\t- LedgerChannel.joinChannel(bytes32,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#439-460)\n\t- LedgerChannel.settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#662-723)\n\t- LedgerChannel.updateLCstate(bytes32,uint256[6],bytes32,string,string) (shared/reentrancy/spank_chain_payment.sol#550-612)\n\t- Channels[_lcID].LCopenTimeout = now + _confirmTime (shared/reentrancy/spank_chain_payment.sol#414)\n\tLedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378) can be used in cross function reentrancies:\n\t- LedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378)\n\t- LedgerChannel.LCOpenTimeout(bytes32) (shared/reentrancy/spank_chain_payment.sol#420-437)\n\t- LedgerChannel.byzantineCloseChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#756-817)\n\t- LedgerChannel.closeVirtualChannel(bytes32,bytes32) (shared/reentrancy/spank_chain_payment.sol#725-752)\n\t- LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546)\n\t- LedgerChannel.createChannel(bytes32,address,uint256,address,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#380-418)\n\t- LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492)\n\t- LedgerChannel.getChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#837-866)\n\t- LedgerChannel.initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#615-657)\n\t- LedgerChannel.joinChannel(bytes32,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#439-460)\n\t- LedgerChannel.settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#662-723)\n\t- LedgerChannel.updateLCstate(bytes32,uint256[6],bytes32,string,string) (shared/reentrancy/spank_chain_payment.sol#550-612)\n\t- Channels[_lcID].initialDeposit = _balances (shared/reentrancy/spank_chain_payment.sol#415)\n\tLedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378) can be used in cross function reentrancies:\n\t- LedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378)\n\t- LedgerChannel.LCOpenTimeout(bytes32) (shared/reentrancy/spank_chain_payment.sol#420-437)\n\t- LedgerChannel.byzantineCloseChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#756-817)\n\t- LedgerChannel.closeVirtualChannel(bytes32,bytes32) (shared/reentrancy/spank_chain_payment.sol#725-752)\n\t- LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546)\n\t- LedgerChannel.createChannel(bytes32,address,uint256,address,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#380-418)\n\t- LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492)\n\t- LedgerChannel.getChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#837-866)\n\t- LedgerChannel.initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#615-657)\n\t- LedgerChannel.joinChannel(bytes32,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#439-460)\n\t- LedgerChannel.settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#662-723)\n\t- LedgerChannel.updateLCstate(bytes32,uint256[6],bytes32,string,string) (shared/reentrancy/spank_chain_payment.sol#550-612)\n",
        "check": "reentrancy-no-eth",
        "impact": "Medium",
        "confidence": "Medium",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L380-L418"
    },
    {
        "description": "Reentrancy in LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balance),deposit: token transfer failure) (shared/reentrancy/spank_chain_payment.sol#473)\n\tState variables written after the call(s):\n\t- Channels[_lcID].erc20Balances[2] += _balance (shared/reentrancy/spank_chain_payment.sol#474)\n\tLedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378) can be used in cross function reentrancies:\n\t- LedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378)\n\t- LedgerChannel.LCOpenTimeout(bytes32) (shared/reentrancy/spank_chain_payment.sol#420-437)\n\t- LedgerChannel.byzantineCloseChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#756-817)\n\t- LedgerChannel.closeVirtualChannel(bytes32,bytes32) (shared/reentrancy/spank_chain_payment.sol#725-752)\n\t- LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546)\n\t- LedgerChannel.createChannel(bytes32,address,uint256,address,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#380-418)\n\t- LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492)\n\t- LedgerChannel.getChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#837-866)\n\t- LedgerChannel.initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#615-657)\n\t- LedgerChannel.joinChannel(bytes32,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#439-460)\n\t- LedgerChannel.settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#662-723)\n\t- LedgerChannel.updateLCstate(bytes32,uint256[6],bytes32,string,string) (shared/reentrancy/spank_chain_payment.sol#550-612)\n\t- Channels[_lcID].ethBalances[3] += msg.value (shared/reentrancy/spank_chain_payment.sol#487)\n\tLedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378) can be used in cross function reentrancies:\n\t- LedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378)\n\t- LedgerChannel.LCOpenTimeout(bytes32) (shared/reentrancy/spank_chain_payment.sol#420-437)\n\t- LedgerChannel.byzantineCloseChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#756-817)\n\t- LedgerChannel.closeVirtualChannel(bytes32,bytes32) (shared/reentrancy/spank_chain_payment.sol#725-752)\n\t- LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546)\n\t- LedgerChannel.createChannel(bytes32,address,uint256,address,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#380-418)\n\t- LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492)\n\t- LedgerChannel.getChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#837-866)\n\t- LedgerChannel.initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#615-657)\n\t- LedgerChannel.joinChannel(bytes32,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#439-460)\n\t- LedgerChannel.settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#662-723)\n\t- LedgerChannel.updateLCstate(bytes32,uint256[6],bytes32,string,string) (shared/reentrancy/spank_chain_payment.sol#550-612)\n",
        "check": "reentrancy-no-eth",
        "impact": "Medium",
        "confidence": "Medium",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L465-L492"
    },
    {
        "description": "Reentrancy in LedgerChannel.joinChannel(bytes32,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#439-460):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),joinChannel: token transfer failure) (shared/reentrancy/spank_chain_payment.sol#449)\n\tState variables written after the call(s):\n\t- Channels[_lcID].erc20Balances[1] = _balances[1] (shared/reentrancy/spank_chain_payment.sol#450)\n\tLedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378) can be used in cross function reentrancies:\n\t- LedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378)\n\t- LedgerChannel.LCOpenTimeout(bytes32) (shared/reentrancy/spank_chain_payment.sol#420-437)\n\t- LedgerChannel.byzantineCloseChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#756-817)\n\t- LedgerChannel.closeVirtualChannel(bytes32,bytes32) (shared/reentrancy/spank_chain_payment.sol#725-752)\n\t- LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546)\n\t- LedgerChannel.createChannel(bytes32,address,uint256,address,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#380-418)\n\t- LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492)\n\t- LedgerChannel.getChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#837-866)\n\t- LedgerChannel.initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#615-657)\n\t- LedgerChannel.joinChannel(bytes32,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#439-460)\n\t- LedgerChannel.settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#662-723)\n\t- LedgerChannel.updateLCstate(bytes32,uint256[6],bytes32,string,string) (shared/reentrancy/spank_chain_payment.sol#550-612)\n\t- Channels[_lcID].initialDeposit[0] += _balances[0] (shared/reentrancy/spank_chain_payment.sol#453)\n\tLedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378) can be used in cross function reentrancies:\n\t- LedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378)\n\t- LedgerChannel.LCOpenTimeout(bytes32) (shared/reentrancy/spank_chain_payment.sol#420-437)\n\t- LedgerChannel.byzantineCloseChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#756-817)\n\t- LedgerChannel.closeVirtualChannel(bytes32,bytes32) (shared/reentrancy/spank_chain_payment.sol#725-752)\n\t- LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546)\n\t- LedgerChannel.createChannel(bytes32,address,uint256,address,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#380-418)\n\t- LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492)\n\t- LedgerChannel.getChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#837-866)\n\t- LedgerChannel.initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#615-657)\n\t- LedgerChannel.joinChannel(bytes32,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#439-460)\n\t- LedgerChannel.settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#662-723)\n\t- LedgerChannel.updateLCstate(bytes32,uint256[6],bytes32,string,string) (shared/reentrancy/spank_chain_payment.sol#550-612)\n\t- Channels[_lcID].initialDeposit[1] += _balances[1] (shared/reentrancy/spank_chain_payment.sol#454)\n\tLedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378) can be used in cross function reentrancies:\n\t- LedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378)\n\t- LedgerChannel.LCOpenTimeout(bytes32) (shared/reentrancy/spank_chain_payment.sol#420-437)\n\t- LedgerChannel.byzantineCloseChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#756-817)\n\t- LedgerChannel.closeVirtualChannel(bytes32,bytes32) (shared/reentrancy/spank_chain_payment.sol#725-752)\n\t- LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546)\n\t- LedgerChannel.createChannel(bytes32,address,uint256,address,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#380-418)\n\t- LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492)\n\t- LedgerChannel.getChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#837-866)\n\t- LedgerChannel.initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#615-657)\n\t- LedgerChannel.joinChannel(bytes32,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#439-460)\n\t- LedgerChannel.settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#662-723)\n\t- LedgerChannel.updateLCstate(bytes32,uint256[6],bytes32,string,string) (shared/reentrancy/spank_chain_payment.sol#550-612)\n\t- Channels[_lcID].isOpen = true (shared/reentrancy/spank_chain_payment.sol#456)\n\tLedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378) can be used in cross function reentrancies:\n\t- LedgerChannel.Channels (shared/reentrancy/spank_chain_payment.sol#378)\n\t- LedgerChannel.LCOpenTimeout(bytes32) (shared/reentrancy/spank_chain_payment.sol#420-437)\n\t- LedgerChannel.byzantineCloseChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#756-817)\n\t- LedgerChannel.closeVirtualChannel(bytes32,bytes32) (shared/reentrancy/spank_chain_payment.sol#725-752)\n\t- LedgerChannel.consensusCloseChannel(bytes32,uint256,uint256[4],string,string) (shared/reentrancy/spank_chain_payment.sol#495-546)\n\t- LedgerChannel.createChannel(bytes32,address,uint256,address,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#380-418)\n\t- LedgerChannel.deposit(bytes32,address,uint256,bool) (shared/reentrancy/spank_chain_payment.sol#465-492)\n\t- LedgerChannel.getChannel(bytes32) (shared/reentrancy/spank_chain_payment.sol#837-866)\n\t- LedgerChannel.initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#615-657)\n\t- LedgerChannel.joinChannel(bytes32,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#439-460)\n\t- LedgerChannel.settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string) (shared/reentrancy/spank_chain_payment.sol#662-723)\n\t- LedgerChannel.updateLCstate(bytes32,uint256[6],bytes32,string,string) (shared/reentrancy/spank_chain_payment.sol#550-612)\n",
        "check": "reentrancy-no-eth",
        "impact": "Medium",
        "confidence": "Medium",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L439-L460"
    },
    {
        "description": "LedgerChannel.createChannel(bytes32,address,uint256,address,uint256[2]) (shared/reentrancy/spank_chain_payment.sol#380-418) contains a tautology or contradiction:\n\t- require(bool,string)(_balances[0] >= 0 && _balances[1] >= 0,Balances cannot be negative) (shared/reentrancy/spank_chain_payment.sol#392)\n",
        "check": "tautology",
        "impact": "Medium",
        "confidence": "High",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L380-L418"
    },
    {
        "description": "ECTools.substring(string,uint256,uint256) (shared/reentrancy/spank_chain_payment.sol#167-178) contains a tautology or contradiction:\n\t- require(bool)(_startIndex >= 0) (shared/reentrancy/spank_chain_payment.sol#170)\n",
        "check": "tautology",
        "impact": "Medium",
        "confidence": "High",
        "first_markdown_element": "shared/reentrancy/spank_chain_payment.sol#L167-L178"
    }
]