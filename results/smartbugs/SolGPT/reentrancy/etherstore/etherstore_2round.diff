--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/etherstore.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SolGPT/reentrancy/etherstore/etherstore_2round.sol
@@ -1,10 +1,3 @@
-/*

- * @source: https://github.com/sigp/solidity-security-blog

- * @author: Suhabe Bugrara

- * @vulnerable_at_lines: 27

- */

-

-//added pragma version

 pragma solidity ^0.4.10;

 

 contract EtherStore {

@@ -12,20 +5,22 @@
     uint256 public withdrawalLimit = 1 ether;

     mapping(address => uint256) public lastWithdrawTime;

     mapping(address => uint256) public balances;

+    mapping(address => bool) locked;

 

     function depositFunds() public payable {

         balances[msg.sender] += msg.value;

     }

 

     function withdrawFunds (uint256 _weiToWithdraw) public {

+        require(!locked[msg.sender]);

         require(balances[msg.sender] >= _weiToWithdraw);

-        // limit the withdrawal

         require(_weiToWithdraw <= withdrawalLimit);

-        // limit the time allowed to withdraw

         require(now >= lastWithdrawTime[msg.sender] + 1 weeks);

-        // <yes> <report> REENTRANCY

+        

+        locked[msg.sender] = true;

         require(msg.sender.call.value(_weiToWithdraw)());

         balances[msg.sender] -= _weiToWithdraw;

         lastWithdrawTime[msg.sender] = now;

+        locked[msg.sender] = false;

     }

- }

+}