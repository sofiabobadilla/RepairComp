--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/reentrancy_insecure.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SolGPT/reentrancy/reentrancy_insecure/reentrancy_insecure_4round.sol
@@ -1,21 +1,20 @@
-/*

- * @source: https://consensys.github.io/smart-contract-best-practices/known_attacks/

- * @author: consensys

- * @vulnerable_at_lines: 17

- */

-

 pragma solidity ^0.5.0;

 

 contract Reentrancy_insecure {

 

-    // INSECURE

     mapping (address => uint) private userBalances;

+    mapping (address => bool) private locked;

 

     function withdrawBalance() public {

+        require(!locked[msg.sender], "Withdrawal in progress");

+        locked[msg.sender] = true;

+        

         uint amountToWithdraw = userBalances[msg.sender];

-        // <yes> <report> REENTRANCY

-        (bool success, ) = msg.sender.call.value(amountToWithdraw)(""); // At this point, the caller's code is executed, and can call withdrawBalance again

+        userBalances[msg.sender] = 0;

+        

+        (bool success, ) = msg.sender.call.value(amountToWithdraw)("");

         require(success);

-        userBalances[msg.sender] = 0;

+        

+        locked[msg.sender] = false;

     }

-}

+}