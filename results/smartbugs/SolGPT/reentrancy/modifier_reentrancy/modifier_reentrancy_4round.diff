--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/modifier_reentrancy.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SolGPT/reentrancy/modifier_reentrancy/modifier_reentrancy_4round.sol
@@ -1,49 +1,42 @@
-/*

- * @source: https://github.com/SmartContractSecurity/SWC-registry/blob/master/test_cases/reentracy/modifier_reentrancy.sol

- * @author: - 

- * @vulnerable_at_lines: 15

- */

-

 pragma solidity ^0.4.24;

 

 contract ModifierEntrancy {

-  mapping (address => uint) public tokenBalance;

-  string constant name = "Nu Token";

+    mapping (address => uint) public tokenBalance;

+    string constant name = "Nu Token";

 

-  //If a contract has a zero balance and supports the token give them some token

-  // <yes> <report> REENTRANCY

-  function airDrop() hasNoBalance supportsToken  public{

-    tokenBalance[msg.sender] += 20;

-  }

+    function airDrop() hasNoBalance supportsToken public {

+        tokenBalance[msg.sender] += 20;

+    }

 

-  //Checks that the contract responds the way we want

-  modifier supportsToken() {

-    require(keccak256(abi.encodePacked("Nu Token")) == Bank(msg.sender).supportsToken());

-    _;

-  }

-  //Checks that the caller has a zero balance

-  modifier hasNoBalance {

-      require(tokenBalance[msg.sender] == 0);

-      _;

-  }

-}

+    modifier supportsToken() {

+        require(keccak256(abi.encodePacked("Nu Token")) == Bank(msg.sender).supportsToken());

+        _;

+    }

 

-contract Bank{

-    function supportsToken() external pure returns(bytes32){

-        return(keccak256(abi.encodePacked("Nu Token")));

+    modifier hasNoBalance {

+        require(tokenBalance[msg.sender] == 0);

+        _;

     }

 }

 

-contract attack{ //An example of a contract that breaks the contract above.

+contract Bank {

+    function supportsToken() external pure returns(bytes32) {

+        return keccak256(abi.encodePacked("Nu Token"));

+    }

+}

+

+contract attack {

     bool hasBeenCalled;

-    function supportsToken() external returns(bytes32){

-        if(!hasBeenCalled){

+

+    function supportsToken() external returns(bytes32) {

+        if(!hasBeenCalled) {

             hasBeenCalled = true;

             ModifierEntrancy(msg.sender).airDrop();

         }

-        return(keccak256(abi.encodePacked("Nu Token")));

+        return keccak256(abi.encodePacked("Nu Token"));

     }

-    function call(address token) public{

+

+    function call(address token) public {

         ModifierEntrancy(token).airDrop();

     }

-}

+}