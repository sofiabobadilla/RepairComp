--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SolGPT/reentrancy/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839_2round.sol
@@ -1,100 +1,63 @@
-/*

- * @source: etherscan.io 

- * @author: -

- * @vulnerable_at_lines: 94

- */

-

 pragma solidity ^0.4.19;

 

-contract Ownable

-{

-    address newOwner;

-    address owner = msg.sender;

-    

-    function changeOwner(address addr)

-    public

-    onlyOwner

-    {

+contract Ownable {

+    address public owner;

+    address public newOwner;

+

+    function Ownable() public {

+        owner = msg.sender;

+    }

+

+    function changeOwner(address addr) public onlyOwner {

         newOwner = addr;

     }

-    

-    function confirmOwner() 

-    public

-    {

-        if(msg.sender==newOwner)

-        {

-            owner=newOwner;

-        }

+

+    function confirmOwner() public {

+        require(msg.sender == newOwner);

+        owner = newOwner;

     }

-    

-    modifier onlyOwner

-    {

-        if(owner == msg.sender)_;

+

+    modifier onlyOwner() {

+        require(msg.sender == owner);

+        _;

     }

 }

 

-contract Token is Ownable

-{

-    address owner = msg.sender;

-    function WithdrawToken(address token, uint256 amount,address to)

-    public 

-    onlyOwner

-    {

-        token.call(bytes4(sha3("transfer(address,uint256)")),to,amount); 

+contract Token is Ownable {

+    function withdrawToken(address token, uint256 amount, address to) public onlyOwner {

+        require(token.call(bytes4(keccak256("transfer(address,uint256)")), to, amount));

     }

 }

 

-contract TokenBank is Token

-{

+contract TokenBank is Token {

     uint public MinDeposit;

     mapping (address => uint) public Holders;

-    

-     ///Constructor

-    function initTokenBank()

-    public

-    {

+

+    function initTokenBank() public {

         owner = msg.sender;

         MinDeposit = 1 ether;

     }

-    

-    function()

-    payable

-    {

-        Deposit();

+

+    function() payable public {

+        deposit();

     }

-   

-    function Deposit() 

-    payable

-    {

-        if(msg.value>MinDeposit)

-        {

-            Holders[msg.sender]+=msg.value;

+

+    function deposit() payable public {

+        if(msg.value > MinDeposit) {

+            Holders[msg.sender] += msg.value;

         }

     }

-    

-    function WitdrawTokenToHolder(address _to,address _token,uint _amount)

-    public

-    onlyOwner

-    {

-        if(Holders[_to]>0)

-        {

-            Holders[_to]=0;

-            WithdrawToken(_token,_amount,_to);     

+

+    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {

+        if(Holders[_to] > 0) {

+            Holders[_to] = 0;

+            withdrawToken(_token, _amount, _to);

         }

     }

-   

-    function WithdrawToHolder(address _addr, uint _wei) 

-    public

-    onlyOwner

-    payable

-    {

-        if(Holders[_addr]>0)

-        {

-            // <yes> <report> REENTRANCY

-            if(_addr.call.value(_wei)())

-            {

-                Holders[_addr]-=_wei;

-            }

-        }

+

+    function withdrawToHolder(address _addr, uint _wei) public onlyOwner payable {

+        require(Holders[_addr] > 0);

+        Holders[_addr] -= _wei;

+        _addr.transfer(_wei);

     }

 }