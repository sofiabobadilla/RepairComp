--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SolGPT/reentrancy/0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12/0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12_2round.sol
@@ -1,76 +1,52 @@
-/*

- * @source: etherscan.io 

- * @author: -

- * @vulnerable_at_lines: 40

- */

-

 pragma solidity ^0.4.19;

 

-contract Private_Bank

-{

+contract Private_Bank {

     mapping (address => uint) public balances;

     

     uint public MinDeposit = 1 ether;

     

     Log TransferLog;

     

-    function Private_Bank(address _log)

-    {

+    function Private_Bank(address _log) {

         TransferLog = Log(_log);

     }

     

-    function Deposit()

-    public

-    payable

-    {

-        if(msg.value > MinDeposit)

-        {

-            balances[msg.sender]+=msg.value;

-            TransferLog.AddMessage(msg.sender,msg.value,"Deposit");

-        }

+    function Deposit() public payable {

+        require(msg.value > MinDeposit);

+        

+        balances[msg.sender] += msg.value;

+        TransferLog.AddMessage(msg.sender, msg.value, "Deposit");

     }

     

-    function CashOut(uint _am)

-    public

-    payable

-    {

-        if(_am<=balances[msg.sender])

-        {

-            // <yes> <report> REENTRANCY

-            if(msg.sender.call.value(_am)())

-            {

-                balances[msg.sender]-=_am;

-                TransferLog.AddMessage(msg.sender,_am,"CashOut");

-            }

-        }

+    function CashOut(uint _am) public {

+        require(_am <= balances[msg.sender]);

+        

+        uint amount = _am;

+        balances[msg.sender] -= amount;

+        TransferLog.AddMessage(msg.sender, amount, "CashOut");

+        

+        msg.sender.transfer(amount);

     }

     

-    function() public payable{}    

-    

+    function() public payable {}

 }

 

-contract Log 

-{

-   

-    struct Message

-    {

+contract Log {

+    struct Message {

         address Sender;

-        string  Data;

+        string Data;

         uint Val;

-        uint  Time;

+        uint Time;

     }

     

     Message[] public History;

     

-    Message LastMsg;

-    

-    function AddMessage(address _adr,uint _val,string _data)

-    public

-    {

-        LastMsg.Sender = _adr;

-        LastMsg.Time = now;

-        LastMsg.Val = _val;

-        LastMsg.Data = _data;

-        History.push(LastMsg);

+    function AddMessage(address _adr, uint _val, string _data) public {

+        Message memory newMessage;

+        newMessage.Sender = _adr;

+        newMessage.Time = now;

+        newMessage.Val = _val;

+        newMessage.Data = _data;

+        History.push(newMessage);

     }

 }