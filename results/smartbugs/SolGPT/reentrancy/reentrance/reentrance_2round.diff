--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/reentrance.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SolGPT/reentrancy/reentrance/reentrance_2round.sol
@@ -1,32 +1,30 @@
-/*

- * @source: https://ethernaut.zeppelin.solutions/level/0xf70706db003e94cfe4b5e27ffd891d5c81b39488

- * @author: Alejandro Santander

- * @vulnerable_at_lines: 24

- */

-

 pragma solidity ^0.4.18;

 

 contract Reentrance {

 

-  mapping(address => uint) public balances;

+    mapping(address => uint) public balances;

+    mapping(address => bool) locked;

 

-  function donate(address _to) public payable {

-    balances[_to] += msg.value;

-  }

+    function donate(address _to) public payable {

+        balances[_to] += msg.value;

+    }

 

-  function balanceOf(address _who) public view returns (uint balance) {

-    return balances[_who];

-  }

+    function balanceOf(address _who) public view returns (uint balance) {

+        return balances[_who];

+    }

 

-  function withdraw(uint _amount) public {

-    if(balances[msg.sender] >= _amount) {

-      // <yes> <report> REENTRANCY

-      if(msg.sender.call.value(_amount)()) {

-        _amount;

-      }

-      balances[msg.sender] -= _amount;

+    function withdraw(uint _amount) public {

+        require(!locked[msg.sender]);

+        require(balances[msg.sender] >= _amount);

+        

+        locked[msg.sender] = true;

+        uint balance = balances[msg.sender];

+        balances[msg.sender] -= _amount;

+        msg.sender.transfer(_amount);

+        locked[msg.sender] = false;

+        

+        assert(balances[msg.sender] == balance - _amount);

     }

-  }

 

-  function() public payable {}

-}

+    function() public payable {}

+}